

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 20:24:21 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20   000000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     _TRISBbits	set	3987
    57   000000                     _PORTBbits	set	3969
    58   000000                     _PORTD	set	3971
    59   000000                     _TRISB	set	3987
    60   000000                     _TRISD	set	3989
    61   000000                     _PORTEbits	set	3972
    62   000000                     _TRISE	set	3990
    63                           
    64                           	psect	smallconst
    65   000800                     __psmallconst:
    66                           	callstack 0
    67   000800  00                 	db	0
    68   000801                     STR_4:
    69   000801  56                 	db	86	;'V'
    70   000802  49                 	db	73	;'I'
    71   000803  53                 	db	83	;'S'
    72   000804  49                 	db	73	;'I'
    73   000805  54                 	db	84	;'T'
    74   000806  41                 	db	65	;'A'
    75   000807  4E                 	db	78	;'N'
    76   000808  54                 	db	84	;'T'
    77   000809  45                 	db	69	;'E'
    78   00080A  20                 	db	32
    79   00080B  56                 	db	86	;'V'
    80   00080C  45                 	db	69	;'E'
    81   00080D  4E                 	db	78	;'N'
    82   00080E  43                 	db	67	;'C'
    83   00080F  45                 	db	69	;'E'
    84   000810  55                 	db	85	;'U'
    85   000811  00                 	db	0
    86   000812                     STR_2:
    87   000812  56                 	db	86	;'V'
    88   000813  49                 	db	73	;'I'
    89   000814  53                 	db	83	;'S'
    90   000815  49                 	db	73	;'I'
    91   000816  54                 	db	84	;'T'
    92   000817  41                 	db	65	;'A'
    93   000818  4E                 	db	78	;'N'
    94   000819  54                 	db	84	;'T'
    95   00081A  45                 	db	69	;'E'
    96   00081B  3A                 	db	58	;':'
    97   00081C  20                 	db	32
    98   00081D  00                 	db	0
    99   00081E                     STR_3:
   100   00081E  43                 	db	67	;'C'
   101   00081F  41                 	db	65	;'A'
   102   000820  53                 	db	83	;'S'
   103   000821  41                 	db	65	;'A'
   104   000822  20                 	db	32
   105   000823  56                 	db	86	;'V'
   106   000824  45                 	db	69	;'E'
   107   000825  4E                 	db	78	;'N'
   108   000826  43                 	db	67	;'C'
   109   000827  45                 	db	69	;'E'
   110   000828  55                 	db	85	;'U'
   111   000829  00                 	db	0
   112   00082A                     STR_1:
   113   00082A  43                 	db	67	;'C'
   114   00082B  41                 	db	65	;'A'
   115   00082C  53                 	db	83	;'S'
   116   00082D  41                 	db	65	;'A'
   117   00082E  3A                 	db	58	;':'
   118   00082F  20                 	db	32
   119   000830  00                 	db	0
   120   000831  00                 	db	0	; dummy byte at the end
   121   000000                     
   122                           ; #config settings
   123                           
   124                           	psect	cinit
   125   000BA8                     __pcinit:
   126                           	callstack 0
   127   000BA8                     start_initialization:
   128                           	callstack 0
   129   000BA8                     __initialization:
   130                           	callstack 0
   131   000BA8                     end_of_initialization:
   132                           	callstack 0
   133   000BA8                     __end_of__initialization:
   134                           	callstack 0
   135   000BA8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   136   000BAA  6EF8               	movwf	tblptru,c
   137   000BAC  0100               	movlb	0
   138   000BAE  EF19  F004         	goto	_main	;jump to C main() function
   139                           
   140                           	psect	cstackCOMRAM
   141   000001                     __pcstackCOMRAM:
   142                           	callstack 0
   143   000001                     lcd_wr@val:
   144                           	callstack 0
   145   000001                     atraso_ms@valor:
   146                           	callstack 0
   147                           
   148                           ; 2 bytes @ 0x0
   149   000001                     	ds	2
   150   000003                     atraso_ms@i:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x2
   154   000003                     	ds	2
   155   000005                     atraso_ms@j:
   156                           	callstack 0
   157                           
   158                           ; 1 bytes @ 0x4
   159   000005                     	ds	1
   160   000006                     lcd_cmd@val:
   161                           	callstack 0
   162   000006                     lcd_dat@val:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x5
   166   000006                     	ds	1
   167   000007                     lcd_str@str:
   168                           	callstack 0
   169   000007                     lcd_numb@str:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x6
   173   000007                     	ds	2
   174   000009                     ??_lcd_str:
   175   000009                     lcd_numb@num_placar:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x8
   179   000009                     	ds	2
   180   00000B                     lcd_str@i:
   181                           	callstack 0
   182                           
   183                           ; 1 bytes @ 0xA
   184   00000B                     	ds	1
   185   00000C                     main@casa:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0xB
   189   00000C                     	ds	2
   190   00000E                     main@visitante:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0xD
   194   00000E                     	ds	2
   195                           
   196 ;;
   197 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   198 ;;
   199 ;; *************** function _main *****************
   200 ;; Defined at:
   201 ;;		line 20 in file "newmain.c"
   202 ;; Parameters:    Size  Location     Type
   203 ;;		None
   204 ;; Auto vars:     Size  Location     Type
   205 ;;  visitante       2   13[COMRAM] int 
   206 ;;  casa            2   11[COMRAM] int 
   207 ;; Return value:  Size  Location     Type
   208 ;;                  2   92[None  ] int 
   209 ;; Registers used:
   210 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   211 ;; Tracked objects:
   212 ;;		On entry : 0/0
   213 ;;		On exit  : 0/0
   214 ;;		Unchanged: 0/0
   215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   216 ;;      Params:         0       0       0       0       0       0       0       0       0
   217 ;;      Locals:         4       0       0       0       0       0       0       0       0
   218 ;;      Temps:          0       0       0       0       0       0       0       0       0
   219 ;;      Totals:         4       0       0       0       0       0       0       0       0
   220 ;;Total ram usage:        4 bytes
   221 ;; Hardware stack levels required when called: 3
   222 ;; This function calls:
   223 ;;		_lcd_cmd
   224 ;;		_lcd_init
   225 ;;		_lcd_numb
   226 ;;		_lcd_str
   227 ;; This function is called by:
   228 ;;		Startup code after reset
   229 ;; This function uses a non-reentrant model
   230 ;;
   231                           
   232                           	psect	text0
   233   000832                     __ptext0:
   234                           	callstack 0
   235   000832                     _main:
   236                           	callstack 28
   237   000832                     
   238                           ;newmain.c: 22:     TRISD = 0x00;
   239   000832  0E00               	movlw	0
   240   000834  6E95               	movwf	149,c	;volatile
   241                           
   242                           ;newmain.c: 23:     TRISB = 0x00;
   243   000836  0E00               	movlw	0
   244   000838  6E93               	movwf	147,c	;volatile
   245                           
   246                           ;newmain.c: 24:     TRISE = 0x00;
   247   00083A  0E00               	movlw	0
   248   00083C  6E96               	movwf	150,c	;volatile
   249   00083E                     
   250                           ;newmain.c: 26:     TRISBbits.TRISB1 = 1;
   251   00083E  8293               	bsf	147,1,c	;volatile
   252   000840                     
   253                           ;newmain.c: 27:     TRISBbits.TRISB2 = 1;
   254   000840  8493               	bsf	147,2,c	;volatile
   255                           
   256                           ;newmain.c: 32:     int casa = 0x00, visitante = 0x00;
   257   000842  0E00               	movlw	0
   258   000844  6E0D               	movwf	(main@casa+1)^0,c
   259   000846  0E00               	movlw	0
   260   000848  6E0C               	movwf	main@casa^0,c
   261   00084A  0E00               	movlw	0
   262   00084C  6E0F               	movwf	(main@visitante+1)^0,c
   263   00084E  0E00               	movlw	0
   264   000850  6E0E               	movwf	main@visitante^0,c
   265   000852                     
   266                           ;newmain.c: 37:     lcd_init();
   267   000852  EC30  F005         	call	_lcd_init	;wreg free
   268   000856                     
   269                           ;newmain.c: 38:     lcd_cmd(0x01);
   270   000856  0E01               	movlw	1
   271   000858  ECBF  F005         	call	_lcd_cmd
   272   00085C                     
   273                           ;newmain.c: 40:     lcd_cmd(0x80);
   274   00085C  0E80               	movlw	128
   275   00085E  ECBF  F005         	call	_lcd_cmd
   276   000862                     
   277                           ;newmain.c: 41:     lcd_str("CASA: ");
   278   000862  0E2A               	movlw	low STR_1
   279   000864  6E07               	movwf	lcd_str@str^0,c
   280   000866  0E08               	movlw	high STR_1
   281   000868  6E08               	movwf	(lcd_str@str+1)^0,c
   282   00086A  EC5E  F005         	call	_lcd_str	;wreg free
   283   00086E                     
   284                           ;newmain.c: 42:     lcd_cmd(0x86);
   285   00086E  0E86               	movlw	134
   286   000870  ECBF  F005         	call	_lcd_cmd
   287   000874                     
   288                           ;newmain.c: 43:     lcd_numb(casa);
   289   000874  0E00               	movlw	0
   290   000876  6E08               	movwf	(lcd_numb@str+1)^0,c
   291   000878  0E00               	movlw	0
   292   00087A  6E07               	movwf	lcd_numb@str^0,c
   293   00087C  ECB6  F004         	call	_lcd_numb	;wreg free
   294   000880                     
   295                           ;newmain.c: 45:     lcd_cmd(0xC0);
   296   000880  0EC0               	movlw	192
   297   000882  ECBF  F005         	call	_lcd_cmd
   298   000886                     
   299                           ;newmain.c: 46:     lcd_str("VISITANTE: ");
   300   000886  0E12               	movlw	low STR_2
   301   000888  6E07               	movwf	lcd_str@str^0,c
   302   00088A  0E08               	movlw	high STR_2
   303   00088C  6E08               	movwf	(lcd_str@str+1)^0,c
   304   00088E  EC5E  F005         	call	_lcd_str	;wreg free
   305   000892                     
   306                           ;newmain.c: 47:     lcd_cmd(0xcb);
   307   000892  0ECB               	movlw	203
   308   000894  ECBF  F005         	call	_lcd_cmd
   309   000898                     
   310                           ;newmain.c: 48:     lcd_numb(visitante);
   311   000898  0E00               	movlw	0
   312   00089A  6E08               	movwf	(lcd_numb@str+1)^0,c
   313   00089C  0E00               	movlw	0
   314   00089E  6E07               	movwf	lcd_numb@str^0,c
   315   0008A0  ECB6  F004         	call	_lcd_numb	;wreg free
   316   0008A4                     l1076:
   317                           
   318                           ;newmain.c: 51:     {;newmain.c: 52:         if(PORTBbits.RB1 == 0)
   319   0008A4  B281               	btfsc	129,1,c	;volatile
   320   0008A6  EF57  F004         	goto	u311
   321   0008AA  EF59  F004         	goto	u310
   322   0008AE                     u311:
   323   0008AE  EF84  F004         	goto	l94
   324   0008B2                     u310:
   325   0008B2                     
   326                           ;newmain.c: 53:         {;newmain.c: 54:             if(casa != 9)
   327   0008B2  0E09               	movlw	9
   328   0008B4  180C               	xorwf	main@casa^0,w,c
   329   0008B6  100D               	iorwf	(main@casa+1)^0,w,c
   330   0008B8  B4D8               	btfsc	status,2,c
   331   0008BA  EF61  F004         	goto	u321
   332   0008BE  EF63  F004         	goto	u320
   333   0008C2                     u321:
   334   0008C2  EF79  F004         	goto	l1090
   335   0008C6                     u320:
   336   0008C6                     
   337                           ;newmain.c: 55:             {;newmain.c: 56:                 casa++;
   338   0008C6  4A0C               	infsnz	main@casa^0,f,c
   339   0008C8  2A0D               	incf	(main@casa+1)^0,f,c
   340   0008CA                     
   341                           ;newmain.c: 57:                 lcd_cmd(0x86);
   342   0008CA  0E86               	movlw	134
   343   0008CC  ECBF  F005         	call	_lcd_cmd
   344   0008D0                     
   345                           ;newmain.c: 58:                 lcd_numb(casa);
   346   0008D0  C00C  F007         	movff	main@casa,lcd_numb@str
   347   0008D4  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   348   0008D8  ECB6  F004         	call	_lcd_numb	;wreg free
   349   0008DC                     
   350                           ;newmain.c: 60:                 lcd_cmd(0xcb);
   351   0008DC  0ECB               	movlw	203
   352   0008DE  ECBF  F005         	call	_lcd_cmd
   353   0008E2                     
   354                           ;newmain.c: 61:                 lcd_numb(visitante);
   355   0008E2  C00E  F007         	movff	main@visitante,lcd_numb@str
   356   0008E6  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   357   0008EA  ECB6  F004         	call	_lcd_numb	;wreg free
   358                           
   359                           ;newmain.c: 62:             }
   360   0008EE  EF84  F004         	goto	l94
   361   0008F2                     l1090:
   362                           
   363                           ;newmain.c: 64:             {;newmain.c: 65:                 lcd_cmd(0x01);
   364   0008F2  0E01               	movlw	1
   365   0008F4  ECBF  F005         	call	_lcd_cmd
   366   0008F8                     
   367                           ;newmain.c: 66:                 lcd_str("CASA VENCEU");
   368   0008F8  0E1E               	movlw	low STR_3
   369   0008FA  6E07               	movwf	lcd_str@str^0,c
   370   0008FC  0E08               	movlw	high STR_3
   371   0008FE  6E08               	movwf	(lcd_str@str+1)^0,c
   372   000900  EC5E  F005         	call	_lcd_str	;wreg free
   373                           
   374                           ;newmain.c: 67:                 break;
   375   000904  EFB4  F004         	goto	l102
   376   000908                     l94:
   377                           
   378                           ;newmain.c: 70:         if(PORTBbits.RB2 == 0)
   379   000908  B481               	btfsc	129,2,c	;volatile
   380   00090A  EF89  F004         	goto	u331
   381   00090E  EF8B  F004         	goto	u330
   382   000912                     u331:
   383   000912  EF52  F004         	goto	l1076
   384   000916                     u330:
   385   000916                     
   386                           ;newmain.c: 71:         {;newmain.c: 72:             if(visitante != 9)
   387   000916  0E09               	movlw	9
   388   000918  180E               	xorwf	main@visitante^0,w,c
   389   00091A  100F               	iorwf	(main@visitante+1)^0,w,c
   390   00091C  B4D8               	btfsc	status,2,c
   391   00091E  EF93  F004         	goto	u341
   392   000922  EF95  F004         	goto	u340
   393   000926                     u341:
   394   000926  EFAB  F004         	goto	l1106
   395   00092A                     u340:
   396   00092A                     
   397                           ;newmain.c: 73:             {;newmain.c: 74:                 visitante++;
   398   00092A  4A0E               	infsnz	main@visitante^0,f,c
   399   00092C  2A0F               	incf	(main@visitante+1)^0,f,c
   400   00092E                     
   401                           ;newmain.c: 75:                 lcd_cmd(0x86);
   402   00092E  0E86               	movlw	134
   403   000930  ECBF  F005         	call	_lcd_cmd
   404   000934                     
   405                           ;newmain.c: 76:                 lcd_numb(casa);
   406   000934  C00C  F007         	movff	main@casa,lcd_numb@str
   407   000938  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   408   00093C  ECB6  F004         	call	_lcd_numb	;wreg free
   409   000940                     
   410                           ;newmain.c: 78:                 lcd_cmd(0xcb);
   411   000940  0ECB               	movlw	203
   412   000942  ECBF  F005         	call	_lcd_cmd
   413   000946                     
   414                           ;newmain.c: 79:                 lcd_numb(visitante);
   415   000946  C00E  F007         	movff	main@visitante,lcd_numb@str
   416   00094A  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   417   00094E  ECB6  F004         	call	_lcd_numb	;wreg free
   418                           
   419                           ;newmain.c: 80:             }
   420   000952  EF52  F004         	goto	l1076
   421   000956                     l1106:
   422                           
   423                           ;newmain.c: 82:             {;newmain.c: 83:                 lcd_cmd(0x01);
   424   000956  0E01               	movlw	1
   425   000958  ECBF  F005         	call	_lcd_cmd
   426   00095C                     
   427                           ;newmain.c: 84:                 lcd_str("VISITANTE VENCEU");
   428   00095C  0E01               	movlw	low STR_4
   429   00095E  6E07               	movwf	lcd_str@str^0,c
   430   000960  0E08               	movlw	high STR_4
   431   000962  6E08               	movwf	(lcd_str@str+1)^0,c
   432   000964  EC5E  F005         	call	_lcd_str	;wreg free
   433   000968                     l102:
   434   000968  EF00  F000         	goto	start
   435   00096C                     __end_of_main:
   436                           	callstack 0
   437                           
   438 ;; *************** function _lcd_str *****************
   439 ;; Defined at:
   440 ;;		line 79 in file "lcd.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  str             2    6[COMRAM] PTR const unsigned char 
   443 ;;		 -> STR_4(17), STR_3(12), STR_2(12), STR_1(7), 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  i               1   10[COMRAM] unsigned char 
   446 ;; Return value:  Size  Location     Type
   447 ;;                  1    wreg      void 
   448 ;; Registers used:
   449 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   450 ;; Tracked objects:
   451 ;;		On entry : 0/0
   452 ;;		On exit  : 0/0
   453 ;;		Unchanged: 0/0
   454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   455 ;;      Params:         2       0       0       0       0       0       0       0       0
   456 ;;      Locals:         1       0       0       0       0       0       0       0       0
   457 ;;      Temps:          2       0       0       0       0       0       0       0       0
   458 ;;      Totals:         5       0       0       0       0       0       0       0       0
   459 ;;Total ram usage:        5 bytes
   460 ;; Hardware stack levels used: 1
   461 ;; Hardware stack levels required when called: 2
   462 ;; This function calls:
   463 ;;		_lcd_dat
   464 ;; This function is called by:
   465 ;;		_main
   466 ;; This function uses a non-reentrant model
   467 ;;
   468                           
   469                           	psect	text1
   470   000ABC                     __ptext1:
   471                           	callstack 0
   472   000ABC                     _lcd_str:
   473                           	callstack 28
   474   000ABC                     
   475                           ;lcd.c: 79: void lcd_str(const char* str);lcd.c: 80: {;lcd.c: 81:  unsigned char i=0;
   476   000ABC  0E00               	movlw	0
   477   000ABE  6E0B               	movwf	lcd_str@i^0,c
   478                           
   479                           ;lcd.c: 83:  while(str[i] != '\0' )
   480   000AC0  EF71  F005         	goto	l1006
   481   000AC4                     l1002:
   482                           
   483                           ;lcd.c: 84:  {;lcd.c: 85:    lcd_dat(str[i]);
   484   000AC4  500B               	movf	lcd_str@i^0,w,c
   485   000AC6  2407               	addwf	lcd_str@str^0,w,c
   486   000AC8  6E09               	movwf	??_lcd_str^0,c
   487   000ACA  0E00               	movlw	0
   488   000ACC  2008               	addwfc	(lcd_str@str+1)^0,w,c
   489   000ACE  6E0A               	movwf	(??_lcd_str+1)^0,c
   490   000AD0  C009  FFF6         	movff	??_lcd_str,tblptrl
   491   000AD4  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   492   000AD8                     	if	0	;tblptru may be non-zero
   493   000AD8                     	endif
   494   000AD8                     	if	0	;tblptru may be non-zero
   495   000AD8                     	endif
   496   000AD8  0008               	tblrd		*
   497   000ADA  50F5               	movf	tablat,w,c
   498   000ADC  ECAA  F005         	call	_lcd_dat
   499   000AE0                     
   500                           ;lcd.c: 86:    i++;
   501   000AE0  2A0B               	incf	lcd_str@i^0,f,c
   502   000AE2                     l1006:
   503                           
   504                           ;lcd.c: 83:  while(str[i] != '\0' )
   505   000AE2  500B               	movf	lcd_str@i^0,w,c
   506   000AE4  2407               	addwf	lcd_str@str^0,w,c
   507   000AE6  6E09               	movwf	??_lcd_str^0,c
   508   000AE8  0E00               	movlw	0
   509   000AEA  2008               	addwfc	(lcd_str@str+1)^0,w,c
   510   000AEC  6E0A               	movwf	(??_lcd_str+1)^0,c
   511   000AEE  C009  FFF6         	movff	??_lcd_str,tblptrl
   512   000AF2  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   513   000AF6                     	if	0	;tblptru may be non-zero
   514   000AF6                     	endif
   515   000AF6                     	if	0	;tblptru may be non-zero
   516   000AF6                     	endif
   517   000AF6  0008               	tblrd		*
   518   000AF8  50F5               	movf	tablat,w,c
   519   000AFA  0900               	iorlw	0
   520   000AFC  A4D8               	btfss	status,2,c
   521   000AFE  EF83  F005         	goto	u201
   522   000B02  EF85  F005         	goto	u200
   523   000B06                     u201:
   524   000B06  EF62  F005         	goto	l1002
   525   000B0A                     u200:
   526   000B0A  0012               	return		;funcret
   527   000B0C                     __end_of_lcd_str:
   528                           	callstack 0
   529                           
   530 ;; *************** function _lcd_numb *****************
   531 ;; Defined at:
   532 ;;		line 90 in file "lcd.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;  str             2    6[COMRAM] const int 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  num_placar      1    8[COMRAM] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, status,2, status,0, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   546 ;;      Params:         2       0       0       0       0       0       0       0       0
   547 ;;      Locals:         1       0       0       0       0       0       0       0       0
   548 ;;      Temps:          0       0       0       0       0       0       0       0       0
   549 ;;      Totals:         3       0       0       0       0       0       0       0       0
   550 ;;Total ram usage:        3 bytes
   551 ;; Hardware stack levels used: 1
   552 ;; Hardware stack levels required when called: 2
   553 ;; This function calls:
   554 ;;		_lcd_dat
   555 ;; This function is called by:
   556 ;;		_main
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           	psect	text2
   561   00096C                     __ptext2:
   562                           	callstack 0
   563   00096C                     _lcd_numb:
   564                           	callstack 28
   565   00096C                     
   566                           ;lcd.c: 92:     char num_placar;;lcd.c: 94:     if(0 == str)
   567   00096C  5007               	movf	lcd_numb@str^0,w,c
   568   00096E  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   569   000970  A4D8               	btfss	status,2,c
   570   000972  EFBD  F004         	goto	u211
   571   000976  EFBF  F004         	goto	u210
   572   00097A                     u211:
   573   00097A  EFC1  F004         	goto	l1012
   574   00097E                     u210:
   575   00097E                     
   576                           ;lcd.c: 95:     {;lcd.c: 96:         num_placar = '0';
   577   00097E  0E30               	movlw	48
   578   000980  6E09               	movwf	lcd_numb@num_placar^0,c
   579   000982                     l1012:
   580                           
   581                           ;lcd.c: 98:     if(1 == str)
   582   000982  0407               	decf	lcd_numb@str^0,w,c
   583   000984  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   584   000986  A4D8               	btfss	status,2,c
   585   000988  EFC8  F004         	goto	u221
   586   00098C  EFCA  F004         	goto	u220
   587   000990                     u221:
   588   000990  EFCC  F004         	goto	l1016
   589   000994                     u220:
   590   000994                     
   591                           ;lcd.c: 99:     {;lcd.c: 100:         num_placar = '1';
   592   000994  0E31               	movlw	49
   593   000996  6E09               	movwf	lcd_numb@num_placar^0,c
   594   000998                     l1016:
   595                           
   596                           ;lcd.c: 102:     if(2 == str)
   597   000998  0E02               	movlw	2
   598   00099A  1807               	xorwf	lcd_numb@str^0,w,c
   599   00099C  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   600   00099E  A4D8               	btfss	status,2,c
   601   0009A0  EFD4  F004         	goto	u231
   602   0009A4  EFD6  F004         	goto	u230
   603   0009A8                     u231:
   604   0009A8  EFD8  F004         	goto	l1020
   605   0009AC                     u230:
   606   0009AC                     
   607                           ;lcd.c: 103:     {;lcd.c: 104:         num_placar = '2';
   608   0009AC  0E32               	movlw	50
   609   0009AE  6E09               	movwf	lcd_numb@num_placar^0,c
   610   0009B0                     l1020:
   611                           
   612                           ;lcd.c: 106:     if(3 == str)
   613   0009B0  0E03               	movlw	3
   614   0009B2  1807               	xorwf	lcd_numb@str^0,w,c
   615   0009B4  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   616   0009B6  A4D8               	btfss	status,2,c
   617   0009B8  EFE0  F004         	goto	u241
   618   0009BC  EFE2  F004         	goto	u240
   619   0009C0                     u241:
   620   0009C0  EFE4  F004         	goto	l1024
   621   0009C4                     u240:
   622   0009C4                     
   623                           ;lcd.c: 107:     {;lcd.c: 108:         num_placar = '3';
   624   0009C4  0E33               	movlw	51
   625   0009C6  6E09               	movwf	lcd_numb@num_placar^0,c
   626   0009C8                     l1024:
   627                           
   628                           ;lcd.c: 110:     if(4 == str)
   629   0009C8  0E04               	movlw	4
   630   0009CA  1807               	xorwf	lcd_numb@str^0,w,c
   631   0009CC  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   632   0009CE  A4D8               	btfss	status,2,c
   633   0009D0  EFEC  F004         	goto	u251
   634   0009D4  EFEE  F004         	goto	u250
   635   0009D8                     u251:
   636   0009D8  EFF0  F004         	goto	l1028
   637   0009DC                     u250:
   638   0009DC                     
   639                           ;lcd.c: 111:     {;lcd.c: 112:         num_placar = '4';
   640   0009DC  0E34               	movlw	52
   641   0009DE  6E09               	movwf	lcd_numb@num_placar^0,c
   642   0009E0                     l1028:
   643                           
   644                           ;lcd.c: 114:     if(5 == str)
   645   0009E0  0E05               	movlw	5
   646   0009E2  1807               	xorwf	lcd_numb@str^0,w,c
   647   0009E4  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   648   0009E6  A4D8               	btfss	status,2,c
   649   0009E8  EFF8  F004         	goto	u261
   650   0009EC  EFFA  F004         	goto	u260
   651   0009F0                     u261:
   652   0009F0  EFFC  F004         	goto	l1032
   653   0009F4                     u260:
   654   0009F4                     
   655                           ;lcd.c: 115:     {;lcd.c: 116:         num_placar = '5';
   656   0009F4  0E35               	movlw	53
   657   0009F6  6E09               	movwf	lcd_numb@num_placar^0,c
   658   0009F8                     l1032:
   659                           
   660                           ;lcd.c: 118:     if(6 == str)
   661   0009F8  0E06               	movlw	6
   662   0009FA  1807               	xorwf	lcd_numb@str^0,w,c
   663   0009FC  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   664   0009FE  A4D8               	btfss	status,2,c
   665   000A00  EF04  F005         	goto	u271
   666   000A04  EF06  F005         	goto	u270
   667   000A08                     u271:
   668   000A08  EF08  F005         	goto	l1036
   669   000A0C                     u270:
   670   000A0C                     
   671                           ;lcd.c: 119:     {;lcd.c: 120:         num_placar = '6';
   672   000A0C  0E36               	movlw	54
   673   000A0E  6E09               	movwf	lcd_numb@num_placar^0,c
   674   000A10                     l1036:
   675                           
   676                           ;lcd.c: 122:     if(7 == str)
   677   000A10  0E07               	movlw	7
   678   000A12  1807               	xorwf	lcd_numb@str^0,w,c
   679   000A14  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   680   000A16  A4D8               	btfss	status,2,c
   681   000A18  EF10  F005         	goto	u281
   682   000A1C  EF12  F005         	goto	u280
   683   000A20                     u281:
   684   000A20  EF14  F005         	goto	l1040
   685   000A24                     u280:
   686   000A24                     
   687                           ;lcd.c: 123:     {;lcd.c: 124:         num_placar = '7';
   688   000A24  0E37               	movlw	55
   689   000A26  6E09               	movwf	lcd_numb@num_placar^0,c
   690   000A28                     l1040:
   691                           
   692                           ;lcd.c: 126:     if(8 == str)
   693   000A28  0E08               	movlw	8
   694   000A2A  1807               	xorwf	lcd_numb@str^0,w,c
   695   000A2C  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   696   000A2E  A4D8               	btfss	status,2,c
   697   000A30  EF1C  F005         	goto	u291
   698   000A34  EF1E  F005         	goto	u290
   699   000A38                     u291:
   700   000A38  EF20  F005         	goto	l1044
   701   000A3C                     u290:
   702   000A3C                     
   703                           ;lcd.c: 127:     {;lcd.c: 128:         num_placar = '8';
   704   000A3C  0E38               	movlw	56
   705   000A3E  6E09               	movwf	lcd_numb@num_placar^0,c
   706   000A40                     l1044:
   707                           
   708                           ;lcd.c: 131:     if(9 == str)
   709   000A40  0E09               	movlw	9
   710   000A42  1807               	xorwf	lcd_numb@str^0,w,c
   711   000A44  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   712   000A46  A4D8               	btfss	status,2,c
   713   000A48  EF28  F005         	goto	u301
   714   000A4C  EF2A  F005         	goto	u300
   715   000A50                     u301:
   716   000A50  EF2C  F005         	goto	l1048
   717   000A54                     u300:
   718   000A54                     
   719                           ;lcd.c: 132:     {;lcd.c: 133:         num_placar = '9';
   720   000A54  0E39               	movlw	57
   721   000A56  6E09               	movwf	lcd_numb@num_placar^0,c
   722   000A58                     l1048:
   723                           
   724                           ;lcd.c: 135:     lcd_dat(num_placar);
   725   000A58  5009               	movf	lcd_numb@num_placar^0,w,c
   726   000A5A  ECAA  F005         	call	_lcd_dat
   727   000A5E  0012               	return		;funcret
   728   000A60                     __end_of_lcd_numb:
   729                           	callstack 0
   730                           
   731 ;; *************** function _lcd_dat *****************
   732 ;; Defined at:
   733 ;;		line 49 in file "lcd.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;  val             1    wreg     unsigned char 
   736 ;; Auto vars:     Size  Location     Type
   737 ;;  val             1    5[COMRAM] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   747 ;;      Params:         0       0       0       0       0       0       0       0       0
   748 ;;      Locals:         1       0       0       0       0       0       0       0       0
   749 ;;      Temps:          0       0       0       0       0       0       0       0       0
   750 ;;      Totals:         1       0       0       0       0       0       0       0       0
   751 ;;Total ram usage:        1 bytes
   752 ;; Hardware stack levels used: 1
   753 ;; Hardware stack levels required when called: 1
   754 ;; This function calls:
   755 ;;		_atraso_ms
   756 ;;		_lcd_wr
   757 ;; This function is called by:
   758 ;;		_lcd_str
   759 ;;		_lcd_numb
   760 ;; This function uses a non-reentrant model
   761 ;;
   762                           
   763                           	psect	text3
   764   000B54                     __ptext3:
   765                           	callstack 0
   766   000B54                     _lcd_dat:
   767                           	callstack 28
   768                           
   769                           ;incstack = 0
   770                           ;lcd_dat@val stored from wreg
   771   000B54  6E06               	movwf	lcd_dat@val^0,c
   772   000B56                     
   773                           ;lcd.c: 49: void lcd_dat(unsigned char val);lcd.c: 50: {;lcd.c: 51:  PORTEbits.RE1=1;
   774   000B56  8284               	bsf	132,1,c	;volatile
   775   000B58                     
   776                           ;lcd.c: 52:         lcd_wr(val);
   777   000B58  5006               	movf	lcd_dat@val^0,w,c
   778   000B5A  ECD9  F005         	call	_lcd_wr
   779   000B5E                     
   780                           ;lcd.c: 53:         PORTEbits.RE0=1;
   781   000B5E  8084               	bsf	132,0,c	;volatile
   782   000B60                     
   783                           ;lcd.c: 54:         atraso_ms(3);
   784   000B60  0E00               	movlw	0
   785   000B62  6E02               	movwf	(atraso_ms@valor+1)^0,c
   786   000B64  0E03               	movlw	3
   787   000B66  6E01               	movwf	atraso_ms@valor^0,c
   788   000B68  EC86  F005         	call	_atraso_ms	;wreg free
   789   000B6C                     
   790                           ;lcd.c: 55:         PORTEbits.RE1=0;
   791   000B6C  9284               	bcf	132,1,c	;volatile
   792   000B6E                     
   793                           ;lcd.c: 56:         atraso_ms(3);
   794   000B6E  0E00               	movlw	0
   795   000B70  6E02               	movwf	(atraso_ms@valor+1)^0,c
   796   000B72  0E03               	movlw	3
   797   000B74  6E01               	movwf	atraso_ms@valor^0,c
   798   000B76  EC86  F005         	call	_atraso_ms	;wreg free
   799   000B7A                     
   800                           ;lcd.c: 57:  PORTEbits.RE1=1;
   801   000B7A  8284               	bsf	132,1,c	;volatile
   802   000B7C  0012               	return		;funcret
   803   000B7E                     __end_of_lcd_dat:
   804                           	callstack 0
   805                           
   806 ;; *************** function _lcd_init *****************
   807 ;; Defined at:
   808 ;;		line 60 in file "lcd.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0       0       0       0       0
   825 ;;      Totals:         0       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        0 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 2
   829 ;; This function calls:
   830 ;;		_atraso_ms
   831 ;;		_lcd_cmd
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837                           	psect	text4
   838   000A60                     __ptext4:
   839                           	callstack 0
   840   000A60                     _lcd_init:
   841                           	callstack 28
   842   000A60                     
   843                           ;lcd.c: 62:  PORTEbits.RE1=0;
   844   000A60  9284               	bcf	132,1,c	;volatile
   845                           
   846                           ;lcd.c: 63:  PORTEbits.RE0=0;
   847   000A62  9084               	bcf	132,0,c	;volatile
   848   000A64                     
   849                           ;lcd.c: 64:  atraso_ms(20);
   850   000A64  0E00               	movlw	0
   851   000A66  6E02               	movwf	(atraso_ms@valor+1)^0,c
   852   000A68  0E14               	movlw	20
   853   000A6A  6E01               	movwf	atraso_ms@valor^0,c
   854   000A6C  EC86  F005         	call	_atraso_ms	;wreg free
   855   000A70                     
   856                           ;lcd.c: 65:  PORTEbits.RE1=1;
   857   000A70  8284               	bsf	132,1,c	;volatile
   858                           
   859                           ;lcd.c: 67:  lcd_cmd(0x38);
   860   000A72  0E38               	movlw	56
   861   000A74  ECBF  F005         	call	_lcd_cmd
   862                           
   863                           ;lcd.c: 68:  atraso_ms(5);
   864   000A78  0E00               	movlw	0
   865   000A7A  6E02               	movwf	(atraso_ms@valor+1)^0,c
   866   000A7C  0E05               	movlw	5
   867   000A7E  6E01               	movwf	atraso_ms@valor^0,c
   868   000A80  EC86  F005         	call	_atraso_ms	;wreg free
   869                           
   870                           ;lcd.c: 69:  lcd_cmd(0x38);
   871   000A84  0E38               	movlw	56
   872   000A86  ECBF  F005         	call	_lcd_cmd
   873                           
   874                           ;lcd.c: 70:         atraso_ms(1);
   875   000A8A  0E00               	movlw	0
   876   000A8C  6E02               	movwf	(atraso_ms@valor+1)^0,c
   877   000A8E  0E01               	movlw	1
   878   000A90  6E01               	movwf	atraso_ms@valor^0,c
   879   000A92  EC86  F005         	call	_atraso_ms	;wreg free
   880                           
   881                           ;lcd.c: 71:  lcd_cmd(0x38);
   882   000A96  0E38               	movlw	56
   883   000A98  ECBF  F005         	call	_lcd_cmd
   884                           
   885                           ;lcd.c: 72:  lcd_cmd(0x08);
   886   000A9C  0E08               	movlw	8
   887   000A9E  ECBF  F005         	call	_lcd_cmd
   888                           
   889                           ;lcd.c: 73:  lcd_cmd(0x0F);
   890   000AA2  0E0F               	movlw	15
   891   000AA4  ECBF  F005         	call	_lcd_cmd
   892                           
   893                           ;lcd.c: 74:  lcd_cmd(0x01);
   894   000AA8  0E01               	movlw	1
   895   000AAA  ECBF  F005         	call	_lcd_cmd
   896                           
   897                           ;lcd.c: 75:  lcd_cmd(0x38);
   898   000AAE  0E38               	movlw	56
   899   000AB0  ECBF  F005         	call	_lcd_cmd
   900                           
   901                           ;lcd.c: 76:         lcd_cmd(0x80);
   902   000AB4  0E80               	movlw	128
   903   000AB6  ECBF  F005         	call	_lcd_cmd
   904   000ABA  0012               	return		;funcret
   905   000ABC                     __end_of_lcd_init:
   906                           	callstack 0
   907                           
   908 ;; *************** function _lcd_cmd *****************
   909 ;; Defined at:
   910 ;;		line 38 in file "lcd.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;  val             1    wreg     unsigned char 
   913 ;; Auto vars:     Size  Location     Type
   914 ;;  val             1    5[COMRAM] unsigned char 
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, status,2, status,0, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   924 ;;      Params:         0       0       0       0       0       0       0       0       0
   925 ;;      Locals:         1       0       0       0       0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0       0       0
   927 ;;      Totals:         1       0       0       0       0       0       0       0       0
   928 ;;Total ram usage:        1 bytes
   929 ;; Hardware stack levels used: 1
   930 ;; Hardware stack levels required when called: 1
   931 ;; This function calls:
   932 ;;		_atraso_ms
   933 ;;		_lcd_wr
   934 ;; This function is called by:
   935 ;;		_lcd_init
   936 ;;		_main
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text5
   941   000B7E                     __ptext5:
   942                           	callstack 0
   943   000B7E                     _lcd_cmd:
   944                           	callstack 28
   945                           
   946                           ;incstack = 0
   947                           ;lcd_cmd@val stored from wreg
   948   000B7E  6E06               	movwf	lcd_cmd@val^0,c
   949   000B80                     
   950                           ;lcd.c: 38: void lcd_cmd(unsigned char val);lcd.c: 39: {;lcd.c: 40:  PORTEbits.RE1=1;
   951   000B80  8284               	bsf	132,1,c	;volatile
   952   000B82                     
   953                           ;lcd.c: 41:         lcd_wr(val);
   954   000B82  5006               	movf	lcd_cmd@val^0,w,c
   955   000B84  ECD9  F005         	call	_lcd_wr
   956   000B88                     
   957                           ;lcd.c: 42:         PORTEbits.RE0=0;
   958   000B88  9084               	bcf	132,0,c	;volatile
   959   000B8A                     
   960                           ;lcd.c: 43:         atraso_ms(3);
   961   000B8A  0E00               	movlw	0
   962   000B8C  6E02               	movwf	(atraso_ms@valor+1)^0,c
   963   000B8E  0E03               	movlw	3
   964   000B90  6E01               	movwf	atraso_ms@valor^0,c
   965   000B92  EC86  F005         	call	_atraso_ms	;wreg free
   966   000B96                     
   967                           ;lcd.c: 44:         PORTEbits.RE1=0;
   968   000B96  9284               	bcf	132,1,c	;volatile
   969   000B98                     
   970                           ;lcd.c: 45:         atraso_ms(3);
   971   000B98  0E00               	movlw	0
   972   000B9A  6E02               	movwf	(atraso_ms@valor+1)^0,c
   973   000B9C  0E03               	movlw	3
   974   000B9E  6E01               	movwf	atraso_ms@valor^0,c
   975   000BA0  EC86  F005         	call	_atraso_ms	;wreg free
   976   000BA4                     
   977                           ;lcd.c: 46:  PORTEbits.RE1=1;
   978   000BA4  8284               	bsf	132,1,c	;volatile
   979   000BA6  0012               	return		;funcret
   980   000BA8                     __end_of_lcd_cmd:
   981                           	callstack 0
   982                           
   983 ;; *************** function _lcd_wr *****************
   984 ;; Defined at:
   985 ;;		line 33 in file "lcd.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;  val             1    wreg     unsigned char 
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  val             1    0[COMRAM] unsigned char 
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   999 ;;      Params:         0       0       0       0       0       0       0       0       0
  1000 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1001 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1002 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1003 ;;Total ram usage:        1 bytes
  1004 ;; Hardware stack levels used: 1
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_lcd_cmd
  1009 ;;		_lcd_dat
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text6
  1014   000BB2                     __ptext6:
  1015                           	callstack 0
  1016   000BB2                     _lcd_wr:
  1017                           	callstack 28
  1018                           
  1019                           ;incstack = 0
  1020                           ;lcd_wr@val stored from wreg
  1021   000BB2  6E01               	movwf	lcd_wr@val^0,c
  1022   000BB4                     
  1023                           ;lcd.c: 33: void lcd_wr(unsigned char val);lcd.c: 34: {;lcd.c: 35:   PORTD=val;
  1024   000BB4  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1025   000BB8  0012               	return		;funcret
  1026   000BBA                     __end_of_lcd_wr:
  1027                           	callstack 0
  1028                           
  1029 ;; *************** function _atraso_ms *****************
  1030 ;; Defined at:
  1031 ;;		line 26 in file "atraso.c"
  1032 ;; Parameters:    Size  Location     Type
  1033 ;;  valor           2    0[COMRAM] unsigned int 
  1034 ;; Auto vars:     Size  Location     Type
  1035 ;;  i               2    2[COMRAM] unsigned int 
  1036 ;;  j               1    4[COMRAM] unsigned char 
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         2       0       0       0       0       0       0       0       0
  1047 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        5 bytes
  1051 ;; Hardware stack levels used: 1
  1052 ;; This function calls:
  1053 ;;		Nothing
  1054 ;; This function is called by:
  1055 ;;		_lcd_cmd
  1056 ;;		_lcd_dat
  1057 ;;		_lcd_init
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text7
  1062   000B0C                     __ptext7:
  1063                           	callstack 0
  1064   000B0C                     _atraso_ms:
  1065                           	callstack 28
  1066   000B0C                     
  1067                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1068   000B0C  0E00               	movlw	0
  1069   000B0E  6E04               	movwf	(atraso_ms@i+1)^0,c
  1070   000B10  0E00               	movlw	0
  1071   000B12  6E03               	movwf	atraso_ms@i^0,c
  1072   000B14  EF9E  F005         	goto	l964
  1073   000B18                     l952:
  1074                           
  1075                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1076   000B18  0E00               	movlw	0
  1077   000B1A  6E05               	movwf	atraso_ms@j^0,c
  1078   000B1C                     l5:
  1079   000B1C  F000               	nop		;# 
  1080   000B1E  F000               	nop		;# 
  1081   000B20  F000               	nop		;# 
  1082   000B22  F000               	nop		;# 
  1083   000B24  F000               	nop		;# 
  1084   000B26                     
  1085                           ;atraso.c: 41:    }
  1086   000B26  2A05               	incf	atraso_ms@j^0,f,c
  1087   000B28  0EC7               	movlw	199
  1088   000B2A  6405               	cpfsgt	atraso_ms@j^0,c
  1089   000B2C  EF9A  F005         	goto	u181
  1090   000B30  EF9C  F005         	goto	u180
  1091   000B34                     u181:
  1092   000B34  EF8E  F005         	goto	l5
  1093   000B38                     u180:
  1094   000B38                     
  1095                           ;atraso.c: 42:  }
  1096   000B38  4A03               	infsnz	atraso_ms@i^0,f,c
  1097   000B3A  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1098   000B3C                     l964:
  1099   000B3C  5001               	movf	atraso_ms@valor^0,w,c
  1100   000B3E  5C03               	subwf	atraso_ms@i^0,w,c
  1101   000B40  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1102   000B42  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1103   000B44  A0D8               	btfss	status,0,c
  1104   000B46  EFA7  F005         	goto	u191
  1105   000B4A  EFA9  F005         	goto	u190
  1106   000B4E                     u191:
  1107   000B4E  EF8C  F005         	goto	l952
  1108   000B52                     u190:
  1109   000B52  0012               	return		;funcret
  1110   000B54                     __end_of_atraso_ms:
  1111                           	callstack 0
  1112                           
  1113                           	psect	rparam
  1114   000000                     
  1115                           	psect	idloc
  1116                           
  1117                           ;Config register IDLOC0 @ 0x200000
  1118                           ;	unspecified, using default values
  1119   200000                     	org	2097152
  1120   200000  FF                 	db	255
  1121                           
  1122                           ;Config register IDLOC1 @ 0x200001
  1123                           ;	unspecified, using default values
  1124   200001                     	org	2097153
  1125   200001  FF                 	db	255
  1126                           
  1127                           ;Config register IDLOC2 @ 0x200002
  1128                           ;	unspecified, using default values
  1129   200002                     	org	2097154
  1130   200002  FF                 	db	255
  1131                           
  1132                           ;Config register IDLOC3 @ 0x200003
  1133                           ;	unspecified, using default values
  1134   200003                     	org	2097155
  1135   200003  FF                 	db	255
  1136                           
  1137                           ;Config register IDLOC4 @ 0x200004
  1138                           ;	unspecified, using default values
  1139   200004                     	org	2097156
  1140   200004  FF                 	db	255
  1141                           
  1142                           ;Config register IDLOC5 @ 0x200005
  1143                           ;	unspecified, using default values
  1144   200005                     	org	2097157
  1145   200005  FF                 	db	255
  1146                           
  1147                           ;Config register IDLOC6 @ 0x200006
  1148                           ;	unspecified, using default values
  1149   200006                     	org	2097158
  1150   200006  FF                 	db	255
  1151                           
  1152                           ;Config register IDLOC7 @ 0x200007
  1153                           ;	unspecified, using default values
  1154   200007                     	org	2097159
  1155   200007  FF                 	db	255
  1156                           
  1157                           	psect	config
  1158                           
  1159                           ;Config register CONFIG1L @ 0x300000
  1160                           ;	PLL Prescaler Selection bits
  1161                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1162                           ;	System Clock Postscaler Selection bits
  1163                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1164                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1165                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1166   300000                     	org	3145728
  1167   300000  29                 	db	41
  1168                           
  1169                           ;Config register CONFIG1H @ 0x300001
  1170                           ;	Oscillator Selection bits
  1171                           ;	FOSC = HS, HS oscillator (HS)
  1172                           ;	Fail-Safe Clock Monitor Enable bit
  1173                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1174                           ;	Internal/External Oscillator Switchover bit
  1175                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1176   300001                     	org	3145729
  1177   300001  0C                 	db	12
  1178                           
  1179                           ;Config register CONFIG2L @ 0x300002
  1180                           ;	Power-up Timer Enable bit
  1181                           ;	PWRT = ON, PWRT enabled
  1182                           ;	Brown-out Reset Enable bits
  1183                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1184                           ;	Brown-out Reset Voltage bits
  1185                           ;	BORV = 3, Minimum setting 2.05V
  1186                           ;	USB Voltage Regulator Enable bit
  1187                           ;	VREGEN = OFF, USB voltage regulator disabled
  1188   300002                     	org	3145730
  1189   300002  18                 	db	24
  1190                           
  1191                           ;Config register CONFIG2H @ 0x300003
  1192                           ;	Watchdog Timer Enable bit
  1193                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1194                           ;	Watchdog Timer Postscale Select bits
  1195                           ;	WDTPS = 32768, 1:32768
  1196   300003                     	org	3145731
  1197   300003  1E                 	db	30
  1198                           
  1199                           ; Padding undefined space
  1200   300004                     	org	3145732
  1201   300004  FF                 	db	255
  1202                           
  1203                           ;Config register CONFIG3H @ 0x300005
  1204                           ;	CCP2 MUX bit
  1205                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1206                           ;	PORTB A/D Enable bit
  1207                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1208                           ;	Low-Power Timer 1 Oscillator Enable bit
  1209                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1210                           ;	MCLR Pin Enable bit
  1211                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1212   300005                     	org	3145733
  1213   300005  81                 	db	129
  1214                           
  1215                           ;Config register CONFIG4L @ 0x300006
  1216                           ;	Stack Full/Underflow Reset Enable bit
  1217                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1218                           ;	Single-Supply ICSP Enable bit
  1219                           ;	LVP = OFF, Single-Supply ICSP disabled
  1220                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1221                           ;	ICPRT = OFF, ICPORT disabled
  1222                           ;	Extended Instruction Set Enable bit
  1223                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1224                           ;	Background Debugger Enable bit
  1225                           ;	DEBUG = 0x1, unprogrammed default
  1226   300006                     	org	3145734
  1227   300006  80                 	db	128
  1228                           
  1229                           ; Padding undefined space
  1230   300007                     	org	3145735
  1231   300007  FF                 	db	255
  1232                           
  1233                           ;Config register CONFIG5L @ 0x300008
  1234                           ;	Code Protection bit
  1235                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1236                           ;	Code Protection bit
  1237                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1238                           ;	Code Protection bit
  1239                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1240                           ;	Code Protection bit
  1241                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1242   300008                     	org	3145736
  1243   300008  0F                 	db	15
  1244                           
  1245                           ;Config register CONFIG5H @ 0x300009
  1246                           ;	Boot Block Code Protection bit
  1247                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1248                           ;	Data EEPROM Code Protection bit
  1249                           ;	CPD = OFF, Data EEPROM is not code-protected
  1250   300009                     	org	3145737
  1251   300009  C0                 	db	192
  1252                           
  1253                           ;Config register CONFIG6L @ 0x30000A
  1254                           ;	Write Protection bit
  1255                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1256                           ;	Write Protection bit
  1257                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1258                           ;	Write Protection bit
  1259                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1260                           ;	Write Protection bit
  1261                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1262   30000A                     	org	3145738
  1263   30000A  0F                 	db	15
  1264                           
  1265                           ;Config register CONFIG6H @ 0x30000B
  1266                           ;	Configuration Register Write Protection bit
  1267                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1268                           ;	Boot Block Write Protection bit
  1269                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1270                           ;	Data EEPROM Write Protection bit
  1271                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1272   30000B                     	org	3145739
  1273   30000B  E0                 	db	224
  1274                           
  1275                           ;Config register CONFIG7L @ 0x30000C
  1276                           ;	Table Read Protection bit
  1277                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1278                           ;	Table Read Protection bit
  1279                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1280                           ;	Table Read Protection bit
  1281                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1282                           ;	Table Read Protection bit
  1283                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1284   30000C                     	org	3145740
  1285   30000C  0F                 	db	15
  1286                           
  1287                           ;Config register CONFIG7H @ 0x30000D
  1288                           ;	Boot Block Table Read Protection bit
  1289                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1290   30000D                     	org	3145741
  1291   30000D  40                 	db	64
  1292                           tosu	equ	0xFFF
  1293                           tosh	equ	0xFFE
  1294                           tosl	equ	0xFFD
  1295                           stkptr	equ	0xFFC
  1296                           pclatu	equ	0xFFB
  1297                           pclath	equ	0xFFA
  1298                           pcl	equ	0xFF9
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           prodh	equ	0xFF4
  1304                           prodl	equ	0xFF3
  1305                           indf0	equ	0xFEF
  1306                           postinc0	equ	0xFEE
  1307                           postdec0	equ	0xFED
  1308                           preinc0	equ	0xFEC
  1309                           plusw0	equ	0xFEB
  1310                           fsr0h	equ	0xFEA
  1311                           fsr0l	equ	0xFE9
  1312                           wreg	equ	0xFE8
  1313                           indf1	equ	0xFE7
  1314                           postinc1	equ	0xFE6
  1315                           postdec1	equ	0xFE5
  1316                           preinc1	equ	0xFE4
  1317                           plusw1	equ	0xFE3
  1318                           fsr1h	equ	0xFE2
  1319                           fsr1l	equ	0xFE1
  1320                           bsr	equ	0xFE0
  1321                           indf2	equ	0xFDF
  1322                           postinc2	equ	0xFDE
  1323                           postdec2	equ	0xFDD
  1324                           preinc2	equ	0xFDC
  1325                           plusw2	equ	0xFDB
  1326                           fsr2h	equ	0xFDA
  1327                           fsr2l	equ	0xFD9
  1328                           status	equ	0xFD8

Data Sizes:
    Strings     48
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[12]), STR_2(CODE[12]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4550
                                             11 COMRAM     4     4      0
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1055
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             3     1      2    1369
                                              6 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1285
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     624
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BITBIGSFRhll         E      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRll         21      0       0      25        0.0%
BIGRAM             7FF      0       0      26        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 20:24:21 2022

                      l5 0B1C                        l8 0B52                       l42 0BB8  
                     l51 0ABA                       l45 0BA6                       l70 0A5E  
                     l48 0B7C                       l57 0B0A                       l94 0908  
                    l102 0968                      l950 0B0C                      l960 0B28  
                    l952 0B18                      l962 0B38                      l794 0BB4  
                    l970 0B88                      l964 0B3C                      l972 0B8A  
                    l980 0B56                      l958 0B26                      l974 0B96  
                    l966 0B80                      l990 0B6E                      l982 0B58  
                    l976 0B98                      l968 0B82                      l992 0B7A  
                    l984 0B5E                      l978 0BA4                      l994 0A60  
                    l986 0B60                      l996 0A64                      l988 0B6C  
                    l998 0A70                      u200 0B0A                      u201 0B06  
                    u210 097E                      u211 097A                      u300 0A54  
                    u220 0994                      u301 0A50                      u221 0990  
                    u230 09AC                      u310 08B2                      u231 09A8  
                    u311 08AE                      u240 09C4                      u320 08C6  
                    u241 09C0                      u321 08C2                      u250 09DC  
                    u330 0916                      u251 09D8                      u331 0912  
                    u180 0B38                      u260 09F4                      u340 092A  
                    u181 0B34                      u261 09F0                      u341 0926  
                    u190 0B52                      u270 0A0C                      u191 0B4E  
                    u271 0A08                      u280 0A24                      u281 0A20  
                    u290 0A3C                      u291 0A38                     l1000 0ABC  
                   l1010 097E                     l1002 0AC4                     l1020 09B0  
                   l1012 0982                     l1004 0AE0                     l1100 0934  
                   l1030 09F4                     l1022 09C4                     l1014 0994  
                   l1006 0AE2                     l1102 0940                     l1040 0A28  
                   l1032 09F8                     l1024 09C8                     l1016 0998  
                   l1008 096C                     l1104 0946                     l1042 0A3C  
                   l1034 0A0C                     l1026 09DC                     l1018 09AC  
                   l1106 0956                     l1050 0832                     l1044 0A40  
                   l1036 0A10                     l1028 09E0                     l1108 095C  
                   l1060 085C                     l1052 083E                     l1046 0A54  
                   l1038 0A24                     l1070 0886                     l1062 0862  
                   l1054 0840                     l1048 0A58                     l1080 08C6  
                   l1072 0892                     l1064 086E                     l1056 0852  
                   l1082 08CA                     l1090 08F2                     l1074 0898  
                   l1066 0874                     l1058 0856                     l1092 08F8  
                   l1084 08D0                     l1076 08A4                     l1068 0880  
                   l1094 0916                     l1086 08DC                     l1078 08B2  
                   l1096 092A                     l1088 08E2                     l1098 092E  
                   STR_1 082A                     STR_2 0812                     STR_3 081E  
                   STR_4 0801              lcd_numb@str 0007                     _main 0832  
                   start 0000             ___param_bank 000000                    ?_main 0001  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcd_dat 0B7E          __end_of_lcd_cmd 0BA8  
        __end_of_lcd_str 0B0C                    tablat 000FF5                    status 000FD8  
        __initialization 0BA8             __end_of_main 096C                   ??_main 000C  
          __activetblptr 000002         __end_of_lcd_init 0ABC         __end_of_lcd_numb 0A60  
                 _lcd_wr 0BB2                   isa$std 000001                ??_lcd_dat 0006  
              ??_lcd_cmd 0006                ??_lcd_str 0009             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          main@visitante 000E               __accesstop 0060  __end_of__initialization 0BA8  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  ?_lcd_wr 0001  
              ?_lcd_init 0001                ?_lcd_numb 0007                  __Hparam 0000  
                __Lparam 0000        __end_of_atraso_ms 0B54             __psmallconst 0800  
                __pcinit 0BA8                  __ramtop 0800                  __ptext0 0832  
                __ptext1 0ABC                  __ptext2 096C                  __ptext3 0B54  
                __ptext4 0A60                  __ptext5 0B7E                  __ptext6 0BB2  
                __ptext7 0B0C                  _lcd_dat 0B54                  _lcd_cmd 0B7E  
                _lcd_str 0ABC               ??_lcd_init 0007               ??_lcd_numb 0009  
   end_of_initialization 0BA8            __Lmediumconst 0000                _PORTBbits 000F81  
              _PORTEbits 000F84                _TRISBbits 000F93               lcd_dat@val 0006  
             lcd_cmd@val 0006               lcd_str@str 0007               atraso_ms@i 0003  
             atraso_ms@j 0005           __end_of_lcd_wr 0BBA      start_initialization 0BA8  
     lcd_numb@num_placar 0009                 ??_lcd_wr 0001                 ?_lcd_dat 0001  
               ?_lcd_cmd 0001                 ?_lcd_str 0007                _atraso_ms 0B0C  
            __smallconst 0800           atraso_ms@valor 0001               ?_atraso_ms 0001  
              lcd_wr@val 0001                 __Hrparam 0000                 __Lrparam 0000  
               _lcd_init 0A60                 _lcd_numb 096C                 isa$xinst 000000  
               main@casa 000C                 lcd_str@i 000B              ??_atraso_ms 0003  
