

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 16:35:51 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.40
    26                           ; Generated 17/11/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _TRISBbits	set	3987
    61   000000                     _PORTBbits	set	3969
    62   000000                     _PORTD	set	3971
    63   000000                     _TRISB	set	3987
    64   000000                     _TRISD	set	3989
    65   000000                     _PORTEbits	set	3972
    66   000000                     _TRISE	set	3990
    67                           
    68                           	psect	smallconst
    69   000800                     __psmallconst:
    70                           	callstack 0
    71   000800  00                 	db	0
    72   000801                     STR_11:
    73   000801  63                 	db	99	;'c'
    74   000802  61                 	db	97	;'a'
    75   000803  73                 	db	115	;'s'
    76   000804  61                 	db	97	;'a'
    77   000805  20                 	db	32
    78   000806  76                 	db	118	;'v'
    79   000807  65                 	db	101	;'e'
    80   000808  6E                 	db	110	;'n'
    81   000809  63                 	db	99	;'c'
    82   00080A  65                 	db	101	;'e'
    83   00080B  64                 	db	100	;'d'
    84   00080C  6F                 	db	111	;'o'
    85   00080D  72                 	db	114	;'r'
    86   00080E  00                 	db	0
    87   00080F                     STR_12:
    88   00080F  61                 	db	97	;'a'
    89   000810  70                 	db	112	;'p'
    90   000811  65                 	db	101	;'e'
    91   000812  72                 	db	114	;'r'
    92   000813  74                 	db	116	;'t'
    93   000814  65                 	db	101	;'e'
    94   000815  69                 	db	105	;'i'
    95   000816  20                 	db	32
    96   000817  72                 	db	114	;'r'
    97   000818  62                 	db	98	;'b'
    98   000819  32                 	db	50	;'2'
    99   00081A  20                 	db	32
   100   00081B  00                 	db	0
   101   00081C                     STR_10:
   102   00081C  43                 	db	67	;'C'
   103   00081D  41                 	db	65	;'A'
   104   00081E  53                 	db	83	;'S'
   105   00081F  41                 	db	65	;'A'
   106   000820  3A                 	db	58	;':'
   107   000821  20                 	db	32
   108   000822  00                 	db	0
   109   000823                     STR_1:
   110   000823  30                 	db	48	;'0'
   111   000824  00                 	db	0
   112   000825                     STR_2:
   113   000825  31                 	db	49	;'1'
   114   000826  00                 	db	0
   115   000827                     STR_3:
   116   000827  32                 	db	50	;'2'
   117   000828  00                 	db	0
   118   000829                     STR_4:
   119   000829  33                 	db	51	;'3'
   120   00082A  00                 	db	0
   121   00082B                     STR_5:
   122   00082B  34                 	db	52	;'4'
   123   00082C  00                 	db	0
   124   00082D                     STR_6:
   125   00082D  35                 	db	53	;'5'
   126   00082E  00                 	db	0
   127   00082F                     STR_7:
   128   00082F  36                 	db	54	;'6'
   129   000830  00                 	db	0
   130   000831                     STR_8:
   131   000831  37                 	db	55	;'7'
   132   000832  00                 	db	0
   133   000833                     STR_9:
   134   000833  38                 	db	56	;'8'
   135   000834  00                 	db	0
   136   000835  00                 	db	0	; dummy byte at the end
   137   000000                     
   138                           ; #config settings
   139                           
   140                           	psect	cinit
   141   000B32                     __pcinit:
   142                           	callstack 0
   143   000B32                     start_initialization:
   144                           	callstack 0
   145   000B32                     __initialization:
   146                           	callstack 0
   147                           
   148                           ; Clear objects allocated to COMRAM (65 bytes)
   149   000B32  EE00  F001         	lfsr	0,__pbssCOMRAM
   150   000B36  0E41               	movlw	65
   151   000B38                     clear_0:
   152   000B38  6AEE               	clrf	postinc0,c
   153   000B3A  06E8               	decf	wreg,f,c
   154   000B3C  E1FD               	bnz	clear_0
   155   000B3E                     end_of_initialization:
   156                           	callstack 0
   157   000B3E                     __end_of__initialization:
   158                           	callstack 0
   159   000B3E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   160   000B40  6EF8               	movwf	tblptru,c
   161   000B42  0100               	movlb	0
   162   000B44  EF89  F004         	goto	_main	;jump to C main() function
   163                           
   164                           	psect	bssCOMRAM
   165   000001                     __pbssCOMRAM:
   166                           	callstack 0
   167   000001                     _funcs:
   168                           	callstack 0
   169   000001                     	ds	64
   170   000041                     _count:
   171                           	callstack 0
   172   000041                     	ds	1
   173                           
   174                           	psect	cstackCOMRAM
   175   000042                     __pcstackCOMRAM:
   176                           	callstack 0
   177   000042                     lcd_wr@val:
   178                           	callstack 0
   179   000042                     atraso_ms@valor:
   180                           	callstack 0
   181   000042                     __Exit@ec:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x0
   185   000042                     	ds	2
   186   000044                     atraso_ms@i:
   187                           	callstack 0
   188   000044                     exit@code:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x2
   192   000044                     	ds	2
   193   000046                     atraso_ms@j:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x4
   197   000046                     	ds	1
   198   000047                     lcd_cmd@val:
   199                           	callstack 0
   200   000047                     lcd_dat@val:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x5
   204   000047                     	ds	1
   205   000048                     lcd_str@str:
   206                           	callstack 0
   207   000048                     lcd_numb@str:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x6
   211   000048                     	ds	2
   212   00004A                     ??_lcd_str:
   213   00004A                     lcd_numb@num_placar:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0x8
   217   00004A                     	ds	2
   218   00004C                     lcd_str@i:
   219                           	callstack 0
   220                           
   221                           ; 1 bytes @ 0xA
   222   00004C                     	ds	1
   223   00004D                     main@casa:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0xB
   227   00004D                     	ds	2
   228                           
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 20 in file "newmain.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;  casa_           3    0        PTR unsigned char 
   239 ;;  casa            2   11[COMRAM] int 
   240 ;;  visitante       2    0        int 
   241 ;;  visitante_      2    0        PTR unsigned char 
   242 ;; Return value:  Size  Location     Type
   243 ;;                  2   93[None  ] int 
   244 ;; Registers used:
   245 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   246 ;; Tracked objects:
   247 ;;		On entry : 0/0
   248 ;;		On exit  : 0/0
   249 ;;		Unchanged: 0/0
   250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   251 ;;      Params:         0       0       0       0       0       0       0       0       0
   252 ;;      Locals:         2       0       0       0       0       0       0       0       0
   253 ;;      Temps:          0       0       0       0       0       0       0       0       0
   254 ;;      Totals:         2       0       0       0       0       0       0       0       0
   255 ;;Total ram usage:        2 bytes
   256 ;; Hardware stack levels required when called: 3
   257 ;; This function calls:
   258 ;;		_exit
   259 ;;		_lcd_cmd
   260 ;;		_lcd_init
   261 ;;		_lcd_numb
   262 ;;		_lcd_str
   263 ;; This function is called by:
   264 ;;		Startup code after reset
   265 ;; This function uses a non-reentrant model
   266 ;;
   267                           
   268                           	psect	text0
   269   000912                     __ptext0:
   270                           	callstack 0
   271   000912                     _main:
   272                           	callstack 28
   273   000912                     
   274                           ;newmain.c: 22:     TRISD = 0x00;
   275   000912  0E00               	movlw	0
   276   000914  6E95               	movwf	149,c	;volatile
   277                           
   278                           ;newmain.c: 23:     TRISB = 0x00;
   279   000916  0E00               	movlw	0
   280   000918  6E93               	movwf	147,c	;volatile
   281                           
   282                           ;newmain.c: 24:     TRISE = 0x00;
   283   00091A  0E00               	movlw	0
   284   00091C  6E96               	movwf	150,c	;volatile
   285   00091E                     
   286                           ;newmain.c: 26:     TRISBbits.TRISB1 = 1;
   287   00091E  8293               	bsf	147,1,c	;volatile
   288   000920                     
   289                           ;newmain.c: 27:     TRISBbits.TRISB2 = 1;
   290   000920  8493               	bsf	147,2,c	;volatile
   291                           
   292                           ;newmain.c: 32:     int casa = 0, visitante = 0;
   293   000922  0E00               	movlw	0
   294   000924  6E4E               	movwf	(main@casa+1)^0,c
   295   000926  0E00               	movlw	0
   296   000928  6E4D               	movwf	main@casa^0,c
   297   00092A                     
   298                           ;newmain.c: 35:     char *casa_, *visitante_;;newmain.c: 37:     lcd_init();
   299   00092A  ECE7  F004         	call	_lcd_init	;wreg free
   300   00092E                     
   301                           ;newmain.c: 38:     lcd_cmd(0x01);
   302   00092E  0E01               	movlw	1
   303   000930  EC76  F005         	call	_lcd_cmd
   304   000934                     l1069:
   305                           
   306                           ;newmain.c: 41:     {;newmain.c: 43:         if(PORTBbits.RB1 == 0)
   307   000934  B281               	btfsc	129,1,c	;volatile
   308   000936  EF9F  F004         	goto	u291
   309   00093A  EFA1  F004         	goto	u290
   310   00093E                     u291:
   311   00093E  EFD3  F004         	goto	l1091
   312   000942                     u290:
   313   000942                     
   314                           ;newmain.c: 44:         {;newmain.c: 45:             if(casa != 9)
   315   000942  0E09               	movlw	9
   316   000944  184D               	xorwf	main@casa^0,w,c
   317   000946  104E               	iorwf	(main@casa+1)^0,w,c
   318   000948  B4D8               	btfsc	status,2,c
   319   00094A  EFA9  F004         	goto	u301
   320   00094E  EFAB  F004         	goto	u300
   321   000952                     u301:
   322   000952  EFC4  F004         	goto	l1085
   323   000956                     u300:
   324   000956                     
   325                           ;newmain.c: 49:                 *visitante_ = visitante+48;
   326   000956  4A4D               	infsnz	main@casa^0,f,c
   327   000958  2A4E               	incf	(main@casa+1)^0,f,c
   328   00095A                     
   329                           ;newmain.c: 51:                 lcd_cmd(0x01);
   330   00095A  0E01               	movlw	1
   331   00095C  EC76  F005         	call	_lcd_cmd
   332   000960                     
   333                           ;newmain.c: 52:                 lcd_cmd(0x80);
   334   000960  0E80               	movlw	128
   335   000962  EC76  F005         	call	_lcd_cmd
   336   000966                     
   337                           ;newmain.c: 54:                 lcd_str("CASA: ");
   338   000966  0E1C               	movlw	low STR_10
   339   000968  6E48               	movwf	lcd_str@str^0,c
   340   00096A  0E08               	movlw	high STR_10
   341   00096C  6E49               	movwf	(lcd_str@str+1)^0,c
   342   00096E  EC15  F005         	call	_lcd_str	;wreg free
   343   000972                     
   344                           ;newmain.c: 55:                 lcd_cmd(0x86);
   345   000972  0E86               	movlw	134
   346   000974  EC76  F005         	call	_lcd_cmd
   347   000978                     
   348                           ;newmain.c: 56:                 lcd_numb(casa);
   349   000978  C04D  F048         	movff	main@casa,lcd_numb@str
   350   00097C  C04E  F049         	movff	main@casa+1,lcd_numb@str+1
   351   000980  EC1B  F004         	call	_lcd_numb	;wreg free
   352                           
   353                           ;newmain.c: 62:             }else
   354   000984  EFD3  F004         	goto	l1091
   355   000988                     l1085:
   356                           
   357                           ;newmain.c: 63:             {;newmain.c: 64:                 lcd_cmd(0x01);
   358   000988  0E01               	movlw	1
   359   00098A  EC76  F005         	call	_lcd_cmd
   360   00098E                     
   361                           ;newmain.c: 65:                 lcd_str("casa vencedor");
   362   00098E  0E01               	movlw	low STR_11
   363   000990  6E48               	movwf	lcd_str@str^0,c
   364   000992  0E08               	movlw	high STR_11
   365   000994  6E49               	movwf	(lcd_str@str+1)^0,c
   366   000996  EC15  F005         	call	_lcd_str	;wreg free
   367   00099A                     
   368                           ;newmain.c: 66:                 exit(0);
   369   00099A  0E00               	movlw	0
   370   00099C  6E45               	movwf	(exit@code+1)^0,c
   371   00099E  0E00               	movlw	0
   372   0009A0  6E44               	movwf	exit@code^0,c
   373   0009A2  ECA4  F005         	call	_exit	;wreg free
   374   0009A6                     l1091:
   375                           
   376                           ;newmain.c: 70:         if(PORTBbits.RB2 == 0)
   377   0009A6  B481               	btfsc	129,2,c	;volatile
   378   0009A8  EFD8  F004         	goto	u311
   379   0009AC  EFDA  F004         	goto	u310
   380   0009B0                     u311:
   381   0009B0  EF9A  F004         	goto	l1069
   382   0009B4                     u310:
   383   0009B4                     
   384                           ;newmain.c: 71:         {;newmain.c: 72:             lcd_str("apertei rb2 ");
   385   0009B4  0E0F               	movlw	low STR_12
   386   0009B6  6E48               	movwf	lcd_str@str^0,c
   387   0009B8  0E08               	movlw	high STR_12
   388   0009BA  6E49               	movwf	(lcd_str@str+1)^0,c
   389   0009BC  EC15  F005         	call	_lcd_str	;wreg free
   390   0009C0                     
   391                           ;newmain.c: 73:             lcd_cmd(0x01);
   392   0009C0  0E01               	movlw	1
   393   0009C2  EC76  F005         	call	_lcd_cmd
   394   0009C6  EF9A  F004         	goto	l1069
   395   0009CA  EF00  F000         	goto	start
   396   0009CE                     __end_of_main:
   397                           	callstack 0
   398                           
   399 ;; *************** function _lcd_str *****************
   400 ;; Defined at:
   401 ;;		line 78 in file "lcd.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  str             2    6[COMRAM] PTR const unsigned char 
   404 ;;		 -> STR_12(13), STR_11(14), STR_10(7), 
   405 ;; Auto vars:     Size  Location     Type
   406 ;;  i               1   10[COMRAM] unsigned char 
   407 ;; Return value:  Size  Location     Type
   408 ;;                  1    wreg      void 
   409 ;; Registers used:
   410 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   411 ;; Tracked objects:
   412 ;;		On entry : 0/0
   413 ;;		On exit  : 0/0
   414 ;;		Unchanged: 0/0
   415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   416 ;;      Params:         2       0       0       0       0       0       0       0       0
   417 ;;      Locals:         1       0       0       0       0       0       0       0       0
   418 ;;      Temps:          2       0       0       0       0       0       0       0       0
   419 ;;      Totals:         5       0       0       0       0       0       0       0       0
   420 ;;Total ram usage:        5 bytes
   421 ;; Hardware stack levels used: 1
   422 ;; Hardware stack levels required when called: 2
   423 ;; This function calls:
   424 ;;		_lcd_dat
   425 ;; This function is called by:
   426 ;;		_main
   427 ;; This function uses a non-reentrant model
   428 ;;
   429                           
   430                           	psect	text1
   431   000A2A                     __ptext1:
   432                           	callstack 0
   433   000A2A                     _lcd_str:
   434                           	callstack 28
   435   000A2A                     
   436                           ;lcd.c: 78: void lcd_str(const char* str);lcd.c: 79: {;lcd.c: 80:  unsigned char i=0;
   437   000A2A  0E00               	movlw	0
   438   000A2C  6E4C               	movwf	lcd_str@i^0,c
   439                           
   440                           ;lcd.c: 82:  while(str[i] != '\0' )
   441   000A2E  EF28  F005         	goto	l1015
   442   000A32                     l1011:
   443                           
   444                           ;lcd.c: 83:  {;lcd.c: 84:    lcd_dat(str[i]);
   445   000A32  504C               	movf	lcd_str@i^0,w,c
   446   000A34  2448               	addwf	lcd_str@str^0,w,c
   447   000A36  6E4A               	movwf	??_lcd_str^0,c
   448   000A38  0E00               	movlw	0
   449   000A3A  2049               	addwfc	(lcd_str@str+1)^0,w,c
   450   000A3C  6E4B               	movwf	(??_lcd_str+1)^0,c
   451   000A3E  C04A  FFF6         	movff	??_lcd_str,tblptrl
   452   000A42  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   453   000A46                     	if	0	;tblptru may be non-zero
   454   000A46                     	endif
   455   000A46                     	if	0	;tblptru may be non-zero
   456   000A46                     	endif
   457   000A46  0008               	tblrd		*
   458   000A48  50F5               	movf	tablat,w,c
   459   000A4A  EC61  F005         	call	_lcd_dat
   460   000A4E                     
   461                           ;lcd.c: 85:    i++;
   462   000A4E  2A4C               	incf	lcd_str@i^0,f,c
   463   000A50                     l1015:
   464                           
   465                           ;lcd.c: 82:  while(str[i] != '\0' )
   466   000A50  504C               	movf	lcd_str@i^0,w,c
   467   000A52  2448               	addwf	lcd_str@str^0,w,c
   468   000A54  6E4A               	movwf	??_lcd_str^0,c
   469   000A56  0E00               	movlw	0
   470   000A58  2049               	addwfc	(lcd_str@str+1)^0,w,c
   471   000A5A  6E4B               	movwf	(??_lcd_str+1)^0,c
   472   000A5C  C04A  FFF6         	movff	??_lcd_str,tblptrl
   473   000A60  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   474   000A64                     	if	0	;tblptru may be non-zero
   475   000A64                     	endif
   476   000A64                     	if	0	;tblptru may be non-zero
   477   000A64                     	endif
   478   000A64  0008               	tblrd		*
   479   000A66  50F5               	movf	tablat,w,c
   480   000A68  0900               	iorlw	0
   481   000A6A  A4D8               	btfss	status,2,c
   482   000A6C  EF3A  F005         	goto	u191
   483   000A70  EF3C  F005         	goto	u190
   484   000A74                     u191:
   485   000A74  EF19  F005         	goto	l1011
   486   000A78                     u190:
   487   000A78  0012               	return		;funcret
   488   000A7A                     __end_of_lcd_str:
   489                           	callstack 0
   490                           
   491 ;; *************** function _lcd_numb *****************
   492 ;; Defined at:
   493 ;;		line 89 in file "lcd.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  str             2    6[COMRAM] const int 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  num_placar      1    8[COMRAM] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   507 ;;      Params:         2       0       0       0       0       0       0       0       0
   508 ;;      Locals:         1       0       0       0       0       0       0       0       0
   509 ;;      Temps:          0       0       0       0       0       0       0       0       0
   510 ;;      Totals:         3       0       0       0       0       0       0       0       0
   511 ;;Total ram usage:        3 bytes
   512 ;; Hardware stack levels used: 1
   513 ;; Hardware stack levels required when called: 2
   514 ;; This function calls:
   515 ;;		_lcd_dat
   516 ;; This function is called by:
   517 ;;		_main
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text2
   522   000836                     __ptext2:
   523                           	callstack 0
   524   000836                     _lcd_numb:
   525                           	callstack 28
   526   000836                     
   527                           ;lcd.c: 91:     char num_placar;;lcd.c: 92:     if(0 == str){
   528   000836  5048               	movf	lcd_numb@str^0,w,c
   529   000838  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   530   00083A  A4D8               	btfss	status,2,c
   531   00083C  EF22  F004         	goto	u201
   532   000840  EF24  F004         	goto	u200
   533   000844                     u201:
   534   000844  EF26  F004         	goto	l1021
   535   000848                     u200:
   536   000848                     
   537                           ;lcd.c: 93:             num_placar = "0";
   538   000848  0E23               	movlw	low (low STR_1)
   539   00084A  6E4A               	movwf	lcd_numb@num_placar^0,c
   540   00084C                     l1021:
   541                           
   542                           ;lcd.c: 95:     if(1 == str){
   543   00084C  0448               	decf	lcd_numb@str^0,w,c
   544   00084E  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   545   000850  A4D8               	btfss	status,2,c
   546   000852  EF2D  F004         	goto	u211
   547   000856  EF2F  F004         	goto	u210
   548   00085A                     u211:
   549   00085A  EF31  F004         	goto	l1025
   550   00085E                     u210:
   551   00085E                     
   552                           ;lcd.c: 96:             num_placar = "1";
   553   00085E  0E25               	movlw	low (low STR_2)
   554   000860  6E4A               	movwf	lcd_numb@num_placar^0,c
   555   000862                     l1025:
   556                           
   557                           ;lcd.c: 98:     if(2 == str){
   558   000862  0E02               	movlw	2
   559   000864  1848               	xorwf	lcd_numb@str^0,w,c
   560   000866  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   561   000868  A4D8               	btfss	status,2,c
   562   00086A  EF39  F004         	goto	u221
   563   00086E  EF3B  F004         	goto	u220
   564   000872                     u221:
   565   000872  EF3D  F004         	goto	l1029
   566   000876                     u220:
   567   000876                     
   568                           ;lcd.c: 99:             num_placar = "2";
   569   000876  0E27               	movlw	low (low STR_3)
   570   000878  6E4A               	movwf	lcd_numb@num_placar^0,c
   571   00087A                     l1029:
   572                           
   573                           ;lcd.c: 101:     if(3 == str){
   574   00087A  0E03               	movlw	3
   575   00087C  1848               	xorwf	lcd_numb@str^0,w,c
   576   00087E  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   577   000880  A4D8               	btfss	status,2,c
   578   000882  EF45  F004         	goto	u231
   579   000886  EF47  F004         	goto	u230
   580   00088A                     u231:
   581   00088A  EF49  F004         	goto	l1033
   582   00088E                     u230:
   583   00088E                     
   584                           ;lcd.c: 102:             num_placar = "3";
   585   00088E  0E29               	movlw	low (low STR_4)
   586   000890  6E4A               	movwf	lcd_numb@num_placar^0,c
   587   000892                     l1033:
   588                           
   589                           ;lcd.c: 104:     if(4 == str){
   590   000892  0E04               	movlw	4
   591   000894  1848               	xorwf	lcd_numb@str^0,w,c
   592   000896  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   593   000898  A4D8               	btfss	status,2,c
   594   00089A  EF51  F004         	goto	u241
   595   00089E  EF53  F004         	goto	u240
   596   0008A2                     u241:
   597   0008A2  EF55  F004         	goto	l1037
   598   0008A6                     u240:
   599   0008A6                     
   600                           ;lcd.c: 105:             num_placar = "4";
   601   0008A6  0E2B               	movlw	low (low STR_5)
   602   0008A8  6E4A               	movwf	lcd_numb@num_placar^0,c
   603   0008AA                     l1037:
   604                           
   605                           ;lcd.c: 107:     if(5 == str){
   606   0008AA  0E05               	movlw	5
   607   0008AC  1848               	xorwf	lcd_numb@str^0,w,c
   608   0008AE  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   609   0008B0  A4D8               	btfss	status,2,c
   610   0008B2  EF5D  F004         	goto	u251
   611   0008B6  EF5F  F004         	goto	u250
   612   0008BA                     u251:
   613   0008BA  EF61  F004         	goto	l1041
   614   0008BE                     u250:
   615   0008BE                     
   616                           ;lcd.c: 108:             num_placar = "5";
   617   0008BE  0E2D               	movlw	low (low STR_6)
   618   0008C0  6E4A               	movwf	lcd_numb@num_placar^0,c
   619   0008C2                     l1041:
   620                           
   621                           ;lcd.c: 110:     if(6 == str){
   622   0008C2  0E06               	movlw	6
   623   0008C4  1848               	xorwf	lcd_numb@str^0,w,c
   624   0008C6  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   625   0008C8  A4D8               	btfss	status,2,c
   626   0008CA  EF69  F004         	goto	u261
   627   0008CE  EF6B  F004         	goto	u260
   628   0008D2                     u261:
   629   0008D2  EF6D  F004         	goto	l1045
   630   0008D6                     u260:
   631   0008D6                     
   632                           ;lcd.c: 111:             num_placar = "6";
   633   0008D6  0E2F               	movlw	low (low STR_7)
   634   0008D8  6E4A               	movwf	lcd_numb@num_placar^0,c
   635   0008DA                     l1045:
   636                           
   637                           ;lcd.c: 113:     if(7 == str){
   638   0008DA  0E07               	movlw	7
   639   0008DC  1848               	xorwf	lcd_numb@str^0,w,c
   640   0008DE  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   641   0008E0  A4D8               	btfss	status,2,c
   642   0008E2  EF75  F004         	goto	u271
   643   0008E6  EF77  F004         	goto	u270
   644   0008EA                     u271:
   645   0008EA  EF79  F004         	goto	l1049
   646   0008EE                     u270:
   647   0008EE                     
   648                           ;lcd.c: 114:             num_placar = "7";
   649   0008EE  0E31               	movlw	low (low STR_8)
   650   0008F0  6E4A               	movwf	lcd_numb@num_placar^0,c
   651   0008F2                     l1049:
   652                           
   653                           ;lcd.c: 116:     if(8 == str){
   654   0008F2  0E08               	movlw	8
   655   0008F4  1848               	xorwf	lcd_numb@str^0,w,c
   656   0008F6  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   657   0008F8  A4D8               	btfss	status,2,c
   658   0008FA  EF81  F004         	goto	u281
   659   0008FE  EF83  F004         	goto	u280
   660   000902                     u281:
   661   000902  EF85  F004         	goto	l1053
   662   000906                     u280:
   663   000906                     
   664                           ;lcd.c: 117:             num_placar = "8";
   665   000906  0E33               	movlw	low (low STR_9)
   666   000908  6E4A               	movwf	lcd_numb@num_placar^0,c
   667   00090A                     l1053:
   668                           
   669                           ;lcd.c: 119:     lcd_dat(num_placar);
   670   00090A  504A               	movf	lcd_numb@num_placar^0,w,c
   671   00090C  EC61  F005         	call	_lcd_dat
   672   000910  0012               	return		;funcret
   673   000912                     __end_of_lcd_numb:
   674                           	callstack 0
   675                           
   676 ;; *************** function _lcd_dat *****************
   677 ;; Defined at:
   678 ;;		line 48 in file "lcd.c"
   679 ;; Parameters:    Size  Location     Type
   680 ;;  val             1    wreg     unsigned char 
   681 ;; Auto vars:     Size  Location     Type
   682 ;;  val             1    5[COMRAM] unsigned char 
   683 ;; Return value:  Size  Location     Type
   684 ;;                  1    wreg      void 
   685 ;; Registers used:
   686 ;;		wreg, status,2, status,0, cstack
   687 ;; Tracked objects:
   688 ;;		On entry : 0/0
   689 ;;		On exit  : 0/0
   690 ;;		Unchanged: 0/0
   691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   692 ;;      Params:         0       0       0       0       0       0       0       0       0
   693 ;;      Locals:         1       0       0       0       0       0       0       0       0
   694 ;;      Temps:          0       0       0       0       0       0       0       0       0
   695 ;;      Totals:         1       0       0       0       0       0       0       0       0
   696 ;;Total ram usage:        1 bytes
   697 ;; Hardware stack levels used: 1
   698 ;; Hardware stack levels required when called: 1
   699 ;; This function calls:
   700 ;;		_atraso_ms
   701 ;;		_lcd_wr
   702 ;; This function is called by:
   703 ;;		_lcd_str
   704 ;;		_lcd_numb
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text3
   709   000AC2                     __ptext3:
   710                           	callstack 0
   711   000AC2                     _lcd_dat:
   712                           	callstack 28
   713                           
   714                           ;incstack = 0
   715                           ;lcd_dat@val stored from wreg
   716   000AC2  6E47               	movwf	lcd_dat@val^0,c
   717   000AC4                     
   718                           ;lcd.c: 48: void lcd_dat(unsigned char val);lcd.c: 49: {;lcd.c: 50:  PORTEbits.RE1=1;
   719   000AC4  8284               	bsf	132,1,c	;volatile
   720   000AC6                     
   721                           ;lcd.c: 51:         lcd_wr(val);
   722   000AC6  5047               	movf	lcd_dat@val^0,w,c
   723   000AC8  ECAD  F005         	call	_lcd_wr
   724   000ACC                     
   725                           ;lcd.c: 52:         PORTEbits.RE0=1;
   726   000ACC  8084               	bsf	132,0,c	;volatile
   727   000ACE                     
   728                           ;lcd.c: 53:         atraso_ms(3);
   729   000ACE  0E00               	movlw	0
   730   000AD0  6E43               	movwf	(atraso_ms@valor+1)^0,c
   731   000AD2  0E03               	movlw	3
   732   000AD4  6E42               	movwf	atraso_ms@valor^0,c
   733   000AD6  EC3D  F005         	call	_atraso_ms	;wreg free
   734   000ADA                     
   735                           ;lcd.c: 54:         PORTEbits.RE1=0;
   736   000ADA  9284               	bcf	132,1,c	;volatile
   737   000ADC                     
   738                           ;lcd.c: 55:         atraso_ms(3);
   739   000ADC  0E00               	movlw	0
   740   000ADE  6E43               	movwf	(atraso_ms@valor+1)^0,c
   741   000AE0  0E03               	movlw	3
   742   000AE2  6E42               	movwf	atraso_ms@valor^0,c
   743   000AE4  EC3D  F005         	call	_atraso_ms	;wreg free
   744   000AE8                     
   745                           ;lcd.c: 56:  PORTEbits.RE1=1;
   746   000AE8  8284               	bsf	132,1,c	;volatile
   747   000AEA  0012               	return		;funcret
   748   000AEC                     __end_of_lcd_dat:
   749                           	callstack 0
   750                           
   751 ;; *************** function _lcd_init *****************
   752 ;; Defined at:
   753 ;;		line 59 in file "lcd.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;                  1    wreg      void 
   760 ;; Registers used:
   761 ;;		wreg, status,2, status,0, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   767 ;;      Params:         0       0       0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels used: 1
   773 ;; Hardware stack levels required when called: 2
   774 ;; This function calls:
   775 ;;		_atraso_ms
   776 ;;		_lcd_cmd
   777 ;; This function is called by:
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text4
   783   0009CE                     __ptext4:
   784                           	callstack 0
   785   0009CE                     _lcd_init:
   786                           	callstack 28
   787   0009CE                     
   788                           ;lcd.c: 61:  PORTEbits.RE1=0;
   789   0009CE  9284               	bcf	132,1,c	;volatile
   790                           
   791                           ;lcd.c: 62:  PORTEbits.RE0=0;
   792   0009D0  9084               	bcf	132,0,c	;volatile
   793   0009D2                     
   794                           ;lcd.c: 63:  atraso_ms(20);
   795   0009D2  0E00               	movlw	0
   796   0009D4  6E43               	movwf	(atraso_ms@valor+1)^0,c
   797   0009D6  0E14               	movlw	20
   798   0009D8  6E42               	movwf	atraso_ms@valor^0,c
   799   0009DA  EC3D  F005         	call	_atraso_ms	;wreg free
   800   0009DE                     
   801                           ;lcd.c: 64:  PORTEbits.RE1=1;
   802   0009DE  8284               	bsf	132,1,c	;volatile
   803                           
   804                           ;lcd.c: 66:  lcd_cmd(0x38);
   805   0009E0  0E38               	movlw	56
   806   0009E2  EC76  F005         	call	_lcd_cmd
   807                           
   808                           ;lcd.c: 67:  atraso_ms(5);
   809   0009E6  0E00               	movlw	0
   810   0009E8  6E43               	movwf	(atraso_ms@valor+1)^0,c
   811   0009EA  0E05               	movlw	5
   812   0009EC  6E42               	movwf	atraso_ms@valor^0,c
   813   0009EE  EC3D  F005         	call	_atraso_ms	;wreg free
   814                           
   815                           ;lcd.c: 68:  lcd_cmd(0x38);
   816   0009F2  0E38               	movlw	56
   817   0009F4  EC76  F005         	call	_lcd_cmd
   818                           
   819                           ;lcd.c: 69:         atraso_ms(1);
   820   0009F8  0E00               	movlw	0
   821   0009FA  6E43               	movwf	(atraso_ms@valor+1)^0,c
   822   0009FC  0E01               	movlw	1
   823   0009FE  6E42               	movwf	atraso_ms@valor^0,c
   824   000A00  EC3D  F005         	call	_atraso_ms	;wreg free
   825                           
   826                           ;lcd.c: 70:  lcd_cmd(0x38);
   827   000A04  0E38               	movlw	56
   828   000A06  EC76  F005         	call	_lcd_cmd
   829                           
   830                           ;lcd.c: 71:  lcd_cmd(0x08);
   831   000A0A  0E08               	movlw	8
   832   000A0C  EC76  F005         	call	_lcd_cmd
   833                           
   834                           ;lcd.c: 72:  lcd_cmd(0x0F);
   835   000A10  0E0F               	movlw	15
   836   000A12  EC76  F005         	call	_lcd_cmd
   837                           
   838                           ;lcd.c: 73:  lcd_cmd(0x01);
   839   000A16  0E01               	movlw	1
   840   000A18  EC76  F005         	call	_lcd_cmd
   841                           
   842                           ;lcd.c: 74:  lcd_cmd(0x38);
   843   000A1C  0E38               	movlw	56
   844   000A1E  EC76  F005         	call	_lcd_cmd
   845                           
   846                           ;lcd.c: 75:         lcd_cmd(0x80);
   847   000A22  0E80               	movlw	128
   848   000A24  EC76  F005         	call	_lcd_cmd
   849   000A28  0012               	return		;funcret
   850   000A2A                     __end_of_lcd_init:
   851                           	callstack 0
   852                           
   853 ;; *************** function _lcd_cmd *****************
   854 ;; Defined at:
   855 ;;		line 37 in file "lcd.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;  val             1    wreg     unsigned char 
   858 ;; Auto vars:     Size  Location     Type
   859 ;;  val             1    5[COMRAM] unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0, cstack
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   869 ;;      Params:         0       0       0       0       0       0       0       0       0
   870 ;;      Locals:         1       0       0       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0       0       0
   872 ;;      Totals:         1       0       0       0       0       0       0       0       0
   873 ;;Total ram usage:        1 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; Hardware stack levels required when called: 1
   876 ;; This function calls:
   877 ;;		_atraso_ms
   878 ;;		_lcd_wr
   879 ;; This function is called by:
   880 ;;		_lcd_init
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text5
   886   000AEC                     __ptext5:
   887                           	callstack 0
   888   000AEC                     _lcd_cmd:
   889                           	callstack 28
   890                           
   891                           ;incstack = 0
   892                           ;lcd_cmd@val stored from wreg
   893   000AEC  6E47               	movwf	lcd_cmd@val^0,c
   894   000AEE                     
   895                           ;lcd.c: 37: void lcd_cmd(unsigned char val);lcd.c: 38: {;lcd.c: 39:  PORTEbits.RE1=1;
   896   000AEE  8284               	bsf	132,1,c	;volatile
   897   000AF0                     
   898                           ;lcd.c: 40:         lcd_wr(val);
   899   000AF0  5047               	movf	lcd_cmd@val^0,w,c
   900   000AF2  ECAD  F005         	call	_lcd_wr
   901   000AF6                     
   902                           ;lcd.c: 41:         PORTEbits.RE0=0;
   903   000AF6  9084               	bcf	132,0,c	;volatile
   904   000AF8                     
   905                           ;lcd.c: 42:         atraso_ms(3);
   906   000AF8  0E00               	movlw	0
   907   000AFA  6E43               	movwf	(atraso_ms@valor+1)^0,c
   908   000AFC  0E03               	movlw	3
   909   000AFE  6E42               	movwf	atraso_ms@valor^0,c
   910   000B00  EC3D  F005         	call	_atraso_ms	;wreg free
   911   000B04                     
   912                           ;lcd.c: 43:         PORTEbits.RE1=0;
   913   000B04  9284               	bcf	132,1,c	;volatile
   914   000B06                     
   915                           ;lcd.c: 44:         atraso_ms(3);
   916   000B06  0E00               	movlw	0
   917   000B08  6E43               	movwf	(atraso_ms@valor+1)^0,c
   918   000B0A  0E03               	movlw	3
   919   000B0C  6E42               	movwf	atraso_ms@valor^0,c
   920   000B0E  EC3D  F005         	call	_atraso_ms	;wreg free
   921   000B12                     
   922                           ;lcd.c: 45:  PORTEbits.RE1=1;
   923   000B12  8284               	bsf	132,1,c	;volatile
   924   000B14  0012               	return		;funcret
   925   000B16                     __end_of_lcd_cmd:
   926                           	callstack 0
   927                           
   928 ;; *************** function _lcd_wr *****************
   929 ;; Defined at:
   930 ;;		line 32 in file "lcd.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  val             1    wreg     unsigned char 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  val             1    0[COMRAM] unsigned char 
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   944 ;;      Params:         0       0       0       0       0       0       0       0       0
   945 ;;      Locals:         1       0       0       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0       0       0
   947 ;;      Totals:         1       0       0       0       0       0       0       0       0
   948 ;;Total ram usage:        1 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; This function calls:
   951 ;;		Nothing
   952 ;; This function is called by:
   953 ;;		_lcd_cmd
   954 ;;		_lcd_dat
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text6
   959   000B5A                     __ptext6:
   960                           	callstack 0
   961   000B5A                     _lcd_wr:
   962                           	callstack 28
   963                           
   964                           ;incstack = 0
   965                           ;lcd_wr@val stored from wreg
   966   000B5A  6E42               	movwf	lcd_wr@val^0,c
   967   000B5C                     
   968                           ;lcd.c: 32: void lcd_wr(unsigned char val);lcd.c: 33: {;lcd.c: 34:   PORTD=val;
   969   000B5C  C042  FF83         	movff	lcd_wr@val,3971	;volatile
   970   000B60  0012               	return		;funcret
   971   000B62                     __end_of_lcd_wr:
   972                           	callstack 0
   973                           
   974 ;; *************** function _atraso_ms *****************
   975 ;; Defined at:
   976 ;;		line 26 in file "atraso.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  valor           2    0[COMRAM] unsigned int 
   979 ;; Auto vars:     Size  Location     Type
   980 ;;  i               2    2[COMRAM] unsigned int 
   981 ;;  j               1    4[COMRAM] unsigned char 
   982 ;; Return value:  Size  Location     Type
   983 ;;                  1    wreg      void 
   984 ;; Registers used:
   985 ;;		wreg, status,2, status,0
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   991 ;;      Params:         2       0       0       0       0       0       0       0       0
   992 ;;      Locals:         3       0       0       0       0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0
   994 ;;      Totals:         5       0       0       0       0       0       0       0       0
   995 ;;Total ram usage:        5 bytes
   996 ;; Hardware stack levels used: 1
   997 ;; This function calls:
   998 ;;		Nothing
   999 ;; This function is called by:
  1000 ;;		_lcd_cmd
  1001 ;;		_lcd_dat
  1002 ;;		_lcd_init
  1003 ;; This function uses a non-reentrant model
  1004 ;;
  1005                           
  1006                           	psect	text7
  1007   000A7A                     __ptext7:
  1008                           	callstack 0
  1009   000A7A                     _atraso_ms:
  1010                           	callstack 28
  1011   000A7A                     
  1012                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1013   000A7A  0E00               	movlw	0
  1014   000A7C  6E45               	movwf	(atraso_ms@i+1)^0,c
  1015   000A7E  0E00               	movlw	0
  1016   000A80  6E44               	movwf	atraso_ms@i^0,c
  1017   000A82  EF55  F005         	goto	l973
  1018   000A86                     l961:
  1019                           
  1020                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1021   000A86  0E00               	movlw	0
  1022   000A88  6E46               	movwf	atraso_ms@j^0,c
  1023   000A8A                     l5:
  1024   000A8A  F000               	nop		;# 
  1025   000A8C  F000               	nop		;# 
  1026   000A8E  F000               	nop		;# 
  1027   000A90  F000               	nop		;# 
  1028   000A92  F000               	nop		;# 
  1029   000A94                     
  1030                           ;atraso.c: 41:    }
  1031   000A94  2A46               	incf	atraso_ms@j^0,f,c
  1032   000A96  0EC7               	movlw	199
  1033   000A98  6446               	cpfsgt	atraso_ms@j^0,c
  1034   000A9A  EF51  F005         	goto	u171
  1035   000A9E  EF53  F005         	goto	u170
  1036   000AA2                     u171:
  1037   000AA2  EF45  F005         	goto	l5
  1038   000AA6                     u170:
  1039   000AA6                     
  1040                           ;atraso.c: 42:  }
  1041   000AA6  4A44               	infsnz	atraso_ms@i^0,f,c
  1042   000AA8  2A45               	incf	(atraso_ms@i+1)^0,f,c
  1043   000AAA                     l973:
  1044   000AAA  5042               	movf	atraso_ms@valor^0,w,c
  1045   000AAC  5C44               	subwf	atraso_ms@i^0,w,c
  1046   000AAE  5043               	movf	(atraso_ms@valor+1)^0,w,c
  1047   000AB0  5845               	subwfb	(atraso_ms@i+1)^0,w,c
  1048   000AB2  A0D8               	btfss	status,0,c
  1049   000AB4  EF5E  F005         	goto	u181
  1050   000AB8  EF60  F005         	goto	u180
  1051   000ABC                     u181:
  1052   000ABC  EF43  F005         	goto	l961
  1053   000AC0                     u180:
  1054   000AC0  0012               	return		;funcret
  1055   000AC2                     __end_of_atraso_ms:
  1056                           	callstack 0
  1057                           
  1058 ;; *************** function _exit *****************
  1059 ;; Defined at:
  1060 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\exit.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;  code            2    2[COMRAM] int 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, status,2, status,0, cstack
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1074 ;;      Params:         2       0       0       0       0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1077 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1078 ;;Total ram usage:        2 bytes
  1079 ;; Hardware stack levels used: 1
  1080 ;; Hardware stack levels required when called: 1
  1081 ;; This function calls:
  1082 ;;		__Exit
  1083 ;;		___funcs_on_exit
  1084 ;; This function is called by:
  1085 ;;		_main
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text8
  1090   000B48                     __ptext8:
  1091                           	callstack 0
  1092   000B48                     _exit:
  1093                           	callstack 29
  1094   000B48  EC8B  F005         	call	___funcs_on_exit	;wreg free
  1095   000B4C  C044  F042         	movff	exit@code,__Exit@ec
  1096   000B50  C045  F043         	movff	exit@code+1,__Exit@ec+1
  1097   000B54  ECB1  F005         	call	__Exit	;wreg free
  1098   000B58  0012               	return		;funcret
  1099   000B5A                     __end_of_exit:
  1100                           	callstack 0
  1101                           
  1102 ;; *************** function ___funcs_on_exit *****************
  1103 ;; Defined at:
  1104 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atexit.c"
  1105 ;; Parameters:    Size  Location     Type
  1106 ;;		None
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  func            2    0        PTR FTN()void 
  1109 ;; Return value:  Size  Location     Type
  1110 ;;                  1    wreg      void 
  1111 ;; Registers used:
  1112 ;;		wreg, status,2, status,0
  1113 ;; Tracked objects:
  1114 ;;		On entry : 0/0
  1115 ;;		On exit  : 0/0
  1116 ;;		Unchanged: 0/0
  1117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1118 ;;      Params:         0       0       0       0       0       0       0       0       0
  1119 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1121 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1122 ;;Total ram usage:        0 bytes
  1123 ;; Hardware stack levels used: 1
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_exit
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text9
  1132   000B16                     __ptext9:
  1133                           	callstack 0
  1134   000B16                     ___funcs_on_exit:
  1135                           	callstack 29
  1136   000B16  EF8E  F005         	goto	l853
  1137   000B1A                     l851:
  1138   000B1A  0641               	decf	_count^0,f,c
  1139   000B1C                     l853:
  1140   000B1C  5041               	movf	_count^0,w,c
  1141   000B1E  0A80               	xorlw	128
  1142   000B20  0F7F               	addlw	-129
  1143   000B22  B0D8               	btfsc	status,0,c
  1144   000B24  EF96  F005         	goto	u31
  1145   000B28  EF98  F005         	goto	u30
  1146   000B2C                     u31:
  1147   000B2C  EF8D  F005         	goto	l851
  1148   000B30                     u30:
  1149   000B30  0012               	return		;funcret
  1150   000B32                     __end_of___funcs_on_exit:
  1151                           	callstack 0
  1152                           
  1153 ;; *************** function __Exit *****************
  1154 ;; Defined at:
  1155 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\_Exit.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;  ec              2    0[COMRAM] int 
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		None
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1169 ;;      Params:         2       0       0       0       0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1172 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1173 ;;Total ram usage:        2 bytes
  1174 ;; Hardware stack levels used: 1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_exit
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text10
  1183   000B62                     __ptext10:
  1184                           	callstack 0
  1185   000B62                     __Exit:
  1186                           	callstack 29
  1187   000B62                     l785:
  1188   000B62  EFB1  F005         	goto	l785
  1189   000B66  0012               	return		;funcret
  1190   000B68                     __end_of__Exit:
  1191                           	callstack 0
  1192                           
  1193                           	psect	rparam
  1194   000000                     
  1195                           	psect	idloc
  1196                           
  1197                           ;Config register IDLOC0 @ 0x200000
  1198                           ;	unspecified, using default values
  1199   200000                     	org	2097152
  1200   200000  FF                 	db	255
  1201                           
  1202                           ;Config register IDLOC1 @ 0x200001
  1203                           ;	unspecified, using default values
  1204   200001                     	org	2097153
  1205   200001  FF                 	db	255
  1206                           
  1207                           ;Config register IDLOC2 @ 0x200002
  1208                           ;	unspecified, using default values
  1209   200002                     	org	2097154
  1210   200002  FF                 	db	255
  1211                           
  1212                           ;Config register IDLOC3 @ 0x200003
  1213                           ;	unspecified, using default values
  1214   200003                     	org	2097155
  1215   200003  FF                 	db	255
  1216                           
  1217                           ;Config register IDLOC4 @ 0x200004
  1218                           ;	unspecified, using default values
  1219   200004                     	org	2097156
  1220   200004  FF                 	db	255
  1221                           
  1222                           ;Config register IDLOC5 @ 0x200005
  1223                           ;	unspecified, using default values
  1224   200005                     	org	2097157
  1225   200005  FF                 	db	255
  1226                           
  1227                           ;Config register IDLOC6 @ 0x200006
  1228                           ;	unspecified, using default values
  1229   200006                     	org	2097158
  1230   200006  FF                 	db	255
  1231                           
  1232                           ;Config register IDLOC7 @ 0x200007
  1233                           ;	unspecified, using default values
  1234   200007                     	org	2097159
  1235   200007  FF                 	db	255
  1236                           
  1237                           	psect	config
  1238                           
  1239                           ;Config register CONFIG1L @ 0x300000
  1240                           ;	PLL Prescaler Selection bits
  1241                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1242                           ;	System Clock Postscaler Selection bits
  1243                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1244                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1245                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1246   300000                     	org	3145728
  1247   300000  29                 	db	41
  1248                           
  1249                           ;Config register CONFIG1H @ 0x300001
  1250                           ;	Oscillator Selection bits
  1251                           ;	FOSC = HS, HS oscillator (HS)
  1252                           ;	Fail-Safe Clock Monitor Enable bit
  1253                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1254                           ;	Internal/External Oscillator Switchover bit
  1255                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1256   300001                     	org	3145729
  1257   300001  0C                 	db	12
  1258                           
  1259                           ;Config register CONFIG2L @ 0x300002
  1260                           ;	Power-up Timer Enable bit
  1261                           ;	PWRT = ON, PWRT enabled
  1262                           ;	Brown-out Reset Enable bits
  1263                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1264                           ;	Brown-out Reset Voltage bits
  1265                           ;	BORV = 3, Minimum setting 2.05V
  1266                           ;	USB Voltage Regulator Enable bit
  1267                           ;	VREGEN = OFF, USB voltage regulator disabled
  1268   300002                     	org	3145730
  1269   300002  18                 	db	24
  1270                           
  1271                           ;Config register CONFIG2H @ 0x300003
  1272                           ;	Watchdog Timer Enable bit
  1273                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1274                           ;	Watchdog Timer Postscale Select bits
  1275                           ;	WDTPS = 32768, 1:32768
  1276   300003                     	org	3145731
  1277   300003  1E                 	db	30
  1278                           
  1279                           ; Padding undefined space
  1280   300004                     	org	3145732
  1281   300004  FF                 	db	255
  1282                           
  1283                           ;Config register CONFIG3H @ 0x300005
  1284                           ;	CCP2 MUX bit
  1285                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1286                           ;	PORTB A/D Enable bit
  1287                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1288                           ;	Low-Power Timer 1 Oscillator Enable bit
  1289                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1290                           ;	MCLR Pin Enable bit
  1291                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1292   300005                     	org	3145733
  1293   300005  81                 	db	129
  1294                           
  1295                           ;Config register CONFIG4L @ 0x300006
  1296                           ;	Stack Full/Underflow Reset Enable bit
  1297                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1298                           ;	Single-Supply ICSP Enable bit
  1299                           ;	LVP = OFF, Single-Supply ICSP disabled
  1300                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1301                           ;	ICPRT = OFF, ICPORT disabled
  1302                           ;	Extended Instruction Set Enable bit
  1303                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1304                           ;	Background Debugger Enable bit
  1305                           ;	DEBUG = 0x1, unprogrammed default
  1306   300006                     	org	3145734
  1307   300006  80                 	db	128
  1308                           
  1309                           ; Padding undefined space
  1310   300007                     	org	3145735
  1311   300007  FF                 	db	255
  1312                           
  1313                           ;Config register CONFIG5L @ 0x300008
  1314                           ;	Code Protection bit
  1315                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1316                           ;	Code Protection bit
  1317                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1318                           ;	Code Protection bit
  1319                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1320                           ;	Code Protection bit
  1321                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1322   300008                     	org	3145736
  1323   300008  0F                 	db	15
  1324                           
  1325                           ;Config register CONFIG5H @ 0x300009
  1326                           ;	Boot Block Code Protection bit
  1327                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1328                           ;	Data EEPROM Code Protection bit
  1329                           ;	CPD = OFF, Data EEPROM is not code-protected
  1330   300009                     	org	3145737
  1331   300009  C0                 	db	192
  1332                           
  1333                           ;Config register CONFIG6L @ 0x30000A
  1334                           ;	Write Protection bit
  1335                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1336                           ;	Write Protection bit
  1337                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1338                           ;	Write Protection bit
  1339                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1340                           ;	Write Protection bit
  1341                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1342   30000A                     	org	3145738
  1343   30000A  0F                 	db	15
  1344                           
  1345                           ;Config register CONFIG6H @ 0x30000B
  1346                           ;	Configuration Register Write Protection bit
  1347                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1348                           ;	Boot Block Write Protection bit
  1349                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1350                           ;	Data EEPROM Write Protection bit
  1351                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1352   30000B                     	org	3145739
  1353   30000B  E0                 	db	224
  1354                           
  1355                           ;Config register CONFIG7L @ 0x30000C
  1356                           ;	Table Read Protection bit
  1357                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1358                           ;	Table Read Protection bit
  1359                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1360                           ;	Table Read Protection bit
  1361                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1362                           ;	Table Read Protection bit
  1363                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1364   30000C                     	org	3145740
  1365   30000C  0F                 	db	15
  1366                           
  1367                           ;Config register CONFIG7H @ 0x30000D
  1368                           ;	Boot Block Table Read Protection bit
  1369                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1370   30000D                     	org	3145741
  1371   30000D  40                 	db	64
  1372                           tosu	equ	0xFFF
  1373                           tosh	equ	0xFFE
  1374                           tosl	equ	0xFFD
  1375                           stkptr	equ	0xFFC
  1376                           pclatu	equ	0xFFB
  1377                           pclath	equ	0xFFA
  1378                           pcl	equ	0xFF9
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           prodh	equ	0xFF4
  1384                           prodl	equ	0xFF3
  1385                           indf0	equ	0xFEF
  1386                           postinc0	equ	0xFEE
  1387                           postdec0	equ	0xFED
  1388                           preinc0	equ	0xFEC
  1389                           plusw0	equ	0xFEB
  1390                           fsr0h	equ	0xFEA
  1391                           fsr0l	equ	0xFE9
  1392                           wreg	equ	0xFE8
  1393                           indf1	equ	0xFE7
  1394                           postinc1	equ	0xFE6
  1395                           postdec1	equ	0xFE5
  1396                           preinc1	equ	0xFE4
  1397                           plusw1	equ	0xFE3
  1398                           fsr1h	equ	0xFE2
  1399                           fsr1l	equ	0xFE1
  1400                           bsr	equ	0xFE0
  1401                           indf2	equ	0xFDF
  1402                           postinc2	equ	0xFDE
  1403                           postdec2	equ	0xFDD
  1404                           preinc2	equ	0xFDC
  1405                           plusw2	equ	0xFDB
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8

Data Sizes:
    Strings     52
    Constant    0
    Data        0
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      78
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    funcs	PTR FTN()void [32] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_12(CODE[13]), STR_11(CODE[14]), STR_10(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _exit->__Exit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    4112
                                             11 COMRAM     2     2      0
                               _exit
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2     979
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             3     1      2     966
                                              6 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1285
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     624
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _exit                                                 2     0      2     174
                                              2 COMRAM     2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (2) ___funcs_on_exit                                      2     2      0       0
 ---------------------------------------------------------------------------------
 (2) __Exit                                                2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _exit
     __Exit
     ___funcs_on_exit
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D      4E       1       82.1%
BITBIGSFRll         21      0       0      25        0.0%
BITBIGSFRhll         E      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E       3        0.0%
DATA                 0      0      4E       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 16:35:51 2022

                      l5 0A8A                        l8 0AC0                       l42 0B60  
                     l51 0A28                       l45 0B14                       l48 0AEA  
                     l57 0A78                       l69 0910                       u30 0B30  
                     u31 0B2C                      l851 0B1A                      l819 0B5C  
                    l853 0B1C                      l782 0B58                      l785 0B62  
                    l849 0B16                      l961 0A86                      l971 0AA6  
                    l797 0B30                      l973 0AAA                      l981 0AF8  
                    l967 0A94                      l959 0A7A                      l983 0B04  
                    l975 0AEE                      l991 0AC6                      l969 0A96  
                    l985 0B06                      l977 0AF0                      l993 0ACC  
                    l987 0B12                      l979 0AF6                      l995 0ACE  
                    l997 0ADA                      l989 0AC4                      l999 0ADC  
                    u200 0848                      u201 0844                      u210 085E  
                    u211 085A                      u220 0876                      u300 0956  
                    u221 0872                      u301 0952                      u230 088E  
                    u310 09B4                      u231 088A                      u311 09B0  
                    u240 08A6                      u241 08A2                      u170 0AA6  
                    u250 08BE                      u171 0AA2                      u251 08BA  
                    u180 0AC0                      u260 08D6                      u181 0ABC  
                    u261 08D2                      u270 08EE                      u190 0A78  
                    u271 08EA                      u191 0A74                      u280 0906  
                    u281 0902                      u290 0942                      u291 093E  
                    wreg 000FE8                     l1001 0AE8                     l1003 09CE  
                   l1011 0A32                     l1005 09D2                     l1021 084C  
                   l1013 0A4E                     l1007 09DE                     l1031 088E  
                   l1023 085E                     l1015 0A50                     l1041 08C2  
                   l1033 0892                     l1025 0862                     l1017 0836  
                   l1009 0A2A                     l1051 0906                     l1043 08D6  
                   l1035 08A6                     l1027 0876                     l1019 0848  
                   l1053 090A                     l1045 08DA                     l1037 08AA  
                   l1029 087A                     l1061 091E                     l1055 0B48  
                   l1047 08EE                     l1039 08BE                     l1071 0942  
                   l1063 0920                     l1057 0B4C                     l1049 08F2  
                   l1081 0972                     l1073 0956                     l1065 092A  
                   l1083 0978                     l1075 095A                     l1091 09A6  
                   l1067 092E                     l1059 0912                     l1093 09B4  
                   l1077 0960                     l1085 0988                     l1069 0934  
                   l1095 09C0                     l1087 098E                     l1079 0966  
                   l1089 099A                     STR_1 0823                     STR_2 0825  
                   STR_3 0827                     STR_4 0829              lcd_numb@str 0048  
                   STR_5 082B                     STR_6 082D                     STR_7 082F  
                   STR_8 0831                     STR_9 0833                     _main 0912  
                   _exit 0B48                     start 0000             ___param_bank 000000  
                  ?_main 0042                    ?_exit 0044                    STR_10 081C  
                  STR_11 0801                    STR_12 080F                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISD 000F95                    _TRISE 000F96  
                  __Exit 0B62          __end_of_lcd_dat 0AEC          __end_of_lcd_cmd 0B16  
        __end_of_lcd_str 0A7A                    _count 0041                    _funcs 0001  
                  tablat 000FF5                    status 000FD8          __initialization 0B32  
           __end_of_main 09CE             __end_of_exit 0B5A                   ??_main 004D  
                 ??_exit 0046            __activetblptr 000002                   ?__Exit 0042  
       __end_of_lcd_init 0A2A         __end_of_lcd_numb 0912                   _lcd_wr 0B5A  
                 clear_0 0B38                   isa$std 000001                ??_lcd_dat 0047  
              ??_lcd_cmd 0047                ??_lcd_str 004A             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0060  __end_of__initialization 0B3E            ___rparam_used 000001  
         __pcstackCOMRAM 0042            __end_of__Exit 0B68        ??___funcs_on_exit 0042  
                ??__Exit 0044                  ?_lcd_wr 0042                ?_lcd_init 0042  
              ?_lcd_numb 0048                  __Hparam 0000                  __Lparam 0000  
      __end_of_atraso_ms 0AC2             __psmallconst 0800                  __pcinit 0B32  
                __ramtop 0800                  __ptext0 0912                  __ptext1 0A2A  
                __ptext2 0836                  __ptext3 0AC2                  __ptext4 09CE  
                __ptext5 0AEC                  __ptext6 0B5A                  __ptext7 0A7A  
                __ptext8 0B48                  __ptext9 0B16                  _lcd_dat 0AC2  
                _lcd_cmd 0AEC                  _lcd_str 0A2A               ??_lcd_init 0048  
             ??_lcd_numb 004A     end_of_initialization 0B3E            __Lmediumconst 0000  
                postinc0 000FEE                _PORTBbits 000F81                _PORTEbits 000F84  
              _TRISBbits 000F93               lcd_dat@val 0047               lcd_cmd@val 0047  
             lcd_str@str 0048          ___funcs_on_exit 0B16               atraso_ms@i 0044  
             atraso_ms@j 0046           __end_of_lcd_wr 0B62      start_initialization 0B32  
     lcd_numb@num_placar 004A                 ??_lcd_wr 0042              __pbssCOMRAM 0001  
__end_of___funcs_on_exit 0B32                 ?_lcd_dat 0042                 ?_lcd_cmd 0042  
               ?_lcd_str 0048                _atraso_ms 0A7A              __smallconst 0800  
         atraso_ms@valor 0042               ?_atraso_ms 0042                lcd_wr@val 0042  
       ?___funcs_on_exit 0042                 __Exit@ec 0042                 __Hrparam 0000  
               __Lrparam 0000                 __ptext10 0B62                 _lcd_init 09CE  
               _lcd_numb 0836                 isa$xinst 000000                 main@casa 004D  
               lcd_str@i 004C              ??_atraso_ms 0044                 exit@code 0044  
