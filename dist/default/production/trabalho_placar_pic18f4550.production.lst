

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 17:06:37 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25   000000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F4550 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61   000000                     _TRISBbits	set	3987
    62   000000                     _PORTBbits	set	3969
    63   000000                     _PORTD	set	3971
    64   000000                     _TRISB	set	3987
    65   000000                     _TRISD	set	3989
    66   000000                     _PORTEbits	set	3972
    67   000000                     _TRISE	set	3990
    68                           
    69                           	psect	smallconst
    70   000800                     __psmallconst:
    71                           	callstack 0
    72   000800  00                 	db	0
    73   000801                     STR_5:
    74   000801  76                 	db	118	;'v'
    75   000802  69                 	db	105	;'i'
    76   000803  73                 	db	115	;'s'
    77   000804  69                 	db	105	;'i'
    78   000805  74                 	db	116	;'t'
    79   000806  61                 	db	97	;'a'
    80   000807  6E                 	db	110	;'n'
    81   000808  74                 	db	116	;'t'
    82   000809  65                 	db	101	;'e'
    83   00080A  20                 	db	32
    84   00080B  76                 	db	118	;'v'
    85   00080C  65                 	db	101	;'e'
    86   00080D  6E                 	db	110	;'n'
    87   00080E  63                 	db	99	;'c'
    88   00080F  65                 	db	101	;'e'
    89   000810  64                 	db	100	;'d'
    90   000811  6F                 	db	111	;'o'
    91   000812  72                 	db	114	;'r'
    92   000813  00                 	db	0
    93   000814                     STR_4:
    94   000814  63                 	db	99	;'c'
    95   000815  61                 	db	97	;'a'
    96   000816  73                 	db	115	;'s'
    97   000817  61                 	db	97	;'a'
    98   000818  20                 	db	32
    99   000819  76                 	db	118	;'v'
   100   00081A  65                 	db	101	;'e'
   101   00081B  6E                 	db	110	;'n'
   102   00081C  63                 	db	99	;'c'
   103   00081D  65                 	db	101	;'e'
   104   00081E  64                 	db	100	;'d'
   105   00081F  6F                 	db	111	;'o'
   106   000820  72                 	db	114	;'r'
   107   000821  00                 	db	0
   108   000822                     STR_3:
   109   000822  56                 	db	86	;'V'
   110   000823  49                 	db	73	;'I'
   111   000824  53                 	db	83	;'S'
   112   000825  49                 	db	73	;'I'
   113   000826  54                 	db	84	;'T'
   114   000827  41                 	db	65	;'A'
   115   000828  4E                 	db	78	;'N'
   116   000829  54                 	db	84	;'T'
   117   00082A  45                 	db	69	;'E'
   118   00082B  3A                 	db	58	;':'
   119   00082C  20                 	db	32
   120   00082D  00                 	db	0
   121   00082E                     STR_2:
   122   00082E  43                 	db	67	;'C'
   123   00082F  41                 	db	65	;'A'
   124   000830  53                 	db	83	;'S'
   125   000831  41                 	db	65	;'A'
   126   000832  3A                 	db	58	;':'
   127   000833  20                 	db	32
   128   000834  00                 	db	0
   129   000835                     STR_1:
   130   000835  30                 	db	48	;'0'
   131   000836  00                 	db	0
   132   000837  00                 	db	0	; dummy byte at the end
   133   000000                     
   134                           ; #config settings
   135                           
   136                           	psect	cinit
   137   000CDC                     __pcinit:
   138                           	callstack 0
   139   000CDC                     start_initialization:
   140                           	callstack 0
   141   000CDC                     __initialization:
   142                           	callstack 0
   143                           
   144                           ; Clear objects allocated to COMRAM (65 bytes)
   145   000CDC  EE00  F001         	lfsr	0,__pbssCOMRAM
   146   000CE0  0E41               	movlw	65
   147   000CE2                     clear_0:
   148   000CE2  6AEE               	clrf	postinc0,c
   149   000CE4  06E8               	decf	wreg,f,c
   150   000CE6  E1FD               	bnz	clear_0
   151   000CE8                     end_of_initialization:
   152                           	callstack 0
   153   000CE8                     __end_of__initialization:
   154                           	callstack 0
   155   000CE8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   156   000CEA  6EF8               	movwf	tblptru,c
   157   000CEC  0100               	movlb	0
   158   000CEE  EF1C  F004         	goto	_main	;jump to C main() function
   159                           
   160                           	psect	bssCOMRAM
   161   000001                     __pbssCOMRAM:
   162                           	callstack 0
   163   000001                     _funcs:
   164                           	callstack 0
   165   000001                     	ds	64
   166   000041                     _count:
   167                           	callstack 0
   168   000041                     	ds	1
   169                           
   170                           	psect	cstackCOMRAM
   171   000042                     __pcstackCOMRAM:
   172                           	callstack 0
   173   000042                     ?_name:
   174                           	callstack 0
   175   000042                     lcd_wr@val:
   176                           	callstack 0
   177   000042                     atraso_ms@valor:
   178                           	callstack 0
   179   000042                     name@str:
   180                           	callstack 0
   181   000042                     __Exit@ec:
   182                           	callstack 0
   183                           
   184                           ; 2 bytes @ 0x0
   185   000042                     	ds	2
   186   000044                     ??_name:
   187   000044                     atraso_ms@i:
   188                           	callstack 0
   189   000044                     exit@code:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0x2
   193   000044                     	ds	2
   194   000046                     atraso_ms@j:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0x4
   198   000046                     	ds	1
   199   000047                     lcd_cmd@val:
   200                           	callstack 0
   201   000047                     lcd_dat@val:
   202                           	callstack 0
   203                           
   204                           ; 1 bytes @ 0x5
   205   000047                     	ds	1
   206   000048                     lcd_str@str:
   207                           	callstack 0
   208   000048                     lcd_numb@str:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x6
   212   000048                     	ds	2
   213   00004A                     ??_lcd_str:
   214   00004A                     lcd_numb@num_placar:
   215                           	callstack 0
   216                           
   217                           ; 1 bytes @ 0x8
   218   00004A                     	ds	2
   219   00004C                     lcd_str@i:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0xA
   223   00004C                     	ds	1
   224   00004D                     main@casa:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0xB
   228   00004D                     	ds	2
   229   00004F                     main@visitante:
   230                           	callstack 0
   231                           
   232                           ; 2 bytes @ 0xD
   233   00004F                     	ds	2
   234                           
   235 ;;
   236 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   237 ;;
   238 ;; *************** function _main *****************
   239 ;; Defined at:
   240 ;;		line 20 in file "newmain.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;		None
   243 ;; Auto vars:     Size  Location     Type
   244 ;;  visitante       2   13[COMRAM] int 
   245 ;;  casa            2   11[COMRAM] int 
   246 ;; Return value:  Size  Location     Type
   247 ;;                  2  111[None  ] int 
   248 ;; Registers used:
   249 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   250 ;; Tracked objects:
   251 ;;		On entry : 0/0
   252 ;;		On exit  : 0/0
   253 ;;		Unchanged: 0/0
   254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   255 ;;      Params:         0       0       0       0       0       0       0       0       0
   256 ;;      Locals:         4       0       0       0       0       0       0       0       0
   257 ;;      Temps:          0       0       0       0       0       0       0       0       0
   258 ;;      Totals:         4       0       0       0       0       0       0       0       0
   259 ;;Total ram usage:        4 bytes
   260 ;; Hardware stack levels required when called: 3
   261 ;; This function calls:
   262 ;;		_exit
   263 ;;		_lcd_cmd
   264 ;;		_lcd_init
   265 ;;		_lcd_numb
   266 ;;		_lcd_str
   267 ;;		_name
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text0
   274   000838                     __ptext0:
   275                           	callstack 0
   276   000838                     _main:
   277                           	callstack 28
   278   000838                     
   279                           ;newmain.c: 22:     TRISD = 0x00;
   280   000838  0E00               	movlw	0
   281   00083A  6E95               	movwf	149,c	;volatile
   282                           
   283                           ;newmain.c: 23:     TRISB = 0x00;
   284   00083C  0E00               	movlw	0
   285   00083E  6E93               	movwf	147,c	;volatile
   286                           
   287                           ;newmain.c: 24:     TRISE = 0x00;
   288   000840  0E00               	movlw	0
   289   000842  6E96               	movwf	150,c	;volatile
   290   000844                     
   291                           ;newmain.c: 26:     TRISBbits.TRISB1 = 1;
   292   000844  8293               	bsf	147,1,c	;volatile
   293   000846                     
   294                           ;newmain.c: 27:     TRISBbits.TRISB2 = 1;
   295   000846  8493               	bsf	147,2,c	;volatile
   296                           
   297                           ;newmain.c: 32:     int casa = 0, visitante = 0;
   298   000848  0E00               	movlw	0
   299   00084A  6E4E               	movwf	(main@casa+1)^0,c
   300   00084C  0E00               	movlw	0
   301   00084E  6E4D               	movwf	main@casa^0,c
   302   000850  0E00               	movlw	0
   303   000852  6E50               	movwf	(main@visitante+1)^0,c
   304   000854  0E00               	movlw	0
   305   000856  6E4F               	movwf	main@visitante^0,c
   306   000858                     
   307                           ;newmain.c: 37:     lcd_init();
   308   000858  ECE4  F005         	call	_lcd_init	;wreg free
   309   00085C                     
   310                           ;newmain.c: 38:     lcd_cmd(0x01);
   311   00085C  0E01               	movlw	1
   312   00085E  EC4B  F006         	call	_lcd_cmd
   313   000862                     
   314                           ;newmain.c: 40:         lcd_cmd(0x80);
   315   000862  0E80               	movlw	128
   316   000864  EC4B  F006         	call	_lcd_cmd
   317   000868                     
   318                           ;newmain.c: 41:         lcd_str("CASA: ");
   319   000868  0E2E               	movlw	low STR_2
   320   00086A  6E48               	movwf	lcd_str@str^0,c
   321   00086C  0E08               	movlw	high STR_2
   322   00086E  6E49               	movwf	(lcd_str@str+1)^0,c
   323   000870  ECA8  F005         	call	_lcd_str	;wreg free
   324   000874                     
   325                           ;newmain.c: 42:         lcd_cmd(0xC0);
   326   000874  0EC0               	movlw	192
   327   000876  EC4B  F006         	call	_lcd_cmd
   328   00087A                     
   329                           ;newmain.c: 43:         lcd_str("VISITANTE: ");
   330   00087A  0E22               	movlw	low STR_3
   331   00087C  6E48               	movwf	lcd_str@str^0,c
   332   00087E  0E08               	movlw	high STR_3
   333   000880  6E49               	movwf	(lcd_str@str+1)^0,c
   334   000882  ECA8  F005         	call	_lcd_str	;wreg free
   335   000886                     l1269:
   336                           
   337                           ;newmain.c: 46:     {;newmain.c: 49:         if(PORTBbits.RB1 == 0)
   338   000886  B281               	btfsc	129,1,c	;volatile
   339   000888  EF48  F004         	goto	u361
   340   00088C  EF4A  F004         	goto	u360
   341   000890                     u361:
   342   000890  EF7F  F004         	goto	l1289
   343   000894                     u360:
   344   000894                     
   345                           ;newmain.c: 50:         {;newmain.c: 51:             if(casa != 9)
   346   000894  0E09               	movlw	9
   347   000896  184D               	xorwf	main@casa^0,w,c
   348   000898  104E               	iorwf	(main@casa+1)^0,w,c
   349   00089A  B4D8               	btfsc	status,2,c
   350   00089C  EF52  F004         	goto	u371
   351   0008A0  EF54  F004         	goto	u370
   352   0008A4                     u371:
   353   0008A4  EF70  F004         	goto	l1283
   354   0008A8                     u370:
   355   0008A8                     
   356                           ;newmain.c: 52:             {;newmain.c: 53:                 casa++;
   357   0008A8  4A4D               	infsnz	main@casa^0,f,c
   358   0008AA  2A4E               	incf	(main@casa+1)^0,f,c
   359   0008AC                     
   360                           ;newmain.c: 57:                 lcd_cmd(0x86);
   361   0008AC  0E86               	movlw	134
   362   0008AE  EC4B  F006         	call	_lcd_cmd
   363   0008B2                     
   364                           ;newmain.c: 58:                 lcd_str(name(casa));
   365   0008B2  C04D  F042         	movff	main@casa,name@str
   366   0008B6  C04E  F043         	movff	main@casa+1,name@str+1
   367   0008BA  EC33  F005         	call	_name	;wreg free
   368   0008BE  C042  F048         	movff	?_name,lcd_str@str
   369   0008C2  C043  F049         	movff	?_name+1,lcd_str@str+1
   370   0008C6  ECA8  F005         	call	_lcd_str	;wreg free
   371   0008CA                     
   372                           ;newmain.c: 60:                 lcd_cmd(0xcb);
   373   0008CA  0ECB               	movlw	203
   374   0008CC  EC4B  F006         	call	_lcd_cmd
   375   0008D0                     
   376                           ;newmain.c: 61:                 lcd_numb(visitante);
   377   0008D0  C04F  F048         	movff	main@visitante,lcd_numb@str
   378   0008D4  C050  F049         	movff	main@visitante+1,lcd_numb@str+1
   379   0008D8  ECB9  F004         	call	_lcd_numb	;wreg free
   380                           
   381                           ;newmain.c: 62:             }else
   382   0008DC  EF7F  F004         	goto	l1289
   383   0008E0                     l1283:
   384                           
   385                           ;newmain.c: 63:             {;newmain.c: 64:                 lcd_cmd(0x01);
   386   0008E0  0E01               	movlw	1
   387   0008E2  EC4B  F006         	call	_lcd_cmd
   388   0008E6                     
   389                           ;newmain.c: 65:                 lcd_str("casa vencedor");
   390   0008E6  0E14               	movlw	low STR_4
   391   0008E8  6E48               	movwf	lcd_str@str^0,c
   392   0008EA  0E08               	movlw	high STR_4
   393   0008EC  6E49               	movwf	(lcd_str@str+1)^0,c
   394   0008EE  ECA8  F005         	call	_lcd_str	;wreg free
   395   0008F2                     
   396                           ;newmain.c: 66:                 exit(0);
   397   0008F2  0E00               	movlw	0
   398   0008F4  6E45               	movwf	(exit@code+1)^0,c
   399   0008F6  0E00               	movlw	0
   400   0008F8  6E44               	movwf	exit@code^0,c
   401   0008FA  EC79  F006         	call	_exit	;wreg free
   402   0008FE                     l1289:
   403                           
   404                           ;newmain.c: 70:         if(PORTBbits.RB2 == 0)
   405   0008FE  B481               	btfsc	129,2,c	;volatile
   406   000900  EF84  F004         	goto	u381
   407   000904  EF86  F004         	goto	u380
   408   000908                     u381:
   409   000908  EF43  F004         	goto	l1269
   410   00090C                     u380:
   411   00090C                     
   412                           ;newmain.c: 71:         {;newmain.c: 72:             if(visitante != 9)
   413   00090C  0E09               	movlw	9
   414   00090E  184F               	xorwf	main@visitante^0,w,c
   415   000910  1050               	iorwf	(main@visitante+1)^0,w,c
   416   000912  B4D8               	btfsc	status,2,c
   417   000914  EF8E  F004         	goto	u391
   418   000918  EF90  F004         	goto	u390
   419   00091C                     u391:
   420   00091C  EFA6  F004         	goto	l1303
   421   000920                     u390:
   422   000920                     
   423                           ;newmain.c: 73:             {;newmain.c: 74:                 visitante++;
   424   000920  4A4F               	infsnz	main@visitante^0,f,c
   425   000922  2A50               	incf	(main@visitante+1)^0,f,c
   426   000924                     
   427                           ;newmain.c: 76:                 lcd_cmd(0x86);
   428   000924  0E86               	movlw	134
   429   000926  EC4B  F006         	call	_lcd_cmd
   430   00092A                     
   431                           ;newmain.c: 77:                 lcd_numb(casa);
   432   00092A  C04D  F048         	movff	main@casa,lcd_numb@str
   433   00092E  C04E  F049         	movff	main@casa+1,lcd_numb@str+1
   434   000932  ECB9  F004         	call	_lcd_numb	;wreg free
   435   000936                     
   436                           ;newmain.c: 79:                 lcd_cmd(0xcb);
   437   000936  0ECB               	movlw	203
   438   000938  EC4B  F006         	call	_lcd_cmd
   439   00093C                     
   440                           ;newmain.c: 80:                 lcd_numb(visitante);
   441   00093C  C04F  F048         	movff	main@visitante,lcd_numb@str
   442   000940  C050  F049         	movff	main@visitante+1,lcd_numb@str+1
   443   000944  ECB9  F004         	call	_lcd_numb	;wreg free
   444                           
   445                           ;newmain.c: 81:             }else
   446   000948  EF43  F004         	goto	l1269
   447   00094C                     l1303:
   448                           
   449                           ;newmain.c: 82:             {;newmain.c: 83:                 lcd_cmd(0x01);
   450   00094C  0E01               	movlw	1
   451   00094E  EC4B  F006         	call	_lcd_cmd
   452   000952                     
   453                           ;newmain.c: 84:                 lcd_str("visitante vencedor");
   454   000952  0E01               	movlw	low STR_5
   455   000954  6E48               	movwf	lcd_str@str^0,c
   456   000956  0E08               	movlw	high STR_5
   457   000958  6E49               	movwf	(lcd_str@str+1)^0,c
   458   00095A  ECA8  F005         	call	_lcd_str	;wreg free
   459   00095E                     
   460                           ;newmain.c: 85:                 exit(0);
   461   00095E  0E00               	movlw	0
   462   000960  6E45               	movwf	(exit@code+1)^0,c
   463   000962  0E00               	movlw	0
   464   000964  6E44               	movwf	exit@code^0,c
   465   000966  EC79  F006         	call	_exit	;wreg free
   466   00096A  EF43  F004         	goto	l1269
   467   00096E  EF00  F000         	goto	start
   468   000972                     __end_of_main:
   469                           	callstack 0
   470                           
   471 ;; *************** function _name *****************
   472 ;; Defined at:
   473 ;;		line 130 in file "lcd.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;  str             2    0[COMRAM] const int 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  2    0[COMRAM] PTR unsigned char 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   487 ;;      Params:         2       0       0       0       0       0       0       0       0
   488 ;;      Locals:         0       0       0       0       0       0       0       0       0
   489 ;;      Temps:          2       0       0       0       0       0       0       0       0
   490 ;;      Totals:         4       0       0       0       0       0       0       0       0
   491 ;;Total ram usage:        4 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text1
   501   000A66                     __ptext1:
   502                           	callstack 0
   503   000A66                     _name:
   504                           	callstack 30
   505   000A66                     
   506                           ;lcd.c: 130: name(const int str);lcd.c: 131: {;lcd.c: 132:     switch(str)
   507   000A66  EF71  F005         	goto	l1241
   508   000A6A                     l1179:
   509                           
   510                           ;lcd.c: 135:             return '0';
   511   000A6A  0E30               	movlw	48
   512   000A6C  6E42               	movwf	?_name^0,c
   513   000A6E  0E00               	movlw	0
   514   000A70  6E43               	movwf	(?_name+1)^0,c
   515   000A72  EFA7  F005         	goto	l75
   516   000A76                     l1185:
   517                           
   518                           ;lcd.c: 138:             return '1';
   519   000A76  0E31               	movlw	49
   520   000A78  6E42               	movwf	?_name^0,c
   521   000A7A  0E00               	movlw	0
   522   000A7C  6E43               	movwf	(?_name+1)^0,c
   523   000A7E  EFA7  F005         	goto	l75
   524   000A82                     l1191:
   525                           
   526                           ;lcd.c: 142:             return '2';
   527   000A82  0E32               	movlw	50
   528   000A84  6E42               	movwf	?_name^0,c
   529   000A86  0E00               	movlw	0
   530   000A88  6E43               	movwf	(?_name+1)^0,c
   531   000A8A  EFA7  F005         	goto	l75
   532   000A8E                     l1197:
   533                           
   534                           ;lcd.c: 146:             return '3';
   535   000A8E  0E33               	movlw	51
   536   000A90  6E42               	movwf	?_name^0,c
   537   000A92  0E00               	movlw	0
   538   000A94  6E43               	movwf	(?_name+1)^0,c
   539   000A96  EFA7  F005         	goto	l75
   540   000A9A                     l1203:
   541                           
   542                           ;lcd.c: 150:             return '4';
   543   000A9A  0E34               	movlw	52
   544   000A9C  6E42               	movwf	?_name^0,c
   545   000A9E  0E00               	movlw	0
   546   000AA0  6E43               	movwf	(?_name+1)^0,c
   547   000AA2  EFA7  F005         	goto	l75
   548   000AA6                     l1209:
   549                           
   550                           ;lcd.c: 154:             return '5';
   551   000AA6  0E35               	movlw	53
   552   000AA8  6E42               	movwf	?_name^0,c
   553   000AAA  0E00               	movlw	0
   554   000AAC  6E43               	movwf	(?_name+1)^0,c
   555   000AAE  EFA7  F005         	goto	l75
   556   000AB2                     l1215:
   557                           
   558                           ;lcd.c: 158:             return '6';
   559   000AB2  0E36               	movlw	54
   560   000AB4  6E42               	movwf	?_name^0,c
   561   000AB6  0E00               	movlw	0
   562   000AB8  6E43               	movwf	(?_name+1)^0,c
   563   000ABA  EFA7  F005         	goto	l75
   564   000ABE                     l1221:
   565                           
   566                           ;lcd.c: 162:             return '7';
   567   000ABE  0E37               	movlw	55
   568   000AC0  6E42               	movwf	?_name^0,c
   569   000AC2  0E00               	movlw	0
   570   000AC4  6E43               	movwf	(?_name+1)^0,c
   571   000AC6  EFA7  F005         	goto	l75
   572   000ACA                     l1227:
   573                           
   574                           ;lcd.c: 165:             return '8';
   575   000ACA  0E38               	movlw	56
   576   000ACC  6E42               	movwf	?_name^0,c
   577   000ACE  0E00               	movlw	0
   578   000AD0  6E43               	movwf	(?_name+1)^0,c
   579   000AD2  EFA7  F005         	goto	l75
   580   000AD6                     l1233:
   581                           
   582                           ;lcd.c: 169:             return '9';
   583   000AD6  0E39               	movlw	57
   584   000AD8  6E42               	movwf	?_name^0,c
   585   000ADA  0E00               	movlw	0
   586   000ADC  6E43               	movwf	(?_name+1)^0,c
   587   000ADE  EFA7  F005         	goto	l75
   588   000AE2                     l1241:
   589   000AE2  C042  F044         	movff	name@str,??_name
   590   000AE6  C043  F045         	movff	name@str+1,??_name+1
   591                           
   592                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   593                           ; Switch size 1, requested type "simple"
   594                           ; Number of cases is 1, Range of values is 0 to 0
   595                           ; switch strategies available:
   596                           ; Name         Instructions Cycles
   597                           ; simple_byte            4     3 (average)
   598                           ;	Chosen strategy is simple_byte
   599   000AEA  5045               	movf	(??_name+1)^0,w,c
   600   000AEC  0A00               	xorlw	0	; case 0
   601   000AEE  B4D8               	btfsc	status,2,c
   602   000AF0  EF7C  F005         	goto	l1313
   603   000AF4  EFA7  F005         	goto	l75
   604   000AF8                     l1313:
   605                           
   606                           ; Switch size 1, requested type "simple"
   607                           ; Number of cases is 10, Range of values is 0 to 9
   608                           ; switch strategies available:
   609                           ; Name         Instructions Cycles
   610                           ; simple_byte           31    16 (average)
   611                           ;	Chosen strategy is simple_byte
   612   000AF8  5044               	movf	??_name^0,w,c
   613   000AFA  0A00               	xorlw	0	; case 0
   614   000AFC  B4D8               	btfsc	status,2,c
   615   000AFE  EF35  F005         	goto	l1179
   616   000B02  0A01               	xorlw	1	; case 1
   617   000B04  B4D8               	btfsc	status,2,c
   618   000B06  EF3B  F005         	goto	l1185
   619   000B0A  0A03               	xorlw	3	; case 2
   620   000B0C  B4D8               	btfsc	status,2,c
   621   000B0E  EF41  F005         	goto	l1191
   622   000B12  0A01               	xorlw	1	; case 3
   623   000B14  B4D8               	btfsc	status,2,c
   624   000B16  EF47  F005         	goto	l1197
   625   000B1A  0A07               	xorlw	7	; case 4
   626   000B1C  B4D8               	btfsc	status,2,c
   627   000B1E  EF4D  F005         	goto	l1203
   628   000B22  0A01               	xorlw	1	; case 5
   629   000B24  B4D8               	btfsc	status,2,c
   630   000B26  EF53  F005         	goto	l1209
   631   000B2A  0A03               	xorlw	3	; case 6
   632   000B2C  B4D8               	btfsc	status,2,c
   633   000B2E  EF59  F005         	goto	l1215
   634   000B32  0A01               	xorlw	1	; case 7
   635   000B34  B4D8               	btfsc	status,2,c
   636   000B36  EF5F  F005         	goto	l1221
   637   000B3A  0A0F               	xorlw	15	; case 8
   638   000B3C  B4D8               	btfsc	status,2,c
   639   000B3E  EF65  F005         	goto	l1227
   640   000B42  0A01               	xorlw	1	; case 9
   641   000B44  B4D8               	btfsc	status,2,c
   642   000B46  EF6B  F005         	goto	l1233
   643   000B4A  EFA7  F005         	goto	l75
   644   000B4E                     l75:
   645   000B4E  0012               	return		;funcret
   646   000B50                     __end_of_name:
   647                           	callstack 0
   648                           
   649 ;; *************** function _lcd_str *****************
   650 ;; Defined at:
   651 ;;		line 79 in file "lcd.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;  str             2    6[COMRAM] PTR const unsigned char 
   654 ;;		 -> STR_5(19), STR_4(14), STR_3(12), STR_2(7), 
   655 ;;		 -> RAM(2047), NULL(0), 
   656 ;; Auto vars:     Size  Location     Type
   657 ;;  i               1   10[COMRAM] unsigned char 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         2       0       0       0       0       0       0       0       0
   668 ;;      Locals:         1       0       0       0       0       0       0       0       0
   669 ;;      Temps:          2       0       0       0       0       0       0       0       0
   670 ;;      Totals:         5       0       0       0       0       0       0       0       0
   671 ;;Total ram usage:        5 bytes
   672 ;; Hardware stack levels used: 1
   673 ;; Hardware stack levels required when called: 2
   674 ;; This function calls:
   675 ;;		_lcd_dat
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text2
   682   000B50                     __ptext2:
   683                           	callstack 0
   684   000B50                     _lcd_str:
   685                           	callstack 28
   686   000B50                     
   687                           ;lcd.c: 79: void lcd_str(const char* str);lcd.c: 80: {;lcd.c: 81:  unsigned char i=0;
   688   000B50  0E00               	movlw	0
   689   000B52  6E4C               	movwf	lcd_str@i^0,c
   690                           
   691                           ;lcd.c: 83:  while(str[i] != '\0' )
   692   000B54  EFC5  F005         	goto	l1133
   693   000B58                     l1129:
   694                           
   695                           ;lcd.c: 84:  {;lcd.c: 85:    lcd_dat(str[i]);
   696   000B58  504C               	movf	lcd_str@i^0,w,c
   697   000B5A  2448               	addwf	lcd_str@str^0,w,c
   698   000B5C  6E4A               	movwf	??_lcd_str^0,c
   699   000B5E  0E00               	movlw	0
   700   000B60  2049               	addwfc	(lcd_str@str+1)^0,w,c
   701   000B62  6E4B               	movwf	(??_lcd_str+1)^0,c
   702   000B64  C04A  FFF6         	movff	??_lcd_str,tblptrl
   703   000B68  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   704   000B6C  6AF8               	clrf	tblptru,c
   705   000B6E  0E07               	movlw	(high __ramtop+-1)
   706   000B70  64F7               	cpfsgt	tblptrh,c
   707   000B72  D003               	bra	u237
   708   000B74  0008               	tblrd		*
   709   000B76  50F5               	movf	tablat,w,c
   710   000B78  D005               	bra	u230
   711   000B7A                     u237:
   712   000B7A  CFF6 FFE9          	movff	tblptrl,fsr0l
   713   000B7E  CFF7 FFEA          	movff	tblptrh,fsr0h
   714   000B82  50EF               	movf	indf0,w,c
   715   000B84                     u230:
   716   000B84  EC36  F006         	call	_lcd_dat
   717   000B88                     
   718                           ;lcd.c: 86:    i++;
   719   000B88  2A4C               	incf	lcd_str@i^0,f,c
   720   000B8A                     l1133:
   721                           
   722                           ;lcd.c: 83:  while(str[i] != '\0' )
   723   000B8A  504C               	movf	lcd_str@i^0,w,c
   724   000B8C  2448               	addwf	lcd_str@str^0,w,c
   725   000B8E  6E4A               	movwf	??_lcd_str^0,c
   726   000B90  0E00               	movlw	0
   727   000B92  2049               	addwfc	(lcd_str@str+1)^0,w,c
   728   000B94  6E4B               	movwf	(??_lcd_str+1)^0,c
   729   000B96  C04A  FFF6         	movff	??_lcd_str,tblptrl
   730   000B9A  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   731   000B9E  6AF8               	clrf	tblptru,c
   732   000BA0  0E07               	movlw	(high __ramtop+-1)
   733   000BA2  64F7               	cpfsgt	tblptrh,c
   734   000BA4  D003               	bra	u247
   735   000BA6  0008               	tblrd		*
   736   000BA8  50F5               	movf	tablat,w,c
   737   000BAA  D005               	bra	u240
   738   000BAC                     u247:
   739   000BAC  CFF6 FFE9          	movff	tblptrl,fsr0l
   740   000BB0  CFF7 FFEA          	movff	tblptrh,fsr0h
   741   000BB4  50EF               	movf	indf0,w,c
   742   000BB6                     u240:
   743   000BB6  0900               	iorlw	0
   744   000BB8  A4D8               	btfss	status,2,c
   745   000BBA  EFE1  F005         	goto	u251
   746   000BBE  EFE3  F005         	goto	u250
   747   000BC2                     u251:
   748   000BC2  EFAC  F005         	goto	l1129
   749   000BC6                     u250:
   750   000BC6  0012               	return		;funcret
   751   000BC8                     __end_of_lcd_str:
   752                           	callstack 0
   753                           
   754 ;; *************** function _lcd_numb *****************
   755 ;; Defined at:
   756 ;;		line 90 in file "lcd.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;  str             2    6[COMRAM] const int 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  num_placar      1    8[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         2       0       0       0       0       0       0       0       0
   771 ;;      Locals:         1       0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:         3       0       0       0       0       0       0       0       0
   774 ;;Total ram usage:        3 bytes
   775 ;; Hardware stack levels used: 1
   776 ;; Hardware stack levels required when called: 2
   777 ;; This function calls:
   778 ;;		_lcd_dat
   779 ;; This function is called by:
   780 ;;		_main
   781 ;; This function uses a non-reentrant model
   782 ;;
   783                           
   784                           	psect	text3
   785   000972                     __ptext3:
   786                           	callstack 0
   787   000972                     _lcd_numb:
   788                           	callstack 28
   789   000972                     
   790                           ;lcd.c: 92:     char num_placar;;lcd.c: 94:     if(0 == str){
   791   000972  5048               	movf	lcd_numb@str^0,w,c
   792   000974  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   793   000976  A4D8               	btfss	status,2,c
   794   000978  EFC0  F004         	goto	u261
   795   00097C  EFC2  F004         	goto	u260
   796   000980                     u261:
   797   000980  EFC4  F004         	goto	l1139
   798   000984                     u260:
   799   000984                     
   800                           ;lcd.c: 95:             num_placar = "0";
   801   000984  0E35               	movlw	low (low STR_1)
   802   000986  6E4A               	movwf	lcd_numb@num_placar^0,c
   803   000988                     l1139:
   804                           
   805                           ;lcd.c: 97:     if(1 == str){
   806   000988  0448               	decf	lcd_numb@str^0,w,c
   807   00098A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   808   00098C  A4D8               	btfss	status,2,c
   809   00098E  EFCB  F004         	goto	u271
   810   000992  EFCD  F004         	goto	u270
   811   000996                     u271:
   812   000996  EFCF  F004         	goto	l1143
   813   00099A                     u270:
   814   00099A                     
   815                           ;lcd.c: 98:             num_placar = '1';
   816   00099A  0E31               	movlw	49
   817   00099C  6E4A               	movwf	lcd_numb@num_placar^0,c
   818   00099E                     l1143:
   819                           
   820                           ;lcd.c: 100:     if(2 == str){
   821   00099E  0E02               	movlw	2
   822   0009A0  1848               	xorwf	lcd_numb@str^0,w,c
   823   0009A2  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   824   0009A4  A4D8               	btfss	status,2,c
   825   0009A6  EFD7  F004         	goto	u281
   826   0009AA  EFD9  F004         	goto	u280
   827   0009AE                     u281:
   828   0009AE  EFDB  F004         	goto	l1147
   829   0009B2                     u280:
   830   0009B2                     
   831                           ;lcd.c: 101:             num_placar = '2';
   832   0009B2  0E32               	movlw	50
   833   0009B4  6E4A               	movwf	lcd_numb@num_placar^0,c
   834   0009B6                     l1147:
   835                           
   836                           ;lcd.c: 103:     if(3 == str){
   837   0009B6  0E03               	movlw	3
   838   0009B8  1848               	xorwf	lcd_numb@str^0,w,c
   839   0009BA  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   840   0009BC  A4D8               	btfss	status,2,c
   841   0009BE  EFE3  F004         	goto	u291
   842   0009C2  EFE5  F004         	goto	u290
   843   0009C6                     u291:
   844   0009C6  EFE7  F004         	goto	l1151
   845   0009CA                     u290:
   846   0009CA                     
   847                           ;lcd.c: 104:             num_placar = '3';
   848   0009CA  0E33               	movlw	51
   849   0009CC  6E4A               	movwf	lcd_numb@num_placar^0,c
   850   0009CE                     l1151:
   851                           
   852                           ;lcd.c: 106:     if(4 == str){
   853   0009CE  0E04               	movlw	4
   854   0009D0  1848               	xorwf	lcd_numb@str^0,w,c
   855   0009D2  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   856   0009D4  A4D8               	btfss	status,2,c
   857   0009D6  EFEF  F004         	goto	u301
   858   0009DA  EFF1  F004         	goto	u300
   859   0009DE                     u301:
   860   0009DE  EFF3  F004         	goto	l1155
   861   0009E2                     u300:
   862   0009E2                     
   863                           ;lcd.c: 107:             num_placar = '4';
   864   0009E2  0E34               	movlw	52
   865   0009E4  6E4A               	movwf	lcd_numb@num_placar^0,c
   866   0009E6                     l1155:
   867                           
   868                           ;lcd.c: 109:     if(5 == str){
   869   0009E6  0E05               	movlw	5
   870   0009E8  1848               	xorwf	lcd_numb@str^0,w,c
   871   0009EA  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   872   0009EC  A4D8               	btfss	status,2,c
   873   0009EE  EFFB  F004         	goto	u311
   874   0009F2  EFFD  F004         	goto	u310
   875   0009F6                     u311:
   876   0009F6  EFFF  F004         	goto	l1159
   877   0009FA                     u310:
   878   0009FA                     
   879                           ;lcd.c: 110:             num_placar = '5';
   880   0009FA  0E35               	movlw	53
   881   0009FC  6E4A               	movwf	lcd_numb@num_placar^0,c
   882   0009FE                     l1159:
   883                           
   884                           ;lcd.c: 112:     if(6 == str){
   885   0009FE  0E06               	movlw	6
   886   000A00  1848               	xorwf	lcd_numb@str^0,w,c
   887   000A02  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   888   000A04  A4D8               	btfss	status,2,c
   889   000A06  EF07  F005         	goto	u321
   890   000A0A  EF09  F005         	goto	u320
   891   000A0E                     u321:
   892   000A0E  EF0B  F005         	goto	l1163
   893   000A12                     u320:
   894   000A12                     
   895                           ;lcd.c: 113:             num_placar = '6';
   896   000A12  0E36               	movlw	54
   897   000A14  6E4A               	movwf	lcd_numb@num_placar^0,c
   898   000A16                     l1163:
   899                           
   900                           ;lcd.c: 115:     if(7 == str){
   901   000A16  0E07               	movlw	7
   902   000A18  1848               	xorwf	lcd_numb@str^0,w,c
   903   000A1A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   904   000A1C  A4D8               	btfss	status,2,c
   905   000A1E  EF13  F005         	goto	u331
   906   000A22  EF15  F005         	goto	u330
   907   000A26                     u331:
   908   000A26  EF17  F005         	goto	l1167
   909   000A2A                     u330:
   910   000A2A                     
   911                           ;lcd.c: 116:             num_placar = '7';
   912   000A2A  0E37               	movlw	55
   913   000A2C  6E4A               	movwf	lcd_numb@num_placar^0,c
   914   000A2E                     l1167:
   915                           
   916                           ;lcd.c: 118:     if(8 == str){
   917   000A2E  0E08               	movlw	8
   918   000A30  1848               	xorwf	lcd_numb@str^0,w,c
   919   000A32  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   920   000A34  A4D8               	btfss	status,2,c
   921   000A36  EF1F  F005         	goto	u341
   922   000A3A  EF21  F005         	goto	u340
   923   000A3E                     u341:
   924   000A3E  EF23  F005         	goto	l1171
   925   000A42                     u340:
   926   000A42                     
   927                           ;lcd.c: 119:             num_placar = '8';
   928   000A42  0E38               	movlw	56
   929   000A44  6E4A               	movwf	lcd_numb@num_placar^0,c
   930   000A46                     l1171:
   931                           
   932                           ;lcd.c: 122:     if(9 == str){
   933   000A46  0E09               	movlw	9
   934   000A48  1848               	xorwf	lcd_numb@str^0,w,c
   935   000A4A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   936   000A4C  A4D8               	btfss	status,2,c
   937   000A4E  EF2B  F005         	goto	u351
   938   000A52  EF2D  F005         	goto	u350
   939   000A56                     u351:
   940   000A56  EF2F  F005         	goto	l1175
   941   000A5A                     u350:
   942   000A5A                     
   943                           ;lcd.c: 123:             num_placar = '9';
   944   000A5A  0E39               	movlw	57
   945   000A5C  6E4A               	movwf	lcd_numb@num_placar^0,c
   946   000A5E                     l1175:
   947                           
   948                           ;lcd.c: 125:     lcd_dat(num_placar);
   949   000A5E  504A               	movf	lcd_numb@num_placar^0,w,c
   950   000A60  EC36  F006         	call	_lcd_dat
   951   000A64  0012               	return		;funcret
   952   000A66                     __end_of_lcd_numb:
   953                           	callstack 0
   954                           
   955 ;; *************** function _lcd_dat *****************
   956 ;; Defined at:
   957 ;;		line 49 in file "lcd.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  val             1    wreg     unsigned char 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  val             1    5[COMRAM] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg, status,2, status,0, cstack
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   971 ;;      Params:         0       0       0       0       0       0       0       0       0
   972 ;;      Locals:         1       0       0       0       0       0       0       0       0
   973 ;;      Temps:          0       0       0       0       0       0       0       0       0
   974 ;;      Totals:         1       0       0       0       0       0       0       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels used: 1
   977 ;; Hardware stack levels required when called: 1
   978 ;; This function calls:
   979 ;;		_atraso_ms
   980 ;;		_lcd_wr
   981 ;; This function is called by:
   982 ;;		_lcd_str
   983 ;;		_lcd_numb
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text4
   988   000C6C                     __ptext4:
   989                           	callstack 0
   990   000C6C                     _lcd_dat:
   991                           	callstack 28
   992                           
   993                           ;incstack = 0
   994                           ;lcd_dat@val stored from wreg
   995   000C6C  6E47               	movwf	lcd_dat@val^0,c
   996   000C6E                     
   997                           ;lcd.c: 49: void lcd_dat(unsigned char val);lcd.c: 50: {;lcd.c: 51:  PORTEbits.RE1=1;
   998   000C6E  8284               	bsf	132,1,c	;volatile
   999   000C70                     
  1000                           ;lcd.c: 52:         lcd_wr(val);
  1001   000C70  5047               	movf	lcd_dat@val^0,w,c
  1002   000C72  EC82  F006         	call	_lcd_wr
  1003   000C76                     
  1004                           ;lcd.c: 53:         PORTEbits.RE0=1;
  1005   000C76  8084               	bsf	132,0,c	;volatile
  1006   000C78                     
  1007                           ;lcd.c: 54:         atraso_ms(3);
  1008   000C78  0E00               	movlw	0
  1009   000C7A  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1010   000C7C  0E03               	movlw	3
  1011   000C7E  6E42               	movwf	atraso_ms@valor^0,c
  1012   000C80  EC12  F006         	call	_atraso_ms	;wreg free
  1013   000C84                     
  1014                           ;lcd.c: 55:         PORTEbits.RE1=0;
  1015   000C84  9284               	bcf	132,1,c	;volatile
  1016   000C86                     
  1017                           ;lcd.c: 56:         atraso_ms(3);
  1018   000C86  0E00               	movlw	0
  1019   000C88  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1020   000C8A  0E03               	movlw	3
  1021   000C8C  6E42               	movwf	atraso_ms@valor^0,c
  1022   000C8E  EC12  F006         	call	_atraso_ms	;wreg free
  1023   000C92                     
  1024                           ;lcd.c: 57:  PORTEbits.RE1=1;
  1025   000C92  8284               	bsf	132,1,c	;volatile
  1026   000C94  0012               	return		;funcret
  1027   000C96                     __end_of_lcd_dat:
  1028                           	callstack 0
  1029                           
  1030 ;; *************** function _lcd_init *****************
  1031 ;; Defined at:
  1032 ;;		line 60 in file "lcd.c"
  1033 ;; Parameters:    Size  Location     Type
  1034 ;;		None
  1035 ;; Auto vars:     Size  Location     Type
  1036 ;;		None
  1037 ;; Return value:  Size  Location     Type
  1038 ;;                  1    wreg      void 
  1039 ;; Registers used:
  1040 ;;		wreg, status,2, status,0, cstack
  1041 ;; Tracked objects:
  1042 ;;		On entry : 0/0
  1043 ;;		On exit  : 0/0
  1044 ;;		Unchanged: 0/0
  1045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1046 ;;      Params:         0       0       0       0       0       0       0       0       0
  1047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1049 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1050 ;;Total ram usage:        0 bytes
  1051 ;; Hardware stack levels used: 1
  1052 ;; Hardware stack levels required when called: 2
  1053 ;; This function calls:
  1054 ;;		_atraso_ms
  1055 ;;		_lcd_cmd
  1056 ;; This function is called by:
  1057 ;;		_main
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text5
  1062   000BC8                     __ptext5:
  1063                           	callstack 0
  1064   000BC8                     _lcd_init:
  1065                           	callstack 28
  1066   000BC8                     
  1067                           ;lcd.c: 62:  PORTEbits.RE1=0;
  1068   000BC8  9284               	bcf	132,1,c	;volatile
  1069                           
  1070                           ;lcd.c: 63:  PORTEbits.RE0=0;
  1071   000BCA  9084               	bcf	132,0,c	;volatile
  1072   000BCC                     
  1073                           ;lcd.c: 64:  atraso_ms(20);
  1074   000BCC  0E00               	movlw	0
  1075   000BCE  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1076   000BD0  0E14               	movlw	20
  1077   000BD2  6E42               	movwf	atraso_ms@valor^0,c
  1078   000BD4  EC12  F006         	call	_atraso_ms	;wreg free
  1079   000BD8                     
  1080                           ;lcd.c: 65:  PORTEbits.RE1=1;
  1081   000BD8  8284               	bsf	132,1,c	;volatile
  1082                           
  1083                           ;lcd.c: 67:  lcd_cmd(0x38);
  1084   000BDA  0E38               	movlw	56
  1085   000BDC  EC4B  F006         	call	_lcd_cmd
  1086                           
  1087                           ;lcd.c: 68:  atraso_ms(5);
  1088   000BE0  0E00               	movlw	0
  1089   000BE2  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1090   000BE4  0E05               	movlw	5
  1091   000BE6  6E42               	movwf	atraso_ms@valor^0,c
  1092   000BE8  EC12  F006         	call	_atraso_ms	;wreg free
  1093                           
  1094                           ;lcd.c: 69:  lcd_cmd(0x38);
  1095   000BEC  0E38               	movlw	56
  1096   000BEE  EC4B  F006         	call	_lcd_cmd
  1097                           
  1098                           ;lcd.c: 70:         atraso_ms(1);
  1099   000BF2  0E00               	movlw	0
  1100   000BF4  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1101   000BF6  0E01               	movlw	1
  1102   000BF8  6E42               	movwf	atraso_ms@valor^0,c
  1103   000BFA  EC12  F006         	call	_atraso_ms	;wreg free
  1104                           
  1105                           ;lcd.c: 71:  lcd_cmd(0x38);
  1106   000BFE  0E38               	movlw	56
  1107   000C00  EC4B  F006         	call	_lcd_cmd
  1108                           
  1109                           ;lcd.c: 72:  lcd_cmd(0x08);
  1110   000C04  0E08               	movlw	8
  1111   000C06  EC4B  F006         	call	_lcd_cmd
  1112                           
  1113                           ;lcd.c: 73:  lcd_cmd(0x0F);
  1114   000C0A  0E0F               	movlw	15
  1115   000C0C  EC4B  F006         	call	_lcd_cmd
  1116                           
  1117                           ;lcd.c: 74:  lcd_cmd(0x01);
  1118   000C10  0E01               	movlw	1
  1119   000C12  EC4B  F006         	call	_lcd_cmd
  1120                           
  1121                           ;lcd.c: 75:  lcd_cmd(0x38);
  1122   000C16  0E38               	movlw	56
  1123   000C18  EC4B  F006         	call	_lcd_cmd
  1124                           
  1125                           ;lcd.c: 76:         lcd_cmd(0x80);
  1126   000C1C  0E80               	movlw	128
  1127   000C1E  EC4B  F006         	call	_lcd_cmd
  1128   000C22  0012               	return		;funcret
  1129   000C24                     __end_of_lcd_init:
  1130                           	callstack 0
  1131                           
  1132 ;; *************** function _lcd_cmd *****************
  1133 ;; Defined at:
  1134 ;;		line 38 in file "lcd.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;  val             1    wreg     unsigned char 
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;  val             1    5[COMRAM] unsigned char 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1148 ;;      Params:         0       0       0       0       0       0       0       0       0
  1149 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1151 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1152 ;;Total ram usage:        1 bytes
  1153 ;; Hardware stack levels used: 1
  1154 ;; Hardware stack levels required when called: 1
  1155 ;; This function calls:
  1156 ;;		_atraso_ms
  1157 ;;		_lcd_wr
  1158 ;; This function is called by:
  1159 ;;		_lcd_init
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163                           
  1164                           	psect	text6
  1165   000C96                     __ptext6:
  1166                           	callstack 0
  1167   000C96                     _lcd_cmd:
  1168                           	callstack 28
  1169                           
  1170                           ;incstack = 0
  1171                           ;lcd_cmd@val stored from wreg
  1172   000C96  6E47               	movwf	lcd_cmd@val^0,c
  1173   000C98                     
  1174                           ;lcd.c: 38: void lcd_cmd(unsigned char val);lcd.c: 39: {;lcd.c: 40:  PORTEbits.RE1=1;
  1175   000C98  8284               	bsf	132,1,c	;volatile
  1176   000C9A                     
  1177                           ;lcd.c: 41:         lcd_wr(val);
  1178   000C9A  5047               	movf	lcd_cmd@val^0,w,c
  1179   000C9C  EC82  F006         	call	_lcd_wr
  1180   000CA0                     
  1181                           ;lcd.c: 42:         PORTEbits.RE0=0;
  1182   000CA0  9084               	bcf	132,0,c	;volatile
  1183   000CA2                     
  1184                           ;lcd.c: 43:         atraso_ms(3);
  1185   000CA2  0E00               	movlw	0
  1186   000CA4  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1187   000CA6  0E03               	movlw	3
  1188   000CA8  6E42               	movwf	atraso_ms@valor^0,c
  1189   000CAA  EC12  F006         	call	_atraso_ms	;wreg free
  1190   000CAE                     
  1191                           ;lcd.c: 44:         PORTEbits.RE1=0;
  1192   000CAE  9284               	bcf	132,1,c	;volatile
  1193   000CB0                     
  1194                           ;lcd.c: 45:         atraso_ms(3);
  1195   000CB0  0E00               	movlw	0
  1196   000CB2  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1197   000CB4  0E03               	movlw	3
  1198   000CB6  6E42               	movwf	atraso_ms@valor^0,c
  1199   000CB8  EC12  F006         	call	_atraso_ms	;wreg free
  1200   000CBC                     
  1201                           ;lcd.c: 46:  PORTEbits.RE1=1;
  1202   000CBC  8284               	bsf	132,1,c	;volatile
  1203   000CBE  0012               	return		;funcret
  1204   000CC0                     __end_of_lcd_cmd:
  1205                           	callstack 0
  1206                           
  1207 ;; *************** function _lcd_wr *****************
  1208 ;; Defined at:
  1209 ;;		line 33 in file "lcd.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  val             1    wreg     unsigned char 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  val             1    0[COMRAM] unsigned char 
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1223 ;;      Params:         0       0       0       0       0       0       0       0       0
  1224 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1225 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1226 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1227 ;;Total ram usage:        1 bytes
  1228 ;; Hardware stack levels used: 1
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_lcd_cmd
  1233 ;;		_lcd_dat
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237                           	psect	text7
  1238   000D04                     __ptext7:
  1239                           	callstack 0
  1240   000D04                     _lcd_wr:
  1241                           	callstack 28
  1242                           
  1243                           ;incstack = 0
  1244                           ;lcd_wr@val stored from wreg
  1245   000D04  6E42               	movwf	lcd_wr@val^0,c
  1246   000D06                     
  1247                           ;lcd.c: 33: void lcd_wr(unsigned char val);lcd.c: 34: {;lcd.c: 35:   PORTD=val;
  1248   000D06  C042  FF83         	movff	lcd_wr@val,3971	;volatile
  1249   000D0A  0012               	return		;funcret
  1250   000D0C                     __end_of_lcd_wr:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _atraso_ms *****************
  1254 ;; Defined at:
  1255 ;;		line 26 in file "atraso.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  valor           2    0[COMRAM] unsigned int 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  i               2    2[COMRAM] unsigned int 
  1260 ;;  j               1    4[COMRAM] unsigned char 
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1270 ;;      Params:         2       0       0       0       0       0       0       0       0
  1271 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1273 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1274 ;;Total ram usage:        5 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; This function calls:
  1277 ;;		Nothing
  1278 ;; This function is called by:
  1279 ;;		_lcd_cmd
  1280 ;;		_lcd_dat
  1281 ;;		_lcd_init
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text8
  1286   000C24                     __ptext8:
  1287                           	callstack 0
  1288   000C24                     _atraso_ms:
  1289                           	callstack 28
  1290   000C24                     
  1291                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1292   000C24  0E00               	movlw	0
  1293   000C26  6E45               	movwf	(atraso_ms@i+1)^0,c
  1294   000C28  0E00               	movlw	0
  1295   000C2A  6E44               	movwf	atraso_ms@i^0,c
  1296   000C2C  EF2A  F006         	goto	l1091
  1297   000C30                     l1079:
  1298                           
  1299                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1300   000C30  0E00               	movlw	0
  1301   000C32  6E46               	movwf	atraso_ms@j^0,c
  1302   000C34                     l5:
  1303   000C34  F000               	nop		;# 
  1304   000C36  F000               	nop		;# 
  1305   000C38  F000               	nop		;# 
  1306   000C3A  F000               	nop		;# 
  1307   000C3C  F000               	nop		;# 
  1308   000C3E                     
  1309                           ;atraso.c: 41:    }
  1310   000C3E  2A46               	incf	atraso_ms@j^0,f,c
  1311   000C40  0EC7               	movlw	199
  1312   000C42  6446               	cpfsgt	atraso_ms@j^0,c
  1313   000C44  EF26  F006         	goto	u211
  1314   000C48  EF28  F006         	goto	u210
  1315   000C4C                     u211:
  1316   000C4C  EF1A  F006         	goto	l5
  1317   000C50                     u210:
  1318   000C50                     
  1319                           ;atraso.c: 42:  }
  1320   000C50  4A44               	infsnz	atraso_ms@i^0,f,c
  1321   000C52  2A45               	incf	(atraso_ms@i+1)^0,f,c
  1322   000C54                     l1091:
  1323   000C54  5042               	movf	atraso_ms@valor^0,w,c
  1324   000C56  5C44               	subwf	atraso_ms@i^0,w,c
  1325   000C58  5043               	movf	(atraso_ms@valor+1)^0,w,c
  1326   000C5A  5845               	subwfb	(atraso_ms@i+1)^0,w,c
  1327   000C5C  A0D8               	btfss	status,0,c
  1328   000C5E  EF33  F006         	goto	u221
  1329   000C62  EF35  F006         	goto	u220
  1330   000C66                     u221:
  1331   000C66  EF18  F006         	goto	l1079
  1332   000C6A                     u220:
  1333   000C6A  0012               	return		;funcret
  1334   000C6C                     __end_of_atraso_ms:
  1335                           	callstack 0
  1336                           
  1337 ;; *************** function _exit *****************
  1338 ;; Defined at:
  1339 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\exit.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  code            2    2[COMRAM] int 
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, status,2, status,0, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1353 ;;      Params:         2       0       0       0       0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1356 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1357 ;;Total ram usage:        2 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; Hardware stack levels required when called: 1
  1360 ;; This function calls:
  1361 ;;		__Exit
  1362 ;;		___funcs_on_exit
  1363 ;; This function is called by:
  1364 ;;		_main
  1365 ;; This function uses a non-reentrant model
  1366 ;;
  1367                           
  1368                           	psect	text9
  1369   000CF2                     __ptext9:
  1370                           	callstack 0
  1371   000CF2                     _exit:
  1372                           	callstack 29
  1373   000CF2  EC60  F006         	call	___funcs_on_exit	;wreg free
  1374   000CF6  C044  F042         	movff	exit@code,__Exit@ec
  1375   000CFA  C045  F043         	movff	exit@code+1,__Exit@ec+1
  1376   000CFE  EC86  F006         	call	__Exit	;wreg free
  1377   000D02  0012               	return		;funcret
  1378   000D04                     __end_of_exit:
  1379                           	callstack 0
  1380                           
  1381 ;; *************** function ___funcs_on_exit *****************
  1382 ;; Defined at:
  1383 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atexit.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  func            2    0        PTR FTN()void 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1397 ;;      Params:         0       0       0       0       0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1400 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_exit
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text10
  1411   000CC0                     __ptext10:
  1412                           	callstack 0
  1413   000CC0                     ___funcs_on_exit:
  1414                           	callstack 29
  1415   000CC0  EF63  F006         	goto	l873
  1416   000CC4                     l871:
  1417   000CC4  0641               	decf	_count^0,f,c
  1418   000CC6                     l873:
  1419   000CC6  5041               	movf	_count^0,w,c
  1420   000CC8  0A80               	xorlw	128
  1421   000CCA  0F7F               	addlw	-129
  1422   000CCC  B0D8               	btfsc	status,0,c
  1423   000CCE  EF6B  F006         	goto	u31
  1424   000CD2  EF6D  F006         	goto	u30
  1425   000CD6                     u31:
  1426   000CD6  EF62  F006         	goto	l871
  1427   000CDA                     u30:
  1428   000CDA  0012               	return		;funcret
  1429   000CDC                     __end_of___funcs_on_exit:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function __Exit *****************
  1433 ;; Defined at:
  1434 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\_Exit.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;  ec              2    0[COMRAM] int 
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;		None
  1439 ;; Return value:  Size  Location     Type
  1440 ;;                  1    wreg      void 
  1441 ;; Registers used:
  1442 ;;		None
  1443 ;; Tracked objects:
  1444 ;;		On entry : 0/0
  1445 ;;		On exit  : 0/0
  1446 ;;		Unchanged: 0/0
  1447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1448 ;;      Params:         2       0       0       0       0       0       0       0       0
  1449 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1450 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1451 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1452 ;;Total ram usage:        2 bytes
  1453 ;; Hardware stack levels used: 1
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_exit
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text11
  1462   000D0C                     __ptext11:
  1463                           	callstack 0
  1464   000D0C                     __Exit:
  1465                           	callstack 29
  1466   000D0C                     l805:
  1467   000D0C  EF86  F006         	goto	l805
  1468   000D10  0012               	return		;funcret
  1469   000D12                     __end_of__Exit:
  1470                           	callstack 0
  1471                           
  1472                           	psect	rparam
  1473   000000                     
  1474                           	psect	idloc
  1475                           
  1476                           ;Config register IDLOC0 @ 0x200000
  1477                           ;	unspecified, using default values
  1478   200000                     	org	2097152
  1479   200000  FF                 	db	255
  1480                           
  1481                           ;Config register IDLOC1 @ 0x200001
  1482                           ;	unspecified, using default values
  1483   200001                     	org	2097153
  1484   200001  FF                 	db	255
  1485                           
  1486                           ;Config register IDLOC2 @ 0x200002
  1487                           ;	unspecified, using default values
  1488   200002                     	org	2097154
  1489   200002  FF                 	db	255
  1490                           
  1491                           ;Config register IDLOC3 @ 0x200003
  1492                           ;	unspecified, using default values
  1493   200003                     	org	2097155
  1494   200003  FF                 	db	255
  1495                           
  1496                           ;Config register IDLOC4 @ 0x200004
  1497                           ;	unspecified, using default values
  1498   200004                     	org	2097156
  1499   200004  FF                 	db	255
  1500                           
  1501                           ;Config register IDLOC5 @ 0x200005
  1502                           ;	unspecified, using default values
  1503   200005                     	org	2097157
  1504   200005  FF                 	db	255
  1505                           
  1506                           ;Config register IDLOC6 @ 0x200006
  1507                           ;	unspecified, using default values
  1508   200006                     	org	2097158
  1509   200006  FF                 	db	255
  1510                           
  1511                           ;Config register IDLOC7 @ 0x200007
  1512                           ;	unspecified, using default values
  1513   200007                     	org	2097159
  1514   200007  FF                 	db	255
  1515                           
  1516                           	psect	config
  1517                           
  1518                           ;Config register CONFIG1L @ 0x300000
  1519                           ;	PLL Prescaler Selection bits
  1520                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1521                           ;	System Clock Postscaler Selection bits
  1522                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1523                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1524                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1525   300000                     	org	3145728
  1526   300000  29                 	db	41
  1527                           
  1528                           ;Config register CONFIG1H @ 0x300001
  1529                           ;	Oscillator Selection bits
  1530                           ;	FOSC = HS, HS oscillator (HS)
  1531                           ;	Fail-Safe Clock Monitor Enable bit
  1532                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1533                           ;	Internal/External Oscillator Switchover bit
  1534                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1535   300001                     	org	3145729
  1536   300001  0C                 	db	12
  1537                           
  1538                           ;Config register CONFIG2L @ 0x300002
  1539                           ;	Power-up Timer Enable bit
  1540                           ;	PWRT = ON, PWRT enabled
  1541                           ;	Brown-out Reset Enable bits
  1542                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1543                           ;	Brown-out Reset Voltage bits
  1544                           ;	BORV = 3, Minimum setting 2.05V
  1545                           ;	USB Voltage Regulator Enable bit
  1546                           ;	VREGEN = OFF, USB voltage regulator disabled
  1547   300002                     	org	3145730
  1548   300002  18                 	db	24
  1549                           
  1550                           ;Config register CONFIG2H @ 0x300003
  1551                           ;	Watchdog Timer Enable bit
  1552                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1553                           ;	Watchdog Timer Postscale Select bits
  1554                           ;	WDTPS = 32768, 1:32768
  1555   300003                     	org	3145731
  1556   300003  1E                 	db	30
  1557                           
  1558                           ; Padding undefined space
  1559   300004                     	org	3145732
  1560   300004  FF                 	db	255
  1561                           
  1562                           ;Config register CONFIG3H @ 0x300005
  1563                           ;	CCP2 MUX bit
  1564                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1565                           ;	PORTB A/D Enable bit
  1566                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1567                           ;	Low-Power Timer 1 Oscillator Enable bit
  1568                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1569                           ;	MCLR Pin Enable bit
  1570                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1571   300005                     	org	3145733
  1572   300005  81                 	db	129
  1573                           
  1574                           ;Config register CONFIG4L @ 0x300006
  1575                           ;	Stack Full/Underflow Reset Enable bit
  1576                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1577                           ;	Single-Supply ICSP Enable bit
  1578                           ;	LVP = OFF, Single-Supply ICSP disabled
  1579                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1580                           ;	ICPRT = OFF, ICPORT disabled
  1581                           ;	Extended Instruction Set Enable bit
  1582                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1583                           ;	Background Debugger Enable bit
  1584                           ;	DEBUG = 0x1, unprogrammed default
  1585   300006                     	org	3145734
  1586   300006  80                 	db	128
  1587                           
  1588                           ; Padding undefined space
  1589   300007                     	org	3145735
  1590   300007  FF                 	db	255
  1591                           
  1592                           ;Config register CONFIG5L @ 0x300008
  1593                           ;	Code Protection bit
  1594                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1595                           ;	Code Protection bit
  1596                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1597                           ;	Code Protection bit
  1598                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1599                           ;	Code Protection bit
  1600                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1601   300008                     	org	3145736
  1602   300008  0F                 	db	15
  1603                           
  1604                           ;Config register CONFIG5H @ 0x300009
  1605                           ;	Boot Block Code Protection bit
  1606                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1607                           ;	Data EEPROM Code Protection bit
  1608                           ;	CPD = OFF, Data EEPROM is not code-protected
  1609   300009                     	org	3145737
  1610   300009  C0                 	db	192
  1611                           
  1612                           ;Config register CONFIG6L @ 0x30000A
  1613                           ;	Write Protection bit
  1614                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1615                           ;	Write Protection bit
  1616                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1617                           ;	Write Protection bit
  1618                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1619                           ;	Write Protection bit
  1620                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1621   30000A                     	org	3145738
  1622   30000A  0F                 	db	15
  1623                           
  1624                           ;Config register CONFIG6H @ 0x30000B
  1625                           ;	Configuration Register Write Protection bit
  1626                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1627                           ;	Boot Block Write Protection bit
  1628                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1629                           ;	Data EEPROM Write Protection bit
  1630                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1631   30000B                     	org	3145739
  1632   30000B  E0                 	db	224
  1633                           
  1634                           ;Config register CONFIG7L @ 0x30000C
  1635                           ;	Table Read Protection bit
  1636                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1637                           ;	Table Read Protection bit
  1638                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1639                           ;	Table Read Protection bit
  1640                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1641                           ;	Table Read Protection bit
  1642                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1643   30000C                     	org	3145740
  1644   30000C  0F                 	db	15
  1645                           
  1646                           ;Config register CONFIG7H @ 0x30000D
  1647                           ;	Boot Block Table Read Protection bit
  1648                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1649   30000D                     	org	3145741
  1650   30000D  40                 	db	64
  1651                           tosu	equ	0xFFF
  1652                           tosh	equ	0xFFE
  1653                           tosl	equ	0xFFD
  1654                           stkptr	equ	0xFFC
  1655                           pclatu	equ	0xFFB
  1656                           pclath	equ	0xFFA
  1657                           pcl	equ	0xFF9
  1658                           tblptru	equ	0xFF8
  1659                           tblptrh	equ	0xFF7
  1660                           tblptrl	equ	0xFF6
  1661                           tablat	equ	0xFF5
  1662                           prodh	equ	0xFF4
  1663                           prodl	equ	0xFF3
  1664                           indf0	equ	0xFEF
  1665                           postinc0	equ	0xFEE
  1666                           postdec0	equ	0xFED
  1667                           preinc0	equ	0xFEC
  1668                           plusw0	equ	0xFEB
  1669                           fsr0h	equ	0xFEA
  1670                           fsr0l	equ	0xFE9
  1671                           wreg	equ	0xFE8
  1672                           indf1	equ	0xFE7
  1673                           postinc1	equ	0xFE6
  1674                           postdec1	equ	0xFE5
  1675                           preinc1	equ	0xFE4
  1676                           plusw1	equ	0xFE3
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           bsr	equ	0xFE0
  1680                           indf2	equ	0xFDF
  1681                           postinc2	equ	0xFDE
  1682                           postdec2	equ	0xFDD
  1683                           preinc2	equ	0xFDC
  1684                           plusw2	equ	0xFDB
  1685                           fsr2h	equ	0xFDA
  1686                           fsr2l	equ	0xFD9
  1687                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      80
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    funcs	PTR FTN()void [32] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    sp__name	PTR unsigned char  size(2) Largest target is 2047
		 -> RAM(DATA[2047]), NULL(NULL[0]), 

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 2047
		 -> STR_5(CODE[19]), STR_4(CODE[14]), STR_3(CODE[12]), STR_2(CODE[7]), 
		 -> RAM(DATA[2047]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _exit->__Exit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4702
                                             11 COMRAM     4     4      0
                               _exit
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
                               _name
 ---------------------------------------------------------------------------------
 (1) _name                                                 4     2      2      98
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1131
                                              6 COMRAM     5     3      2
                            _lcd_dat
                               _name (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             3     1      2    1141
                                              6 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1285
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     624
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _exit                                                 2     0      2     250
                                              2 COMRAM     2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (2) ___funcs_on_exit                                      2     2      0       0
 ---------------------------------------------------------------------------------
 (2) __Exit                                                2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _exit
     __Exit
     ___funcs_on_exit
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat
     _name (ARG)
   _name

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      F      50       1       84.2%
BITBIGSFRll         21      0       0      25        0.0%
BITBIGSFRhll         E      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50       3        0.0%
DATA                 0      0      50       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 17:06:37 2022

                      l5 0C34                        l8 0C6A                       l42 0D0A  
                     l51 0C22                       l45 0CBE                       l70 0A64  
                     l48 0C94                       l57 0BC6                       l75 0B4E  
                     u30 0CDA                       u31 0CD6                      l802 0D02  
                    l805 0D0C                      l817 0CDA                      l871 0CC4  
                    l839 0D06                      l873 0CC6                      l869 0CC0  
                    u210 0C50                      u211 0C4C                      u220 0C6A  
                    u300 09E2                      u221 0C66                      u301 09DE  
                    u310 09FA                      u230 0B84                      u311 09F6  
                    u320 0A12                      u240 0BB6                      u321 0A0E  
                    u330 0A2A                      u250 0BC6                      u331 0A26  
                    u251 0BC2                      u340 0A42                      u260 0984  
                    u341 0A3E                      u261 0980                      u237 0B7A  
                    u350 0A5A                      u270 099A                      u351 0A56  
                    u271 0996                      u247 0BAC                      u280 09B2  
                    u360 0894                      u281 09AE                      u361 0890  
                    u290 09CA                      u370 08A8                      u291 09C6  
                    u371 08A4                      u380 090C                      u381 0908  
                    u390 0920                      u391 091C                      wreg 000FE8  
                   l1101 0CAE                     l1103 0CB0                     l1111 0C76  
                   l1105 0CBC                     l1121 0BC8                     l1113 0C78  
                   l1123 0BCC                     l1115 0C84                     l1107 0C6E  
                   l1131 0B88                     l1203 0A9A                     l1125 0BD8  
                   l1117 0C86                     l1109 0C70                     l1141 099A  
                   l1133 0B8A                     l1221 0ABE                     l1301 093C  
                   l1119 0C92                     l1151 09CE                     l1143 099E  
                   l1135 0972                     l1127 0B50                     l1215 0AB2  
                   l1303 094C                     l1161 0A12                     l1153 09E2  
                   l1145 09B2                     l1137 0984                     l1129 0B58  
                   l1313 0AF8                     l1233 0AD6                     l1209 0AA6  
                   l1241 0AE2                     l1305 0952                     l1091 0C54  
                   l1171 0A46                     l1163 0A16                     l1155 09E6  
                   l1147 09B6                     l1139 0988                     l1227 0ACA  
                   l1307 095E                     l1251 0838                     l1085 0C3E  
                   l1077 0C24                     l1093 0C98                     l1173 0A5A  
                   l1165 0A2A                     l1157 09FA                     l1149 09CA  
                   l1261 0862                     l1253 0844                     l1247 0CF2  
                   l1087 0C40                     l1079 0C30                     l1095 0C9A  
                   l1175 0A5E                     l1167 0A2E                     l1159 09FE  
                   l1191 0A82                     l1271 0894                     l1263 0868  
                   l1255 0846                     l1249 0CF6                     l1089 0C50  
                   l1097 0CA0                     l1169 0A42                     l1185 0A76  
                   l1177 0A66                     l1281 08D0                     l1273 08A8  
                   l1265 0874                     l1257 0858                     l1099 0CA2  
                   l1179 0A6A                     l1291 090C                     l1275 08AC  
                   l1283 08E0                     l1267 087A                     l1259 085C  
                   l1197 0A8E                     l1293 0920                     l1285 08E6  
                   l1277 08B2                     l1269 0886                     l1295 0924  
                   l1287 08F2                     l1279 08CA                     l1297 092A  
                   l1289 08FE                     l1299 0936                     STR_1 0835  
                   STR_2 082E                     STR_3 0822                     STR_4 0814  
            lcd_numb@str 0048                     STR_5 0801                     _main 0838  
                   _name 0A66                     _exit 0CF2                     fsr0h 000FEA  
                   indf0 000FEF                     fsr0l 000FE9                     start 0000  
           ___param_bank 000000                    ?_main 0042                    ?_name 0042  
                  ?_exit 0044                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISD 000F95                    _TRISE 000F96                    __Exit 0D0C  
        __end_of_lcd_dat 0C96          __end_of_lcd_cmd 0CC0          __end_of_lcd_str 0BC8  
                  _count 0041                    _funcs 0001                    tablat 000FF5  
                  status 000FD8          __initialization 0CDC             __end_of_main 0972  
           __end_of_name 0B50             __end_of_exit 0D04                   ??_main 004D  
                 ??_name 0044                   ??_exit 0046            __activetblptr 000002  
                 ?__Exit 0042         __end_of_lcd_init 0C24         __end_of_lcd_numb 0A66  
                 _lcd_wr 0D04                   clear_0 0CE2                   isa$std 000001  
              ??_lcd_dat 0047                ??_lcd_cmd 0047                ??_lcd_str 004A  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8            main@visitante 004F               __accesstop 0060  
__end_of__initialization 0CE8            ___rparam_used 000001           __pcstackCOMRAM 0042  
          __end_of__Exit 0D12        ??___funcs_on_exit 0042                  ??__Exit 0044  
                ?_lcd_wr 0042                ?_lcd_init 0042                ?_lcd_numb 0048  
                __Hparam 0000                  __Lparam 0000        __end_of_atraso_ms 0C6C  
           __psmallconst 0800                  __pcinit 0CDC                  __ramtop 0800  
                __ptext0 0838                  __ptext1 0A66                  __ptext2 0B50  
                __ptext3 0972                  __ptext4 0C6C                  __ptext5 0BC8  
                __ptext6 0C96                  __ptext7 0D04                  __ptext8 0C24  
                __ptext9 0CF2                  _lcd_dat 0C6C                  _lcd_cmd 0C96  
                _lcd_str 0B50               ??_lcd_init 0048               ??_lcd_numb 004A  
                name@str 0042     end_of_initialization 0CE8            __Lmediumconst 0000  
                postinc0 000FEE                _PORTBbits 000F81                _PORTEbits 000F84  
              _TRISBbits 000F93               lcd_dat@val 0047               lcd_cmd@val 0047  
             lcd_str@str 0048          ___funcs_on_exit 0CC0               atraso_ms@i 0044  
             atraso_ms@j 0046           __end_of_lcd_wr 0D0C      start_initialization 0CDC  
     lcd_numb@num_placar 004A                 ??_lcd_wr 0042              __pbssCOMRAM 0001  
__end_of___funcs_on_exit 0CDC                 ?_lcd_dat 0042                 ?_lcd_cmd 0042  
               ?_lcd_str 0048                _atraso_ms 0C24              __smallconst 0800  
         atraso_ms@valor 0042               ?_atraso_ms 0042                lcd_wr@val 0042  
       ?___funcs_on_exit 0042                 __Exit@ec 0042                 __Hrparam 0000  
               __Lrparam 0000                 __ptext10 0CC0                 __ptext11 0D0C  
               _lcd_init 0BC8                 _lcd_numb 0972                 isa$xinst 000000  
               main@casa 004D                 lcd_str@i 004C              ??_atraso_ms 0044  
               exit@code 0044  
