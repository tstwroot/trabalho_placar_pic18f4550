

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Nov 10 09:16:29 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20   000000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     _TRISBbits	set	3987
    57   000000                     _PORTBbits	set	3969
    58   000000                     _PORTD	set	3971
    59   000000                     _LATD	set	3980
    60   000000                     _TRISB	set	3987
    61   000000                     _TRISD	set	3989
    62   000000                     _PORTEbits	set	3972
    63   000000                     _TRISE	set	3990
    64                           
    65                           	psect	smallconst
    66   000800                     __psmallconst:
    67                           	callstack 0
    68   000800  00                 	db	0
    69   000801                     STR_4:
    70   000801  56                 	db	86	;'V'
    71   000802  49                 	db	73	;'I'
    72   000803  53                 	db	83	;'S'
    73   000804  49                 	db	73	;'I'
    74   000805  54                 	db	84	;'T'
    75   000806  41                 	db	65	;'A'
    76   000807  4E                 	db	78	;'N'
    77   000808  54                 	db	84	;'T'
    78   000809  45                 	db	69	;'E'
    79   00080A  20                 	db	32
    80   00080B  56                 	db	86	;'V'
    81   00080C  45                 	db	69	;'E'
    82   00080D  4E                 	db	78	;'N'
    83   00080E  43                 	db	67	;'C'
    84   00080F  45                 	db	69	;'E'
    85   000810  55                 	db	85	;'U'
    86   000811  00                 	db	0
    87   000812                     STR_2:
    88   000812  56                 	db	86	;'V'
    89   000813  49                 	db	73	;'I'
    90   000814  53                 	db	83	;'S'
    91   000815  49                 	db	73	;'I'
    92   000816  54                 	db	84	;'T'
    93   000817  41                 	db	65	;'A'
    94   000818  4E                 	db	78	;'N'
    95   000819  54                 	db	84	;'T'
    96   00081A  45                 	db	69	;'E'
    97   00081B  3A                 	db	58	;':'
    98   00081C  20                 	db	32
    99   00081D  00                 	db	0
   100   00081E                     STR_3:
   101   00081E  43                 	db	67	;'C'
   102   00081F  41                 	db	65	;'A'
   103   000820  53                 	db	83	;'S'
   104   000821  41                 	db	65	;'A'
   105   000822  20                 	db	32
   106   000823  56                 	db	86	;'V'
   107   000824  45                 	db	69	;'E'
   108   000825  4E                 	db	78	;'N'
   109   000826  43                 	db	67	;'C'
   110   000827  45                 	db	69	;'E'
   111   000828  55                 	db	85	;'U'
   112   000829  00                 	db	0
   113   00082A                     STR_1:
   114   00082A  43                 	db	67	;'C'
   115   00082B  41                 	db	65	;'A'
   116   00082C  53                 	db	83	;'S'
   117   00082D  41                 	db	65	;'A'
   118   00082E  3A                 	db	58	;':'
   119   00082F  20                 	db	32
   120   000830  00                 	db	0
   121   000831                     STR_5:
   122   000831  52                 	db	82	;'R'
   123   000832  45                 	db	69	;'E'
   124   000833  53                 	db	83	;'S'
   125   000834  45                 	db	69	;'E'
   126   000835  54                 	db	84	;'T'
   127   000836  00                 	db	0
   128   000837  00                 	db	0	; dummy byte at the end
   129   000000                     
   130                           ; #config settings
   131                           
   132                           	psect	cinit
   133   000C0C                     __pcinit:
   134                           	callstack 0
   135   000C0C                     start_initialization:
   136                           	callstack 0
   137   000C0C                     __initialization:
   138                           	callstack 0
   139   000C0C                     end_of_initialization:
   140                           	callstack 0
   141   000C0C                     __end_of__initialization:
   142                           	callstack 0
   143   000C0C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144   000C0E  6EF8               	movwf	tblptru,c
   145   000C10  0100               	movlb	0
   146   000C12  EF1C  F004         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	cstackCOMRAM
   149   000001                     __pcstackCOMRAM:
   150                           	callstack 0
   151   000001                     lcd_wr@val:
   152                           	callstack 0
   153   000001                     atraso_ms@valor:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x0
   157   000001                     	ds	2
   158   000003                     atraso_ms@i:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0x2
   162   000003                     	ds	2
   163   000005                     atraso_ms@j:
   164                           	callstack 0
   165                           
   166                           ; 1 bytes @ 0x4
   167   000005                     	ds	1
   168   000006                     lcd_cmd@val:
   169                           	callstack 0
   170   000006                     lcd_dat@val:
   171                           	callstack 0
   172                           
   173                           ; 1 bytes @ 0x5
   174   000006                     	ds	1
   175   000007                     lcd_str@str:
   176                           	callstack 0
   177   000007                     lcd_numb@str:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0x6
   181   000007                     	ds	2
   182   000009                     ??_lcd_str:
   183   000009                     lcd_numb@num_placar:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x8
   187   000009                     	ds	2
   188   00000B                     lcd_str@i:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0xA
   192   00000B                     	ds	1
   193   00000C                     main@casa:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0xB
   197   00000C                     	ds	2
   198   00000E                     main@visitante:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0xD
   202   00000E                     	ds	2
   203                           
   204 ;;
   205 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   206 ;;
   207 ;; *************** function _main *****************
   208 ;; Defined at:
   209 ;;		line 20 in file "newmain.c"
   210 ;; Parameters:    Size  Location     Type
   211 ;;		None
   212 ;; Auto vars:     Size  Location     Type
   213 ;;  visitante       2   13[COMRAM] int 
   214 ;;  casa            2   11[COMRAM] int 
   215 ;; Return value:  Size  Location     Type
   216 ;;                  2   96[None  ] int 
   217 ;; Registers used:
   218 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   224 ;;      Params:         0       0       0       0       0       0       0       0       0
   225 ;;      Locals:         4       0       0       0       0       0       0       0       0
   226 ;;      Temps:          0       0       0       0       0       0       0       0       0
   227 ;;      Totals:         4       0       0       0       0       0       0       0       0
   228 ;;Total ram usage:        4 bytes
   229 ;; Hardware stack levels required when called: 3
   230 ;; This function calls:
   231 ;;		_atraso_ms
   232 ;;		_lcd_cmd
   233 ;;		_lcd_init
   234 ;;		_lcd_numb
   235 ;;		_lcd_str
   236 ;; This function is called by:
   237 ;;		Startup code after reset
   238 ;; This function uses a non-reentrant model
   239 ;;
   240                           
   241                           	psect	text0
   242   000838                     __ptext0:
   243                           	callstack 0
   244   000838                     _main:
   245                           	callstack 28
   246   000838                     
   247                           ;newmain.c: 22:     TRISD = 0x00;
   248   000838  0E00               	movlw	0
   249   00083A  6E95               	movwf	149,c	;volatile
   250                           
   251                           ;newmain.c: 23:     TRISB = 0x00;
   252   00083C  0E00               	movlw	0
   253   00083E  6E93               	movwf	147,c	;volatile
   254                           
   255                           ;newmain.c: 24:     TRISE = 0x00;
   256   000840  0E00               	movlw	0
   257   000842  6E96               	movwf	150,c	;volatile
   258   000844                     
   259                           ;newmain.c: 26:     TRISBbits.TRISB1 = 1;
   260   000844  8293               	bsf	147,1,c	;volatile
   261   000846                     
   262                           ;newmain.c: 27:     TRISBbits.TRISB2 = 1;
   263   000846  8493               	bsf	147,2,c	;volatile
   264   000848                     
   265                           ;newmain.c: 28:     TRISBbits.TRISB3 = 1;
   266   000848  8693               	bsf	147,3,c	;volatile
   267   00084A                     
   268                           ;newmain.c: 31:     PORTBbits.RB7 = 1;
   269   00084A  8E81               	bsf	129,7,c	;volatile
   270                           
   271                           ;newmain.c: 33:     int casa = 0x00, visitante = 0x00;
   272   00084C  0E00               	movlw	0
   273   00084E  6E0D               	movwf	(main@casa+1)^0,c
   274   000850  0E00               	movlw	0
   275   000852  6E0C               	movwf	main@casa^0,c
   276   000854  0E00               	movlw	0
   277   000856  6E0F               	movwf	(main@visitante+1)^0,c
   278   000858  0E00               	movlw	0
   279   00085A  6E0E               	movwf	main@visitante^0,c
   280   00085C                     
   281                           ;newmain.c: 35:     PORTBbits.RB7 = 0x00;
   282   00085C  9E81               	bcf	129,7,c	;volatile
   283   00085E                     
   284                           ;newmain.c: 36:     PORTBbits.RB4 = 0x00;
   285   00085E  9881               	bcf	129,4,c	;volatile
   286                           
   287                           ;newmain.c: 37:     LATD = 0x00;
   288   000860  0E00               	movlw	0
   289   000862  6E8C               	movwf	140,c	;volatile
   290   000864                     
   291                           ;newmain.c: 39:     lcd_init();
   292   000864  EC62  F005         	call	_lcd_init	;wreg free
   293   000868                     
   294                           ;newmain.c: 40:     lcd_cmd(0x01);
   295   000868  0E01               	movlw	1
   296   00086A  ECF1  F005         	call	_lcd_cmd
   297   00086E                     
   298                           ;newmain.c: 42:     lcd_cmd(0x80);
   299   00086E  0E80               	movlw	128
   300   000870  ECF1  F005         	call	_lcd_cmd
   301   000874                     
   302                           ;newmain.c: 43:     lcd_str("CASA: ");
   303   000874  0E2A               	movlw	low STR_1
   304   000876  6E07               	movwf	lcd_str@str^0,c
   305   000878  0E08               	movlw	high STR_1
   306   00087A  6E08               	movwf	(lcd_str@str+1)^0,c
   307   00087C  EC90  F005         	call	_lcd_str	;wreg free
   308   000880                     
   309                           ;newmain.c: 45:     lcd_cmd(0x86);
   310   000880  0E86               	movlw	134
   311   000882  ECF1  F005         	call	_lcd_cmd
   312   000886                     
   313                           ;newmain.c: 46:     lcd_numb(casa);
   314   000886  0E00               	movlw	0
   315   000888  6E08               	movwf	(lcd_numb@str+1)^0,c
   316   00088A  0E00               	movlw	0
   317   00088C  6E07               	movwf	lcd_numb@str^0,c
   318   00088E  ECE8  F004         	call	_lcd_numb	;wreg free
   319   000892                     
   320                           ;newmain.c: 48:     lcd_cmd(0xC0);
   321   000892  0EC0               	movlw	192
   322   000894  ECF1  F005         	call	_lcd_cmd
   323   000898                     
   324                           ;newmain.c: 49:     lcd_str("VISITANTE: ");
   325   000898  0E12               	movlw	low STR_2
   326   00089A  6E07               	movwf	lcd_str@str^0,c
   327   00089C  0E08               	movlw	high STR_2
   328   00089E  6E08               	movwf	(lcd_str@str+1)^0,c
   329   0008A0  EC90  F005         	call	_lcd_str	;wreg free
   330   0008A4                     
   331                           ;newmain.c: 51:     lcd_cmd(0xcb);
   332   0008A4  0ECB               	movlw	203
   333   0008A6  ECF1  F005         	call	_lcd_cmd
   334   0008AA                     
   335                           ;newmain.c: 52:     lcd_numb(visitante);
   336   0008AA  0E00               	movlw	0
   337   0008AC  6E08               	movwf	(lcd_numb@str+1)^0,c
   338   0008AE  0E00               	movlw	0
   339   0008B0  6E07               	movwf	lcd_numb@str^0,c
   340   0008B2  ECE8  F004         	call	_lcd_numb	;wreg free
   341   0008B6                     l97:
   342                           
   343                           ;newmain.c: 55:     {;newmain.c: 56:         LATD = 0x00;
   344   0008B6  0E00               	movlw	0
   345   0008B8  6E8C               	movwf	140,c	;volatile
   346   0008BA                     
   347                           ;newmain.c: 58:         if(PORTBbits.RB1 == 0)
   348   0008BA  B281               	btfsc	129,1,c	;volatile
   349   0008BC  EF62  F004         	goto	u321
   350   0008C0  EF64  F004         	goto	u320
   351   0008C4                     u321:
   352   0008C4  EF95  F004         	goto	l98
   353   0008C8                     u320:
   354   0008C8                     
   355                           ;newmain.c: 59:         {;newmain.c: 60:             if(casa < 9)
   356   0008C8  BE0D               	btfsc	(main@casa+1)^0,7,c
   357   0008CA  EF72  F004         	goto	u330
   358   0008CE  500D               	movf	(main@casa+1)^0,w,c
   359   0008D0  E107               	bnz	u331
   360   0008D2  0E09               	movlw	9
   361   0008D4  5C0C               	subwf	main@casa^0,w,c
   362   0008D6  B0D8               	btfsc	status,0,c
   363   0008D8  EF70  F004         	goto	u331
   364   0008DC  EF72  F004         	goto	u330
   365   0008E0                     u331:
   366   0008E0  EF8A  F004         	goto	l1131
   367   0008E4                     u330:
   368   0008E4                     
   369                           ;newmain.c: 61:             {;newmain.c: 62:                 casa++;
   370   0008E4  4A0C               	infsnz	main@casa^0,f,c
   371   0008E6  2A0D               	incf	(main@casa+1)^0,f,c
   372   0008E8                     
   373                           ;newmain.c: 63:                 lcd_cmd(0x86);
   374   0008E8  0E86               	movlw	134
   375   0008EA  ECF1  F005         	call	_lcd_cmd
   376   0008EE                     
   377                           ;newmain.c: 64:                 lcd_numb(casa);
   378   0008EE  C00C  F007         	movff	main@casa,lcd_numb@str
   379   0008F2  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   380   0008F6  ECE8  F004         	call	_lcd_numb	;wreg free
   381   0008FA                     
   382                           ;newmain.c: 66:                 lcd_cmd(0xcb);
   383   0008FA  0ECB               	movlw	203
   384   0008FC  ECF1  F005         	call	_lcd_cmd
   385   000900                     
   386                           ;newmain.c: 67:                 lcd_numb(visitante);
   387   000900  C00E  F007         	movff	main@visitante,lcd_numb@str
   388   000904  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   389   000908  ECE8  F004         	call	_lcd_numb	;wreg free
   390   00090C                     
   391                           ;newmain.c: 68:                 PORTBbits.RB7 = 0x00;
   392   00090C  9E81               	bcf	129,7,c	;volatile
   393   00090E                     
   394                           ;newmain.c: 69:                 PORTBbits.RB4 = 0x00;
   395   00090E  9881               	bcf	129,4,c	;volatile
   396                           
   397                           ;newmain.c: 70:             }
   398   000910  EF95  F004         	goto	l98
   399   000914                     l1131:
   400                           
   401                           ;newmain.c: 72:             {;newmain.c: 73:                 lcd_cmd(0x01);
   402   000914  0E01               	movlw	1
   403   000916  ECF1  F005         	call	_lcd_cmd
   404   00091A                     
   405                           ;newmain.c: 74:                 lcd_str("CASA VENCEU");
   406   00091A  0E1E               	movlw	low STR_3
   407   00091C  6E07               	movwf	lcd_str@str^0,c
   408   00091E  0E08               	movlw	high STR_3
   409   000920  6E08               	movwf	(lcd_str@str+1)^0,c
   410   000922  EC90  F005         	call	_lcd_str	;wreg free
   411                           
   412                           ;newmain.c: 75:                 break;
   413   000926  EFE6  F004         	goto	l107
   414   00092A                     l98:
   415                           
   416                           ;newmain.c: 78:         if(PORTBbits.RB2 == 0)
   417   00092A  B481               	btfsc	129,2,c	;volatile
   418   00092C  EF9A  F004         	goto	u341
   419   000930  EF9C  F004         	goto	u340
   420   000934                     u341:
   421   000934  EFCD  F004         	goto	l102
   422   000938                     u340:
   423   000938                     
   424                           ;newmain.c: 79:         {;newmain.c: 80:             if(visitante < 9)
   425   000938  BE0F               	btfsc	(main@visitante+1)^0,7,c
   426   00093A  EFAA  F004         	goto	u350
   427   00093E  500F               	movf	(main@visitante+1)^0,w,c
   428   000940  E107               	bnz	u351
   429   000942  0E09               	movlw	9
   430   000944  5C0E               	subwf	main@visitante^0,w,c
   431   000946  B0D8               	btfsc	status,0,c
   432   000948  EFA8  F004         	goto	u351
   433   00094C  EFAA  F004         	goto	u350
   434   000950                     u351:
   435   000950  EFC2  F004         	goto	l1151
   436   000954                     u350:
   437   000954                     
   438                           ;newmain.c: 81:             {;newmain.c: 82:                 visitante++;
   439   000954  4A0E               	infsnz	main@visitante^0,f,c
   440   000956  2A0F               	incf	(main@visitante+1)^0,f,c
   441   000958                     
   442                           ;newmain.c: 83:                 lcd_cmd(0x86);
   443   000958  0E86               	movlw	134
   444   00095A  ECF1  F005         	call	_lcd_cmd
   445   00095E                     
   446                           ;newmain.c: 84:                 lcd_numb(casa);
   447   00095E  C00C  F007         	movff	main@casa,lcd_numb@str
   448   000962  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   449   000966  ECE8  F004         	call	_lcd_numb	;wreg free
   450   00096A                     
   451                           ;newmain.c: 86:                 lcd_cmd(0xcb);
   452   00096A  0ECB               	movlw	203
   453   00096C  ECF1  F005         	call	_lcd_cmd
   454   000970                     
   455                           ;newmain.c: 87:                 lcd_numb(visitante);
   456   000970  C00E  F007         	movff	main@visitante,lcd_numb@str
   457   000974  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   458   000978  ECE8  F004         	call	_lcd_numb	;wreg free
   459   00097C                     
   460                           ;newmain.c: 88:                 PORTBbits.RB4 = 0b01110011;
   461   00097C  8881               	bsf	129,4,c	;volatile
   462   00097E                     
   463                           ;newmain.c: 89:                 PORTBbits.RB7 = 0x00;
   464   00097E  9E81               	bcf	129,7,c	;volatile
   465                           
   466                           ;newmain.c: 90:             }
   467   000980  EFCD  F004         	goto	l102
   468   000984                     l1151:
   469                           
   470                           ;newmain.c: 92:             {;newmain.c: 93:                 lcd_cmd(0x01);
   471   000984  0E01               	movlw	1
   472   000986  ECF1  F005         	call	_lcd_cmd
   473   00098A                     
   474                           ;newmain.c: 94:                 lcd_str("VISITANTE VENCEU");
   475   00098A  0E01               	movlw	low STR_4
   476   00098C  6E07               	movwf	lcd_str@str^0,c
   477   00098E  0E08               	movlw	high STR_4
   478   000990  6E08               	movwf	(lcd_str@str+1)^0,c
   479   000992  EC90  F005         	call	_lcd_str	;wreg free
   480                           
   481                           ;newmain.c: 95:                 break;
   482   000996  EFE6  F004         	goto	l107
   483   00099A                     l102:
   484                           
   485                           ;newmain.c: 98:         if (PORTBbits.RB3 == 0)
   486   00099A  B681               	btfsc	129,3,c	;volatile
   487   00099C  EFD2  F004         	goto	u361
   488   0009A0  EFD4  F004         	goto	u360
   489   0009A4                     u361:
   490   0009A4  EF5B  F004         	goto	l97
   491   0009A8                     u360:
   492   0009A8                     
   493                           ;newmain.c: 99:         {;newmain.c: 100:             lcd_cmd(0x01);
   494   0009A8  0E01               	movlw	1
   495   0009AA  ECF1  F005         	call	_lcd_cmd
   496   0009AE                     
   497                           ;newmain.c: 101:             lcd_str("RESET");
   498   0009AE  0E31               	movlw	low STR_5
   499   0009B0  6E07               	movwf	lcd_str@str^0,c
   500   0009B2  0E08               	movlw	high STR_5
   501   0009B4  6E08               	movwf	(lcd_str@str+1)^0,c
   502   0009B6  EC90  F005         	call	_lcd_str	;wreg free
   503   0009BA                     
   504                           ;newmain.c: 102:             atraso_ms(100);
   505   0009BA  0E00               	movlw	0
   506   0009BC  6E02               	movwf	(atraso_ms@valor+1)^0,c
   507   0009BE  0E64               	movlw	100
   508   0009C0  6E01               	movwf	atraso_ms@valor^0,c
   509   0009C2  ECB8  F005         	call	_atraso_ms	;wreg free
   510   0009C6                     
   511                           ;newmain.c: 103:             lcd_cmd(0x01);
   512   0009C6  0E01               	movlw	1
   513   0009C8  ECF1  F005         	call	_lcd_cmd
   514   0009CC                     l107:
   515   0009CC  EF00  F000         	goto	start
   516   0009D0                     __end_of_main:
   517                           	callstack 0
   518                           
   519 ;; *************** function _lcd_str *****************
   520 ;; Defined at:
   521 ;;		line 79 in file "lcd.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;  str             2    6[COMRAM] PTR const unsigned char 
   524 ;;		 -> STR_5(6), STR_4(17), STR_3(12), STR_2(12), 
   525 ;;		 -> STR_1(7), 
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  i               1   10[COMRAM] unsigned char 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : 0/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   537 ;;      Params:         2       0       0       0       0       0       0       0       0
   538 ;;      Locals:         1       0       0       0       0       0       0       0       0
   539 ;;      Temps:          2       0       0       0       0       0       0       0       0
   540 ;;      Totals:         5       0       0       0       0       0       0       0       0
   541 ;;Total ram usage:        5 bytes
   542 ;; Hardware stack levels used: 1
   543 ;; Hardware stack levels required when called: 2
   544 ;; This function calls:
   545 ;;		_lcd_dat
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text1
   552   000B20                     __ptext1:
   553                           	callstack 0
   554   000B20                     _lcd_str:
   555                           	callstack 28
   556   000B20                     
   557                           ;lcd.c: 79: void lcd_str(const char* str);lcd.c: 80: {;lcd.c: 81:  unsigned char i=0;
   558   000B20  0E00               	movlw	0
   559   000B22  6E0B               	movwf	lcd_str@i^0,c
   560                           
   561                           ;lcd.c: 83:  while(str[i] != '\0' )
   562   000B24  EFA3  F005         	goto	l1035
   563   000B28                     l1031:
   564                           
   565                           ;lcd.c: 84:  {;lcd.c: 85:    lcd_dat(str[i]);
   566   000B28  500B               	movf	lcd_str@i^0,w,c
   567   000B2A  2407               	addwf	lcd_str@str^0,w,c
   568   000B2C  6E09               	movwf	??_lcd_str^0,c
   569   000B2E  0E00               	movlw	0
   570   000B30  2008               	addwfc	(lcd_str@str+1)^0,w,c
   571   000B32  6E0A               	movwf	(??_lcd_str+1)^0,c
   572   000B34  C009  FFF6         	movff	??_lcd_str,tblptrl
   573   000B38  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   574   000B3C                     	if	0	;tblptru may be non-zero
   575   000B3C                     	endif
   576   000B3C                     	if	0	;tblptru may be non-zero
   577   000B3C                     	endif
   578   000B3C  0008               	tblrd		*
   579   000B3E  50F5               	movf	tablat,w,c
   580   000B40  ECDC  F005         	call	_lcd_dat
   581   000B44                     
   582                           ;lcd.c: 86:    i++;
   583   000B44  2A0B               	incf	lcd_str@i^0,f,c
   584   000B46                     l1035:
   585                           
   586                           ;lcd.c: 83:  while(str[i] != '\0' )
   587   000B46  500B               	movf	lcd_str@i^0,w,c
   588   000B48  2407               	addwf	lcd_str@str^0,w,c
   589   000B4A  6E09               	movwf	??_lcd_str^0,c
   590   000B4C  0E00               	movlw	0
   591   000B4E  2008               	addwfc	(lcd_str@str+1)^0,w,c
   592   000B50  6E0A               	movwf	(??_lcd_str+1)^0,c
   593   000B52  C009  FFF6         	movff	??_lcd_str,tblptrl
   594   000B56  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   595   000B5A                     	if	0	;tblptru may be non-zero
   596   000B5A                     	endif
   597   000B5A                     	if	0	;tblptru may be non-zero
   598   000B5A                     	endif
   599   000B5A  0008               	tblrd		*
   600   000B5C  50F5               	movf	tablat,w,c
   601   000B5E  0900               	iorlw	0
   602   000B60  A4D8               	btfss	status,2,c
   603   000B62  EFB5  F005         	goto	u211
   604   000B66  EFB7  F005         	goto	u210
   605   000B6A                     u211:
   606   000B6A  EF94  F005         	goto	l1031
   607   000B6E                     u210:
   608   000B6E  0012               	return		;funcret
   609   000B70                     __end_of_lcd_str:
   610                           	callstack 0
   611                           
   612 ;; *************** function _lcd_numb *****************
   613 ;; Defined at:
   614 ;;		line 90 in file "lcd.c"
   615 ;; Parameters:    Size  Location     Type
   616 ;;  str             2    6[COMRAM] const int 
   617 ;; Auto vars:     Size  Location     Type
   618 ;;  num_placar      1    8[COMRAM] unsigned char 
   619 ;; Return value:  Size  Location     Type
   620 ;;                  1    wreg      void 
   621 ;; Registers used:
   622 ;;		wreg, status,2, status,0, cstack
   623 ;; Tracked objects:
   624 ;;		On entry : 0/0
   625 ;;		On exit  : 0/0
   626 ;;		Unchanged: 0/0
   627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   628 ;;      Params:         2       0       0       0       0       0       0       0       0
   629 ;;      Locals:         1       0       0       0       0       0       0       0       0
   630 ;;      Temps:          0       0       0       0       0       0       0       0       0
   631 ;;      Totals:         3       0       0       0       0       0       0       0       0
   632 ;;Total ram usage:        3 bytes
   633 ;; Hardware stack levels used: 1
   634 ;; Hardware stack levels required when called: 2
   635 ;; This function calls:
   636 ;;		_lcd_dat
   637 ;; This function is called by:
   638 ;;		_main
   639 ;; This function uses a non-reentrant model
   640 ;;
   641                           
   642                           	psect	text2
   643   0009D0                     __ptext2:
   644                           	callstack 0
   645   0009D0                     _lcd_numb:
   646                           	callstack 28
   647   0009D0                     
   648                           ;lcd.c: 92:     char num_placar;;lcd.c: 94:     if(0 == str)
   649   0009D0  5007               	movf	lcd_numb@str^0,w,c
   650   0009D2  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   651   0009D4  A4D8               	btfss	status,2,c
   652   0009D6  EFEF  F004         	goto	u221
   653   0009DA  EFF1  F004         	goto	u220
   654   0009DE                     u221:
   655   0009DE  EFF3  F004         	goto	l1041
   656   0009E2                     u220:
   657   0009E2                     
   658                           ;lcd.c: 95:     {;lcd.c: 96:         num_placar = '0';
   659   0009E2  0E30               	movlw	48
   660   0009E4  6E09               	movwf	lcd_numb@num_placar^0,c
   661   0009E6                     l1041:
   662                           
   663                           ;lcd.c: 98:     if(1 == str)
   664   0009E6  0407               	decf	lcd_numb@str^0,w,c
   665   0009E8  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   666   0009EA  A4D8               	btfss	status,2,c
   667   0009EC  EFFA  F004         	goto	u231
   668   0009F0  EFFC  F004         	goto	u230
   669   0009F4                     u231:
   670   0009F4  EFFE  F004         	goto	l1045
   671   0009F8                     u230:
   672   0009F8                     
   673                           ;lcd.c: 99:     {;lcd.c: 100:         num_placar = '1';
   674   0009F8  0E31               	movlw	49
   675   0009FA  6E09               	movwf	lcd_numb@num_placar^0,c
   676   0009FC                     l1045:
   677                           
   678                           ;lcd.c: 102:     if(2 == str)
   679   0009FC  0E02               	movlw	2
   680   0009FE  1807               	xorwf	lcd_numb@str^0,w,c
   681   000A00  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   682   000A02  A4D8               	btfss	status,2,c
   683   000A04  EF06  F005         	goto	u241
   684   000A08  EF08  F005         	goto	u240
   685   000A0C                     u241:
   686   000A0C  EF0A  F005         	goto	l1049
   687   000A10                     u240:
   688   000A10                     
   689                           ;lcd.c: 103:     {;lcd.c: 104:         num_placar = '2';
   690   000A10  0E32               	movlw	50
   691   000A12  6E09               	movwf	lcd_numb@num_placar^0,c
   692   000A14                     l1049:
   693                           
   694                           ;lcd.c: 106:     if(3 == str)
   695   000A14  0E03               	movlw	3
   696   000A16  1807               	xorwf	lcd_numb@str^0,w,c
   697   000A18  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   698   000A1A  A4D8               	btfss	status,2,c
   699   000A1C  EF12  F005         	goto	u251
   700   000A20  EF14  F005         	goto	u250
   701   000A24                     u251:
   702   000A24  EF16  F005         	goto	l1053
   703   000A28                     u250:
   704   000A28                     
   705                           ;lcd.c: 107:     {;lcd.c: 108:         num_placar = '3';
   706   000A28  0E33               	movlw	51
   707   000A2A  6E09               	movwf	lcd_numb@num_placar^0,c
   708   000A2C                     l1053:
   709                           
   710                           ;lcd.c: 110:     if(4 == str)
   711   000A2C  0E04               	movlw	4
   712   000A2E  1807               	xorwf	lcd_numb@str^0,w,c
   713   000A30  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   714   000A32  A4D8               	btfss	status,2,c
   715   000A34  EF1E  F005         	goto	u261
   716   000A38  EF20  F005         	goto	u260
   717   000A3C                     u261:
   718   000A3C  EF22  F005         	goto	l1057
   719   000A40                     u260:
   720   000A40                     
   721                           ;lcd.c: 111:     {;lcd.c: 112:         num_placar = '4';
   722   000A40  0E34               	movlw	52
   723   000A42  6E09               	movwf	lcd_numb@num_placar^0,c
   724   000A44                     l1057:
   725                           
   726                           ;lcd.c: 114:     if(5 == str)
   727   000A44  0E05               	movlw	5
   728   000A46  1807               	xorwf	lcd_numb@str^0,w,c
   729   000A48  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   730   000A4A  A4D8               	btfss	status,2,c
   731   000A4C  EF2A  F005         	goto	u271
   732   000A50  EF2C  F005         	goto	u270
   733   000A54                     u271:
   734   000A54  EF2E  F005         	goto	l1061
   735   000A58                     u270:
   736   000A58                     
   737                           ;lcd.c: 115:     {;lcd.c: 116:         num_placar = '5';
   738   000A58  0E35               	movlw	53
   739   000A5A  6E09               	movwf	lcd_numb@num_placar^0,c
   740   000A5C                     l1061:
   741                           
   742                           ;lcd.c: 118:     if(6 == str)
   743   000A5C  0E06               	movlw	6
   744   000A5E  1807               	xorwf	lcd_numb@str^0,w,c
   745   000A60  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   746   000A62  A4D8               	btfss	status,2,c
   747   000A64  EF36  F005         	goto	u281
   748   000A68  EF38  F005         	goto	u280
   749   000A6C                     u281:
   750   000A6C  EF3A  F005         	goto	l1065
   751   000A70                     u280:
   752   000A70                     
   753                           ;lcd.c: 119:     {;lcd.c: 120:         num_placar = '6';
   754   000A70  0E36               	movlw	54
   755   000A72  6E09               	movwf	lcd_numb@num_placar^0,c
   756   000A74                     l1065:
   757                           
   758                           ;lcd.c: 122:     if(7 == str)
   759   000A74  0E07               	movlw	7
   760   000A76  1807               	xorwf	lcd_numb@str^0,w,c
   761   000A78  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   762   000A7A  A4D8               	btfss	status,2,c
   763   000A7C  EF42  F005         	goto	u291
   764   000A80  EF44  F005         	goto	u290
   765   000A84                     u291:
   766   000A84  EF46  F005         	goto	l1069
   767   000A88                     u290:
   768   000A88                     
   769                           ;lcd.c: 123:     {;lcd.c: 124:         num_placar = '7';
   770   000A88  0E37               	movlw	55
   771   000A8A  6E09               	movwf	lcd_numb@num_placar^0,c
   772   000A8C                     l1069:
   773                           
   774                           ;lcd.c: 126:     if(8 == str)
   775   000A8C  0E08               	movlw	8
   776   000A8E  1807               	xorwf	lcd_numb@str^0,w,c
   777   000A90  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   778   000A92  A4D8               	btfss	status,2,c
   779   000A94  EF4E  F005         	goto	u301
   780   000A98  EF50  F005         	goto	u300
   781   000A9C                     u301:
   782   000A9C  EF52  F005         	goto	l1073
   783   000AA0                     u300:
   784   000AA0                     
   785                           ;lcd.c: 127:     {;lcd.c: 128:         num_placar = '8';
   786   000AA0  0E38               	movlw	56
   787   000AA2  6E09               	movwf	lcd_numb@num_placar^0,c
   788   000AA4                     l1073:
   789                           
   790                           ;lcd.c: 131:     if(9 == str)
   791   000AA4  0E09               	movlw	9
   792   000AA6  1807               	xorwf	lcd_numb@str^0,w,c
   793   000AA8  1008               	iorwf	(lcd_numb@str+1)^0,w,c
   794   000AAA  A4D8               	btfss	status,2,c
   795   000AAC  EF5A  F005         	goto	u311
   796   000AB0  EF5C  F005         	goto	u310
   797   000AB4                     u311:
   798   000AB4  EF5E  F005         	goto	l1077
   799   000AB8                     u310:
   800   000AB8                     
   801                           ;lcd.c: 132:     {;lcd.c: 133:         num_placar = '9';
   802   000AB8  0E39               	movlw	57
   803   000ABA  6E09               	movwf	lcd_numb@num_placar^0,c
   804   000ABC                     l1077:
   805                           
   806                           ;lcd.c: 135:     lcd_dat(num_placar);
   807   000ABC  5009               	movf	lcd_numb@num_placar^0,w,c
   808   000ABE  ECDC  F005         	call	_lcd_dat
   809   000AC2  0012               	return		;funcret
   810   000AC4                     __end_of_lcd_numb:
   811                           	callstack 0
   812                           
   813 ;; *************** function _lcd_dat *****************
   814 ;; Defined at:
   815 ;;		line 49 in file "lcd.c"
   816 ;; Parameters:    Size  Location     Type
   817 ;;  val             1    wreg     unsigned char 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  val             1    5[COMRAM] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  1    wreg      void 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0, cstack
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   829 ;;      Params:         0       0       0       0       0       0       0       0       0
   830 ;;      Locals:         1       0       0       0       0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0       0       0
   832 ;;      Totals:         1       0       0       0       0       0       0       0       0
   833 ;;Total ram usage:        1 bytes
   834 ;; Hardware stack levels used: 1
   835 ;; Hardware stack levels required when called: 1
   836 ;; This function calls:
   837 ;;		_atraso_ms
   838 ;;		_lcd_wr
   839 ;; This function is called by:
   840 ;;		_lcd_str
   841 ;;		_lcd_numb
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text3
   846   000BB8                     __ptext3:
   847                           	callstack 0
   848   000BB8                     _lcd_dat:
   849                           	callstack 28
   850                           
   851                           ;incstack = 0
   852                           ;lcd_dat@val stored from wreg
   853   000BB8  6E06               	movwf	lcd_dat@val^0,c
   854   000BBA                     
   855                           ;lcd.c: 49: void lcd_dat(unsigned char val);lcd.c: 50: {;lcd.c: 51:  PORTEbits.RE1=1;
   856   000BBA  8284               	bsf	132,1,c	;volatile
   857   000BBC                     
   858                           ;lcd.c: 52:         lcd_wr(val);
   859   000BBC  5006               	movf	lcd_dat@val^0,w,c
   860   000BBE  EC0B  F006         	call	_lcd_wr
   861   000BC2                     
   862                           ;lcd.c: 53:         PORTEbits.RE0=1;
   863   000BC2  8084               	bsf	132,0,c	;volatile
   864   000BC4                     
   865                           ;lcd.c: 54:         atraso_ms(3);
   866   000BC4  0E00               	movlw	0
   867   000BC6  6E02               	movwf	(atraso_ms@valor+1)^0,c
   868   000BC8  0E03               	movlw	3
   869   000BCA  6E01               	movwf	atraso_ms@valor^0,c
   870   000BCC  ECB8  F005         	call	_atraso_ms	;wreg free
   871   000BD0                     
   872                           ;lcd.c: 55:         PORTEbits.RE1=0;
   873   000BD0  9284               	bcf	132,1,c	;volatile
   874   000BD2                     
   875                           ;lcd.c: 56:         atraso_ms(3);
   876   000BD2  0E00               	movlw	0
   877   000BD4  6E02               	movwf	(atraso_ms@valor+1)^0,c
   878   000BD6  0E03               	movlw	3
   879   000BD8  6E01               	movwf	atraso_ms@valor^0,c
   880   000BDA  ECB8  F005         	call	_atraso_ms	;wreg free
   881   000BDE                     
   882                           ;lcd.c: 57:  PORTEbits.RE1=1;
   883   000BDE  8284               	bsf	132,1,c	;volatile
   884   000BE0  0012               	return		;funcret
   885   000BE2                     __end_of_lcd_dat:
   886                           	callstack 0
   887                           
   888 ;; *************** function _lcd_init *****************
   889 ;; Defined at:
   890 ;;		line 60 in file "lcd.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, status,2, status,0, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   904 ;;      Params:         0       0       0       0       0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0       0       0       0       0
   907 ;;      Totals:         0       0       0       0       0       0       0       0       0
   908 ;;Total ram usage:        0 bytes
   909 ;; Hardware stack levels used: 1
   910 ;; Hardware stack levels required when called: 2
   911 ;; This function calls:
   912 ;;		_atraso_ms
   913 ;;		_lcd_cmd
   914 ;; This function is called by:
   915 ;;		_main
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text4
   920   000AC4                     __ptext4:
   921                           	callstack 0
   922   000AC4                     _lcd_init:
   923                           	callstack 28
   924   000AC4                     
   925                           ;lcd.c: 62:  PORTEbits.RE1=0;
   926   000AC4  9284               	bcf	132,1,c	;volatile
   927                           
   928                           ;lcd.c: 63:  PORTEbits.RE0=0;
   929   000AC6  9084               	bcf	132,0,c	;volatile
   930   000AC8                     
   931                           ;lcd.c: 64:  atraso_ms(20);
   932   000AC8  0E00               	movlw	0
   933   000ACA  6E02               	movwf	(atraso_ms@valor+1)^0,c
   934   000ACC  0E14               	movlw	20
   935   000ACE  6E01               	movwf	atraso_ms@valor^0,c
   936   000AD0  ECB8  F005         	call	_atraso_ms	;wreg free
   937   000AD4                     
   938                           ;lcd.c: 65:  PORTEbits.RE1=1;
   939   000AD4  8284               	bsf	132,1,c	;volatile
   940                           
   941                           ;lcd.c: 67:  lcd_cmd(0x38);
   942   000AD6  0E38               	movlw	56
   943   000AD8  ECF1  F005         	call	_lcd_cmd
   944                           
   945                           ;lcd.c: 68:  atraso_ms(5);
   946   000ADC  0E00               	movlw	0
   947   000ADE  6E02               	movwf	(atraso_ms@valor+1)^0,c
   948   000AE0  0E05               	movlw	5
   949   000AE2  6E01               	movwf	atraso_ms@valor^0,c
   950   000AE4  ECB8  F005         	call	_atraso_ms	;wreg free
   951                           
   952                           ;lcd.c: 69:  lcd_cmd(0x38);
   953   000AE8  0E38               	movlw	56
   954   000AEA  ECF1  F005         	call	_lcd_cmd
   955                           
   956                           ;lcd.c: 70:         atraso_ms(1);
   957   000AEE  0E00               	movlw	0
   958   000AF0  6E02               	movwf	(atraso_ms@valor+1)^0,c
   959   000AF2  0E01               	movlw	1
   960   000AF4  6E01               	movwf	atraso_ms@valor^0,c
   961   000AF6  ECB8  F005         	call	_atraso_ms	;wreg free
   962                           
   963                           ;lcd.c: 71:  lcd_cmd(0x38);
   964   000AFA  0E38               	movlw	56
   965   000AFC  ECF1  F005         	call	_lcd_cmd
   966                           
   967                           ;lcd.c: 72:  lcd_cmd(0x08);
   968   000B00  0E08               	movlw	8
   969   000B02  ECF1  F005         	call	_lcd_cmd
   970                           
   971                           ;lcd.c: 73:  lcd_cmd(0x0F);
   972   000B06  0E0F               	movlw	15
   973   000B08  ECF1  F005         	call	_lcd_cmd
   974                           
   975                           ;lcd.c: 74:  lcd_cmd(0x01);
   976   000B0C  0E01               	movlw	1
   977   000B0E  ECF1  F005         	call	_lcd_cmd
   978                           
   979                           ;lcd.c: 75:  lcd_cmd(0x38);
   980   000B12  0E38               	movlw	56
   981   000B14  ECF1  F005         	call	_lcd_cmd
   982                           
   983                           ;lcd.c: 76:         lcd_cmd(0x80);
   984   000B18  0E80               	movlw	128
   985   000B1A  ECF1  F005         	call	_lcd_cmd
   986   000B1E  0012               	return		;funcret
   987   000B20                     __end_of_lcd_init:
   988                           	callstack 0
   989                           
   990 ;; *************** function _lcd_cmd *****************
   991 ;; Defined at:
   992 ;;		line 38 in file "lcd.c"
   993 ;; Parameters:    Size  Location     Type
   994 ;;  val             1    wreg     unsigned char 
   995 ;; Auto vars:     Size  Location     Type
   996 ;;  val             1    5[COMRAM] unsigned char 
   997 ;; Return value:  Size  Location     Type
   998 ;;                  1    wreg      void 
   999 ;; Registers used:
  1000 ;;		wreg, status,2, status,0, cstack
  1001 ;; Tracked objects:
  1002 ;;		On entry : 0/0
  1003 ;;		On exit  : 0/0
  1004 ;;		Unchanged: 0/0
  1005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1006 ;;      Params:         0       0       0       0       0       0       0       0       0
  1007 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1009 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1010 ;;Total ram usage:        1 bytes
  1011 ;; Hardware stack levels used: 1
  1012 ;; Hardware stack levels required when called: 1
  1013 ;; This function calls:
  1014 ;;		_atraso_ms
  1015 ;;		_lcd_wr
  1016 ;; This function is called by:
  1017 ;;		_lcd_init
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022                           	psect	text5
  1023   000BE2                     __ptext5:
  1024                           	callstack 0
  1025   000BE2                     _lcd_cmd:
  1026                           	callstack 28
  1027                           
  1028                           ;incstack = 0
  1029                           ;lcd_cmd@val stored from wreg
  1030   000BE2  6E06               	movwf	lcd_cmd@val^0,c
  1031   000BE4                     
  1032                           ;lcd.c: 38: void lcd_cmd(unsigned char val);lcd.c: 39: {;lcd.c: 40:  PORTEbits.RE1=1;
  1033   000BE4  8284               	bsf	132,1,c	;volatile
  1034   000BE6                     
  1035                           ;lcd.c: 41:         lcd_wr(val);
  1036   000BE6  5006               	movf	lcd_cmd@val^0,w,c
  1037   000BE8  EC0B  F006         	call	_lcd_wr
  1038   000BEC                     
  1039                           ;lcd.c: 42:         PORTEbits.RE0=0;
  1040   000BEC  9084               	bcf	132,0,c	;volatile
  1041   000BEE                     
  1042                           ;lcd.c: 43:         atraso_ms(3);
  1043   000BEE  0E00               	movlw	0
  1044   000BF0  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1045   000BF2  0E03               	movlw	3
  1046   000BF4  6E01               	movwf	atraso_ms@valor^0,c
  1047   000BF6  ECB8  F005         	call	_atraso_ms	;wreg free
  1048   000BFA                     
  1049                           ;lcd.c: 44:         PORTEbits.RE1=0;
  1050   000BFA  9284               	bcf	132,1,c	;volatile
  1051   000BFC                     
  1052                           ;lcd.c: 45:         atraso_ms(3);
  1053   000BFC  0E00               	movlw	0
  1054   000BFE  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1055   000C00  0E03               	movlw	3
  1056   000C02  6E01               	movwf	atraso_ms@valor^0,c
  1057   000C04  ECB8  F005         	call	_atraso_ms	;wreg free
  1058   000C08                     
  1059                           ;lcd.c: 46:  PORTEbits.RE1=1;
  1060   000C08  8284               	bsf	132,1,c	;volatile
  1061   000C0A  0012               	return		;funcret
  1062   000C0C                     __end_of_lcd_cmd:
  1063                           	callstack 0
  1064                           
  1065 ;; *************** function _lcd_wr *****************
  1066 ;; Defined at:
  1067 ;;		line 33 in file "lcd.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  val             1    wreg     unsigned char 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  val             1    0[COMRAM] unsigned char 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1081 ;;      Params:         0       0       0       0       0       0       0       0       0
  1082 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1084 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1085 ;;Total ram usage:        1 bytes
  1086 ;; Hardware stack levels used: 1
  1087 ;; This function calls:
  1088 ;;		Nothing
  1089 ;; This function is called by:
  1090 ;;		_lcd_cmd
  1091 ;;		_lcd_dat
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095                           	psect	text6
  1096   000C16                     __ptext6:
  1097                           	callstack 0
  1098   000C16                     _lcd_wr:
  1099                           	callstack 28
  1100                           
  1101                           ;incstack = 0
  1102                           ;lcd_wr@val stored from wreg
  1103   000C16  6E01               	movwf	lcd_wr@val^0,c
  1104   000C18                     
  1105                           ;lcd.c: 33: void lcd_wr(unsigned char val);lcd.c: 34: {;lcd.c: 35:   PORTD=val;
  1106   000C18  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1107   000C1C  0012               	return		;funcret
  1108   000C1E                     __end_of_lcd_wr:
  1109                           	callstack 0
  1110                           
  1111 ;; *************** function _atraso_ms *****************
  1112 ;; Defined at:
  1113 ;;		line 26 in file "atraso.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;  valor           2    0[COMRAM] unsigned int 
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  i               2    2[COMRAM] unsigned int 
  1118 ;;  j               1    4[COMRAM] unsigned char 
  1119 ;; Return value:  Size  Location     Type
  1120 ;;                  1    wreg      void 
  1121 ;; Registers used:
  1122 ;;		wreg, status,2, status,0
  1123 ;; Tracked objects:
  1124 ;;		On entry : 0/0
  1125 ;;		On exit  : 0/0
  1126 ;;		Unchanged: 0/0
  1127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1128 ;;      Params:         2       0       0       0       0       0       0       0       0
  1129 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1131 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1132 ;;Total ram usage:        5 bytes
  1133 ;; Hardware stack levels used: 1
  1134 ;; This function calls:
  1135 ;;		Nothing
  1136 ;; This function is called by:
  1137 ;;		_lcd_cmd
  1138 ;;		_lcd_dat
  1139 ;;		_lcd_init
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text7
  1145   000B70                     __ptext7:
  1146                           	callstack 0
  1147   000B70                     _atraso_ms:
  1148                           	callstack 28
  1149   000B70                     
  1150                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1151   000B70  0E00               	movlw	0
  1152   000B72  6E04               	movwf	(atraso_ms@i+1)^0,c
  1153   000B74  0E00               	movlw	0
  1154   000B76  6E03               	movwf	atraso_ms@i^0,c
  1155   000B78  EFD0  F005         	goto	l993
  1156   000B7C                     l981:
  1157                           
  1158                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1159   000B7C  0E00               	movlw	0
  1160   000B7E  6E05               	movwf	atraso_ms@j^0,c
  1161   000B80                     l5:
  1162   000B80  F000               	nop		;# 
  1163   000B82  F000               	nop		;# 
  1164   000B84  F000               	nop		;# 
  1165   000B86  F000               	nop		;# 
  1166   000B88  F000               	nop		;# 
  1167   000B8A                     
  1168                           ;atraso.c: 41:    }
  1169   000B8A  2A05               	incf	atraso_ms@j^0,f,c
  1170   000B8C  0EC7               	movlw	199
  1171   000B8E  6405               	cpfsgt	atraso_ms@j^0,c
  1172   000B90  EFCC  F005         	goto	u191
  1173   000B94  EFCE  F005         	goto	u190
  1174   000B98                     u191:
  1175   000B98  EFC0  F005         	goto	l5
  1176   000B9C                     u190:
  1177   000B9C                     
  1178                           ;atraso.c: 42:  }
  1179   000B9C  4A03               	infsnz	atraso_ms@i^0,f,c
  1180   000B9E  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1181   000BA0                     l993:
  1182   000BA0  5001               	movf	atraso_ms@valor^0,w,c
  1183   000BA2  5C03               	subwf	atraso_ms@i^0,w,c
  1184   000BA4  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1185   000BA6  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1186   000BA8  A0D8               	btfss	status,0,c
  1187   000BAA  EFD9  F005         	goto	u201
  1188   000BAE  EFDB  F005         	goto	u200
  1189   000BB2                     u201:
  1190   000BB2  EFBE  F005         	goto	l981
  1191   000BB6                     u200:
  1192   000BB6  0012               	return		;funcret
  1193   000BB8                     __end_of_atraso_ms:
  1194                           	callstack 0
  1195                           
  1196                           	psect	rparam
  1197   000000                     
  1198                           	psect	idloc
  1199                           
  1200                           ;Config register IDLOC0 @ 0x200000
  1201                           ;	unspecified, using default values
  1202   200000                     	org	2097152
  1203   200000  FF                 	db	255
  1204                           
  1205                           ;Config register IDLOC1 @ 0x200001
  1206                           ;	unspecified, using default values
  1207   200001                     	org	2097153
  1208   200001  FF                 	db	255
  1209                           
  1210                           ;Config register IDLOC2 @ 0x200002
  1211                           ;	unspecified, using default values
  1212   200002                     	org	2097154
  1213   200002  FF                 	db	255
  1214                           
  1215                           ;Config register IDLOC3 @ 0x200003
  1216                           ;	unspecified, using default values
  1217   200003                     	org	2097155
  1218   200003  FF                 	db	255
  1219                           
  1220                           ;Config register IDLOC4 @ 0x200004
  1221                           ;	unspecified, using default values
  1222   200004                     	org	2097156
  1223   200004  FF                 	db	255
  1224                           
  1225                           ;Config register IDLOC5 @ 0x200005
  1226                           ;	unspecified, using default values
  1227   200005                     	org	2097157
  1228   200005  FF                 	db	255
  1229                           
  1230                           ;Config register IDLOC6 @ 0x200006
  1231                           ;	unspecified, using default values
  1232   200006                     	org	2097158
  1233   200006  FF                 	db	255
  1234                           
  1235                           ;Config register IDLOC7 @ 0x200007
  1236                           ;	unspecified, using default values
  1237   200007                     	org	2097159
  1238   200007  FF                 	db	255
  1239                           
  1240                           	psect	config
  1241                           
  1242                           ;Config register CONFIG1L @ 0x300000
  1243                           ;	PLL Prescaler Selection bits
  1244                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1245                           ;	System Clock Postscaler Selection bits
  1246                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1247                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1248                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1249   300000                     	org	3145728
  1250   300000  29                 	db	41
  1251                           
  1252                           ;Config register CONFIG1H @ 0x300001
  1253                           ;	Oscillator Selection bits
  1254                           ;	FOSC = HS, HS oscillator (HS)
  1255                           ;	Fail-Safe Clock Monitor Enable bit
  1256                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1257                           ;	Internal/External Oscillator Switchover bit
  1258                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1259   300001                     	org	3145729
  1260   300001  0C                 	db	12
  1261                           
  1262                           ;Config register CONFIG2L @ 0x300002
  1263                           ;	Power-up Timer Enable bit
  1264                           ;	PWRT = ON, PWRT enabled
  1265                           ;	Brown-out Reset Enable bits
  1266                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1267                           ;	Brown-out Reset Voltage bits
  1268                           ;	BORV = 3, Minimum setting 2.05V
  1269                           ;	USB Voltage Regulator Enable bit
  1270                           ;	VREGEN = OFF, USB voltage regulator disabled
  1271   300002                     	org	3145730
  1272   300002  18                 	db	24
  1273                           
  1274                           ;Config register CONFIG2H @ 0x300003
  1275                           ;	Watchdog Timer Enable bit
  1276                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1277                           ;	Watchdog Timer Postscale Select bits
  1278                           ;	WDTPS = 32768, 1:32768
  1279   300003                     	org	3145731
  1280   300003  1E                 	db	30
  1281                           
  1282                           ; Padding undefined space
  1283   300004                     	org	3145732
  1284   300004  FF                 	db	255
  1285                           
  1286                           ;Config register CONFIG3H @ 0x300005
  1287                           ;	CCP2 MUX bit
  1288                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1289                           ;	PORTB A/D Enable bit
  1290                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1291                           ;	Low-Power Timer 1 Oscillator Enable bit
  1292                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1293                           ;	MCLR Pin Enable bit
  1294                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1295   300005                     	org	3145733
  1296   300005  81                 	db	129
  1297                           
  1298                           ;Config register CONFIG4L @ 0x300006
  1299                           ;	Stack Full/Underflow Reset Enable bit
  1300                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1301                           ;	Single-Supply ICSP Enable bit
  1302                           ;	LVP = OFF, Single-Supply ICSP disabled
  1303                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1304                           ;	ICPRT = OFF, ICPORT disabled
  1305                           ;	Extended Instruction Set Enable bit
  1306                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1307                           ;	Background Debugger Enable bit
  1308                           ;	DEBUG = 0x1, unprogrammed default
  1309   300006                     	org	3145734
  1310   300006  80                 	db	128
  1311                           
  1312                           ; Padding undefined space
  1313   300007                     	org	3145735
  1314   300007  FF                 	db	255
  1315                           
  1316                           ;Config register CONFIG5L @ 0x300008
  1317                           ;	Code Protection bit
  1318                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1319                           ;	Code Protection bit
  1320                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1321                           ;	Code Protection bit
  1322                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1323                           ;	Code Protection bit
  1324                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1325   300008                     	org	3145736
  1326   300008  0F                 	db	15
  1327                           
  1328                           ;Config register CONFIG5H @ 0x300009
  1329                           ;	Boot Block Code Protection bit
  1330                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1331                           ;	Data EEPROM Code Protection bit
  1332                           ;	CPD = OFF, Data EEPROM is not code-protected
  1333   300009                     	org	3145737
  1334   300009  C0                 	db	192
  1335                           
  1336                           ;Config register CONFIG6L @ 0x30000A
  1337                           ;	Write Protection bit
  1338                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1339                           ;	Write Protection bit
  1340                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1341                           ;	Write Protection bit
  1342                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1343                           ;	Write Protection bit
  1344                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1345   30000A                     	org	3145738
  1346   30000A  0F                 	db	15
  1347                           
  1348                           ;Config register CONFIG6H @ 0x30000B
  1349                           ;	Configuration Register Write Protection bit
  1350                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1351                           ;	Boot Block Write Protection bit
  1352                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1353                           ;	Data EEPROM Write Protection bit
  1354                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1355   30000B                     	org	3145739
  1356   30000B  E0                 	db	224
  1357                           
  1358                           ;Config register CONFIG7L @ 0x30000C
  1359                           ;	Table Read Protection bit
  1360                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1361                           ;	Table Read Protection bit
  1362                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1363                           ;	Table Read Protection bit
  1364                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1365                           ;	Table Read Protection bit
  1366                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1367   30000C                     	org	3145740
  1368   30000C  0F                 	db	15
  1369                           
  1370                           ;Config register CONFIG7H @ 0x30000D
  1371                           ;	Boot Block Table Read Protection bit
  1372                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1373   30000D                     	org	3145741
  1374   30000D  40                 	db	64
  1375                           tosu	equ	0xFFF
  1376                           tosh	equ	0xFFE
  1377                           tosl	equ	0xFFD
  1378                           stkptr	equ	0xFFC
  1379                           pclatu	equ	0xFFB
  1380                           pclath	equ	0xFFA
  1381                           pcl	equ	0xFF9
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           prodh	equ	0xFF4
  1387                           prodl	equ	0xFF3
  1388                           indf0	equ	0xFEF
  1389                           postinc0	equ	0xFEE
  1390                           postdec0	equ	0xFED
  1391                           preinc0	equ	0xFEC
  1392                           plusw0	equ	0xFEB
  1393                           fsr0h	equ	0xFEA
  1394                           fsr0l	equ	0xFE9
  1395                           wreg	equ	0xFE8
  1396                           indf1	equ	0xFE7
  1397                           postinc1	equ	0xFE6
  1398                           postdec1	equ	0xFE5
  1399                           preinc1	equ	0xFE4
  1400                           plusw1	equ	0xFE3
  1401                           fsr1h	equ	0xFE2
  1402                           fsr1l	equ	0xFE1
  1403                           bsr	equ	0xFE0
  1404                           indf2	equ	0xFDF
  1405                           postinc2	equ	0xFDE
  1406                           postdec2	equ	0xFDD
  1407                           preinc2	equ	0xFDC
  1408                           plusw2	equ	0xFDB
  1409                           fsr2h	equ	0xFDA
  1410                           fsr2l	equ	0xFD9
  1411                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[6]), STR_4(CODE[17]), STR_3(CODE[12]), STR_2(CODE[12]), 
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    5706
                                             11 COMRAM     4     4      0
                          _atraso_ms
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1207
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             3     1      2    1445
                                              6 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     737
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1437
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     737
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     700
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atraso_ms
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BITBIGSFRhllh        6      0       0      23        0.0%
BITBIGSFRhlll        7      0       0      24        0.0%
BITBIGSFRlh          1      0       0      25        0.0%
BITBIGSFRll         21      0       0      26        0.0%
BIGRAM             7FF      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Nov 10 09:16:29 2022

                      l5 0B80                        l8 0BB6                       l42 0C1C  
                     l51 0B1E                       l45 0C0A                       l70 0AC2  
                     l48 0BE0                       l57 0B6E                       l97 08B6  
                     l98 092A                      l102 099A                      l107 09CC  
                    l981 0B7C                      l991 0B9C                      l799 0C18  
                    l993 0BA0                      l987 0B8A                      l979 0B70  
                    l995 0BE4                      l989 0B8C                      l997 0BE6  
                    l999 0BEC                      u200 0BB6                      u201 0BB2  
                    u210 0B6E                      u211 0B6A                      u300 0AA0  
                    u220 09E2                      u301 0A9C                      u221 09DE  
                    u310 0AB8                      u230 09F8                      u311 0AB4  
                    u231 09F4                      u240 0A10                      u320 08C8  
                    u241 0A0C                      u321 08C4                      u250 0A28  
                    u330 08E4                      u251 0A24                      u331 08E0  
                    u260 0A40                      u340 0938                      u261 0A3C  
                    u341 0934                      u190 0B9C                      u270 0A58  
                    u350 0954                      u191 0B98                      u271 0A54  
                    u351 0950                      u280 0A70                      u360 09A8  
                    u281 0A6C                      u361 09A4                      u290 0A88  
                    u291 0A84                     l1001 0BEE                     l1003 0BFA  
                   l1011 0BBC                     l1005 0BFC                     l1021 0BDE  
                   l1013 0BC2                     l1101 0880                     l1007 0C08  
                   l1023 0AC4                     l1015 0BC4                     l1031 0B28  
                   l1111 08AA                     l1103 0886                     l1025 0AC8  
                   l1017 0BD0                     l1009 0BBA                     l1041 09E6  
                   l1033 0B44                     l1121 08EE                     l1113 08BA  
                   l1105 0892                     l1027 0AD4                     l1019 0BD2  
                   l1051 0A28                     l1043 09F8                     l1035 0B46  
                   l1123 08FA                     l1131 0914                     l1115 08C8  
                   l1107 0898                     l1061 0A5C                     l1053 0A2C  
                   l1045 09FC                     l1037 09D0                     l1029 0B20  
                   l1141 095E                     l1133 091A                     l1125 0900  
                   l1117 08E4                     l1109 08A4                     l1071 0AA0  
                   l1063 0A70                     l1055 0A40                     l1047 0A10  
                   l1039 09E2                     l1143 096A                     l1151 0984  
                   l1135 0938                     l1127 090C                     l1119 08E8  
                   l1073 0AA4                     l1065 0A74                     l1057 0A44  
                   l1049 0A14                     l1161 09C6                     l1153 098A  
                   l1145 0970                     l1137 0954                     l1129 090E  
                   l1081 0844                     l1075 0AB8                     l1067 0A88  
                   l1059 0A58                     l1155 09A8                     l1147 097C  
                   l1139 0958                     l1091 085E                     l1083 0846  
                   l1077 0ABC                     l1069 0A8C                     l1157 09AE  
                   l1149 097E                     l1093 0864                     l1085 0848  
                   l1159 09BA                     l1095 0868                     l1087 084A  
                   l1079 0838                     l1097 086E                     l1089 085C  
                   l1099 0874                     STR_1 082A                     STR_2 0812  
                   STR_3 081E                     STR_4 0801              lcd_numb@str 0007  
                   STR_5 0831                     _LATD 000F8C                     _main 0838  
                   start 0000             ___param_bank 000000                    ?_main 0001  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcd_dat 0BE2          __end_of_lcd_cmd 0C0C  
        __end_of_lcd_str 0B70                    tablat 000FF5                    status 000FD8  
        __initialization 0C0C             __end_of_main 09D0                   ??_main 000C  
          __activetblptr 000002         __end_of_lcd_init 0B20         __end_of_lcd_numb 0AC4  
                 _lcd_wr 0C16                   isa$std 000001                ??_lcd_dat 0006  
              ??_lcd_cmd 0006                ??_lcd_str 0009             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          main@visitante 000E               __accesstop 0060  __end_of__initialization 0C0C  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  ?_lcd_wr 0001  
              ?_lcd_init 0001                ?_lcd_numb 0007                  __Hparam 0000  
                __Lparam 0000        __end_of_atraso_ms 0BB8             __psmallconst 0800  
                __pcinit 0C0C                  __ramtop 0800                  __ptext0 0838  
                __ptext1 0B20                  __ptext2 09D0                  __ptext3 0BB8  
                __ptext4 0AC4                  __ptext5 0BE2                  __ptext6 0C16  
                __ptext7 0B70                  _lcd_dat 0BB8                  _lcd_cmd 0BE2  
                _lcd_str 0B20               ??_lcd_init 0007               ??_lcd_numb 0009  
   end_of_initialization 0C0C            __Lmediumconst 0000                _PORTBbits 000F81  
              _PORTEbits 000F84                _TRISBbits 000F93               lcd_dat@val 0006  
             lcd_cmd@val 0006               lcd_str@str 0007               atraso_ms@i 0003  
             atraso_ms@j 0005           __end_of_lcd_wr 0C1E      start_initialization 0C0C  
     lcd_numb@num_placar 0009                 ??_lcd_wr 0001                 ?_lcd_dat 0001  
               ?_lcd_cmd 0001                 ?_lcd_str 0007                _atraso_ms 0B70  
            __smallconst 0800           atraso_ms@valor 0001               ?_atraso_ms 0001  
              lcd_wr@val 0001                 __Hrparam 0000                 __Lrparam 0000  
               _lcd_init 0AC4                 _lcd_numb 09D0                 isa$xinst 000000  
               main@casa 000C                 lcd_str@i 000B              ??_atraso_ms 0003  
