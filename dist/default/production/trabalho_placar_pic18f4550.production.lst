

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Nov 10 14:59:51 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57   000000                     _TRISBbits	set	3987
    58   000000                     _PORTBbits	set	3969
    59   000000                     _PORTD	set	3971
    60   000000                     _LATD	set	3980
    61   000000                     _TRISB	set	3987
    62   000000                     _TRISD	set	3989
    63   000000                     _PORTEbits	set	3972
    64   000000                     _TRISE	set	3990
    65                           
    66                           	psect	smallconst
    67   000800                     __psmallconst:
    68                           	callstack 0
    69   000800  00                 	db	0
    70   000801                     STR_2:
    71   000801  56                 	db	86	;'V'
    72   000802  49                 	db	73	;'I'
    73   000803  53                 	db	83	;'S'
    74   000804  49                 	db	73	;'I'
    75   000805  54                 	db	84	;'T'
    76   000806  41                 	db	65	;'A'
    77   000807  4E                 	db	78	;'N'
    78   000808  54                 	db	84	;'T'
    79   000809  45                 	db	69	;'E'
    80   00080A  3A                 	db	58	;':'
    81   00080B  20                 	db	32
    82   00080C  00                 	db	0
    83   00080D                     STR_4:
    84   00080D  56                 	db	86	;'V'
    85   00080E  45                 	db	69	;'E'
    86   00080F  4E                 	db	78	;'N'
    87   000810  43                 	db	67	;'C'
    88   000811  45                 	db	69	;'E'
    89   000812  44                 	db	68	;'D'
    90   000813  4F                 	db	79	;'O'
    91   000814  52                 	db	82	;'R'
    92   000815  21                 	db	33
    93   000816  21                 	db	33
    94   000817  21                 	db	33
    95   000818  00                 	db	0
    96   000819                     STR_5:
    97   000819  56                 	db	86	;'V'
    98   00081A  49                 	db	73	;'I'
    99   00081B  53                 	db	83	;'S'
   100   00081C  49                 	db	73	;'I'
   101   00081D  54                 	db	84	;'T'
   102   00081E  41                 	db	65	;'A'
   103   00081F  4E                 	db	78	;'N'
   104   000820  54                 	db	84	;'T'
   105   000821  45                 	db	69	;'E'
   106   000822  00                 	db	0
   107   000823                     STR_1:
   108   000823  43                 	db	67	;'C'
   109   000824  41                 	db	65	;'A'
   110   000825  53                 	db	83	;'S'
   111   000826  41                 	db	65	;'A'
   112   000827  3A                 	db	58	;':'
   113   000828  20                 	db	32
   114   000829  00                 	db	0
   115   00082A                     STR_7:
   116   00082A  52                 	db	82	;'R'
   117   00082B  45                 	db	69	;'E'
   118   00082C  53                 	db	83	;'S'
   119   00082D  45                 	db	69	;'E'
   120   00082E  54                 	db	84	;'T'
   121   00082F  00                 	db	0
   122   000830                     STR_3:
   123   000830  43                 	db	67	;'C'
   124   000831  41                 	db	65	;'A'
   125   000832  53                 	db	83	;'S'
   126   000833  41                 	db	65	;'A'
   127   000834  00                 	db	0
   128   000835  00                 	db	0	; dummy byte at the end
   129   000000                     
   130                           ; #config settings
   131                           
   132                           	psect	cinit
   133   000D60                     __pcinit:
   134                           	callstack 0
   135   000D60                     start_initialization:
   136                           	callstack 0
   137   000D60                     __initialization:
   138                           	callstack 0
   139   000D60                     end_of_initialization:
   140                           	callstack 0
   141   000D60                     __end_of__initialization:
   142                           	callstack 0
   143   000D60  0E00               	movlw	low (__Lmediumconst shr (0+16))
   144   000D62  6EF8               	movwf	tblptru,c
   145   000D64  0100               	movlb	0
   146   000D66  EF1B  F004         	goto	_main	;jump to C main() function
   147                           
   148                           	psect	cstackCOMRAM
   149   000001                     __pcstackCOMRAM:
   150                           	callstack 0
   151   000001                     ??_display7s:
   152   000001                     lcd_wr@val:
   153                           	callstack 0
   154   000001                     atraso_ms@valor:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0x0
   158   000001                     	ds	2
   159   000003                     display7s@v:
   160                           	callstack 0
   161   000003                     atraso_ms@i:
   162                           	callstack 0
   163                           
   164                           ; 2 bytes @ 0x2
   165   000003                     	ds	2
   166   000005                     atraso_ms@j:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0x4
   170   000005                     	ds	1
   171   000006                     lcd_cmd@val:
   172                           	callstack 0
   173   000006                     lcd_dat@val:
   174                           	callstack 0
   175                           
   176                           ; 1 bytes @ 0x5
   177   000006                     	ds	1
   178   000007                     lcd_str@str:
   179                           	callstack 0
   180   000007                     lcd_numb@str:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x6
   184   000007                     	ds	2
   185   000009                     ??_lcd_str:
   186   000009                     ??_lcd_numb:
   187                           
   188                           ; 1 bytes @ 0x8
   189   000009                     	ds	2
   190   00000B                     lcd_str@i:
   191                           	callstack 0
   192   00000B                     lcd_numb@num_placar:
   193                           	callstack 0
   194                           
   195                           ; 1 bytes @ 0xA
   196   00000B                     	ds	1
   197   00000C                     main@casa:
   198                           	callstack 0
   199                           
   200                           ; 2 bytes @ 0xB
   201   00000C                     	ds	2
   202   00000E                     main@visitante:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0xD
   206   00000E                     	ds	2
   207                           
   208 ;;
   209 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   210 ;;
   211 ;; *************** function _main *****************
   212 ;; Defined at:
   213 ;;		line 21 in file "newmain.c"
   214 ;; Parameters:    Size  Location     Type
   215 ;;		None
   216 ;; Auto vars:     Size  Location     Type
   217 ;;  visitante       2   13[COMRAM] int 
   218 ;;  casa            2   11[COMRAM] int 
   219 ;; Return value:  Size  Location     Type
   220 ;;                  2  104[None  ] int 
   221 ;; Registers used:
   222 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   223 ;; Tracked objects:
   224 ;;		On entry : 0/0
   225 ;;		On exit  : 0/0
   226 ;;		Unchanged: 0/0
   227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   228 ;;      Params:         0       0       0       0       0       0       0       0       0
   229 ;;      Locals:         4       0       0       0       0       0       0       0       0
   230 ;;      Temps:          0       0       0       0       0       0       0       0       0
   231 ;;      Totals:         4       0       0       0       0       0       0       0       0
   232 ;;Total ram usage:        4 bytes
   233 ;; Hardware stack levels required when called: 3
   234 ;; This function calls:
   235 ;;		_atraso_ms
   236 ;;		_display7s
   237 ;;		_lcd_cmd
   238 ;;		_lcd_init
   239 ;;		_lcd_numb
   240 ;;		_lcd_str
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text0
   247   000836                     __ptext0:
   248                           	callstack 0
   249   000836                     _main:
   250                           	callstack 28
   251   000836                     
   252                           ;newmain.c: 23:     TRISD = 0x00;
   253   000836  0E00               	movlw	0
   254   000838  6E95               	movwf	149,c	;volatile
   255                           
   256                           ;newmain.c: 24:     TRISB = 0x00;
   257   00083A  0E00               	movlw	0
   258   00083C  6E93               	movwf	147,c	;volatile
   259                           
   260                           ;newmain.c: 25:     TRISE = 0x00;
   261   00083E  0E00               	movlw	0
   262   000840  6E96               	movwf	150,c	;volatile
   263   000842                     
   264                           ;newmain.c: 27:     TRISBbits.TRISB1 = 1;
   265   000842  8293               	bsf	147,1,c	;volatile
   266   000844                     
   267                           ;newmain.c: 28:     TRISBbits.TRISB2 = 1;
   268   000844  8493               	bsf	147,2,c	;volatile
   269   000846                     
   270                           ;newmain.c: 29:     TRISBbits.TRISB3 = 1;
   271   000846  8693               	bsf	147,3,c	;volatile
   272   000848                     
   273                           ;newmain.c: 30:     TRISBbits.TRISB0 = 1;
   274   000848  8093               	bsf	147,0,c	;volatile
   275   00084A                     
   276                           ;newmain.c: 33:     PORTBbits.RB7 = 1;
   277   00084A  8E81               	bsf	129,7,c	;volatile
   278                           
   279                           ;newmain.c: 35:     int casa = 0x00, visitante = 0x00;
   280   00084C  0E00               	movlw	0
   281   00084E  6E0D               	movwf	(main@casa+1)^0,c
   282   000850  0E00               	movlw	0
   283   000852  6E0C               	movwf	main@casa^0,c
   284   000854  0E00               	movlw	0
   285   000856  6E0F               	movwf	(main@visitante+1)^0,c
   286   000858  0E00               	movlw	0
   287   00085A  6E0E               	movwf	main@visitante^0,c
   288   00085C                     
   289                           ;newmain.c: 37:     PORTBbits.RB7 = 0x00;
   290   00085C  9E81               	bcf	129,7,c	;volatile
   291   00085E                     
   292                           ;newmain.c: 38:     PORTBbits.RB4 = 0x00;
   293   00085E  9881               	bcf	129,4,c	;volatile
   294                           
   295                           ;newmain.c: 40:     LATD = 0x00;
   296   000860  0E00               	movlw	0
   297   000862  6E8C               	movwf	140,c	;volatile
   298   000864                     
   299                           ;newmain.c: 42:     lcd_init();
   300   000864  EC0C  F006         	call	_lcd_init	;wreg free
   301   000868                     
   302                           ;newmain.c: 43:     lcd_cmd(0x01);
   303   000868  0E01               	movlw	1
   304   00086A  EC9B  F006         	call	_lcd_cmd
   305   00086E                     
   306                           ;newmain.c: 45:     lcd_cmd(0x80);
   307   00086E  0E80               	movlw	128
   308   000870  EC9B  F006         	call	_lcd_cmd
   309   000874                     
   310                           ;newmain.c: 46:     lcd_str("CASA: ");
   311   000874  0E23               	movlw	low STR_1
   312   000876  6E07               	movwf	lcd_str@str^0,c
   313   000878  0E08               	movlw	high STR_1
   314   00087A  6E08               	movwf	(lcd_str@str+1)^0,c
   315   00087C  EC3A  F006         	call	_lcd_str	;wreg free
   316   000880                     
   317                           ;newmain.c: 48:     lcd_cmd(0x8b);
   318   000880  0E8B               	movlw	139
   319   000882  EC9B  F006         	call	_lcd_cmd
   320   000886                     
   321                           ;newmain.c: 49:     lcd_numb(casa);
   322   000886  0E00               	movlw	0
   323   000888  6E08               	movwf	(lcd_numb@str+1)^0,c
   324   00088A  0E00               	movlw	0
   325   00088C  6E07               	movwf	lcd_numb@str^0,c
   326   00088E  ECA8  F005         	call	_lcd_numb	;wreg free
   327   000892                     
   328                           ;newmain.c: 51:     lcd_cmd(0xC0);
   329   000892  0EC0               	movlw	192
   330   000894  EC9B  F006         	call	_lcd_cmd
   331   000898                     
   332                           ;newmain.c: 52:     lcd_str("VISITANTE: ");
   333   000898  0E01               	movlw	low STR_2
   334   00089A  6E07               	movwf	lcd_str@str^0,c
   335   00089C  0E08               	movlw	high STR_2
   336   00089E  6E08               	movwf	(lcd_str@str+1)^0,c
   337   0008A0  EC3A  F006         	call	_lcd_str	;wreg free
   338   0008A4                     
   339                           ;newmain.c: 54:     lcd_cmd(0xcb);
   340   0008A4  0ECB               	movlw	203
   341   0008A6  EC9B  F006         	call	_lcd_cmd
   342   0008AA                     
   343                           ;newmain.c: 55:     lcd_numb(visitante);
   344   0008AA  0E00               	movlw	0
   345   0008AC  6E08               	movwf	(lcd_numb@str+1)^0,c
   346   0008AE  0E00               	movlw	0
   347   0008B0  6E07               	movwf	lcd_numb@str^0,c
   348   0008B2  ECA8  F005         	call	_lcd_numb	;wreg free
   349   0008B6                     l105:
   350                           
   351                           ;newmain.c: 58:     {;newmain.c: 59:         LATD = 0x00;
   352   0008B6  0E00               	movlw	0
   353   0008B8  6E8C               	movwf	140,c	;volatile
   354   0008BA                     
   355                           ;newmain.c: 60:         PORTBbits.RB4 = 0x00;
   356   0008BA  9881               	bcf	129,4,c	;volatile
   357   0008BC                     
   358                           ;newmain.c: 61:         PORTBbits.RB7 = 0x00;
   359   0008BC  9E81               	bcf	129,7,c	;volatile
   360   0008BE                     
   361                           ;newmain.c: 63:         if(PORTBbits.RB1 == 0)
   362   0008BE  B281               	btfsc	129,1,c	;volatile
   363   0008C0  EF64  F004         	goto	u131
   364   0008C4  EF66  F004         	goto	u130
   365   0008C8                     u131:
   366   0008C8  EFAD  F004         	goto	l106
   367   0008CC                     u130:
   368   0008CC                     
   369                           ;newmain.c: 64:         {;newmain.c: 65:             if(casa < 9)
   370   0008CC  BE0D               	btfsc	(main@casa+1)^0,7,c
   371   0008CE  EF74  F004         	goto	u140
   372   0008D2  500D               	movf	(main@casa+1)^0,w,c
   373   0008D4  E107               	bnz	u141
   374   0008D6  0E09               	movlw	9
   375   0008D8  5C0C               	subwf	main@casa^0,w,c
   376   0008DA  B0D8               	btfsc	status,0,c
   377   0008DC  EF72  F004         	goto	u141
   378   0008E0  EF74  F004         	goto	u140
   379   0008E4                     u141:
   380   0008E4  EF96  F004         	goto	l1231
   381   0008E8                     u140:
   382   0008E8                     
   383                           ;newmain.c: 66:             {;newmain.c: 67:                 casa++;
   384   0008E8  4A0C               	infsnz	main@casa^0,f,c
   385   0008EA  2A0D               	incf	(main@casa+1)^0,f,c
   386   0008EC                     
   387                           ;newmain.c: 68:                 lcd_cmd(0x8b);
   388   0008EC  0E8B               	movlw	139
   389   0008EE  EC9B  F006         	call	_lcd_cmd
   390   0008F2                     
   391                           ;newmain.c: 69:                 lcd_numb(casa);
   392   0008F2  C00C  F007         	movff	main@casa,lcd_numb@str
   393   0008F6  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   394   0008FA  ECA8  F005         	call	_lcd_numb	;wreg free
   395   0008FE                     
   396                           ;newmain.c: 71:                 lcd_cmd(0xcb);
   397   0008FE  0ECB               	movlw	203
   398   000900  EC9B  F006         	call	_lcd_cmd
   399   000904                     
   400                           ;newmain.c: 72:                 lcd_numb(visitante);
   401   000904  C00E  F007         	movff	main@visitante,lcd_numb@str
   402   000908  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   403   00090C  ECA8  F005         	call	_lcd_numb	;wreg free
   404   000910                     
   405                           ;newmain.c: 73:                 PORTBbits.RB7 = 0b01110011;
   406   000910  8E81               	bsf	129,7,c	;volatile
   407   000912                     
   408                           ;newmain.c: 74:                 PORTBbits.RB4 = 0x00;
   409   000912  9881               	bcf	129,4,c	;volatile
   410   000914                     
   411                           ;newmain.c: 75:                 PORTD = display7s(16);
   412   000914  0E10               	movlw	16
   413   000916  EC1D  F005         	call	_display7s
   414   00091A  6E83               	movwf	131,c	;volatile
   415   00091C                     
   416                           ;newmain.c: 76:                 atraso_ms(25);
   417   00091C  0E00               	movlw	0
   418   00091E  6E02               	movwf	(atraso_ms@valor+1)^0,c
   419   000920  0E19               	movlw	25
   420   000922  6E01               	movwf	atraso_ms@valor^0,c
   421   000924  EC62  F006         	call	_atraso_ms	;wreg free
   422                           
   423                           ;newmain.c: 77:             }
   424   000928  EFAD  F004         	goto	l106
   425   00092C                     l1231:
   426                           
   427                           ;newmain.c: 79:             {;newmain.c: 80:                 lcd_cmd(0x01);
   428   00092C  0E01               	movlw	1
   429   00092E  EC9B  F006         	call	_lcd_cmd
   430                           
   431                           ;newmain.c: 81:                 lcd_cmd(0x80);
   432   000932  0E80               	movlw	128
   433   000934  EC9B  F006         	call	_lcd_cmd
   434   000938                     
   435                           ;newmain.c: 82:                 lcd_str("CASA");
   436   000938  0E30               	movlw	low STR_3
   437   00093A  6E07               	movwf	lcd_str@str^0,c
   438   00093C  0E08               	movlw	high STR_3
   439   00093E  6E08               	movwf	(lcd_str@str+1)^0,c
   440   000940  EC3A  F006         	call	_lcd_str	;wreg free
   441   000944                     
   442                           ;newmain.c: 83:                 lcd_cmd(0xC0);
   443   000944  0EC0               	movlw	192
   444   000946  EC9B  F006         	call	_lcd_cmd
   445                           
   446                           ;newmain.c: 84:                 lcd_str("VENCEDOR!!!");
   447   00094A  0E0D               	movlw	low STR_4
   448   00094C  6E07               	movwf	lcd_str@str^0,c
   449   00094E  0E08               	movlw	high STR_4
   450   000950  6E08               	movwf	(lcd_str@str+1)^0,c
   451   000952  EC3A  F006         	call	_lcd_str	;wreg free
   452                           
   453                           ;newmain.c: 85:                 break;
   454   000956  EF1B  F005         	goto	l117
   455   00095A                     l106:
   456                           
   457                           ;newmain.c: 88:         if(PORTBbits.RB2 == 0)
   458   00095A  B481               	btfsc	129,2,c	;volatile
   459   00095C  EFB2  F004         	goto	u151
   460   000960  EFB4  F004         	goto	u150
   461   000964                     u151:
   462   000964  EFFB  F004         	goto	l110
   463   000968                     u150:
   464   000968                     
   465                           ;newmain.c: 89:         {;newmain.c: 90:             if(visitante < 9)
   466   000968  BE0F               	btfsc	(main@visitante+1)^0,7,c
   467   00096A  EFC2  F004         	goto	u160
   468   00096E  500F               	movf	(main@visitante+1)^0,w,c
   469   000970  E107               	bnz	u161
   470   000972  0E09               	movlw	9
   471   000974  5C0E               	subwf	main@visitante^0,w,c
   472   000976  B0D8               	btfsc	status,0,c
   473   000978  EFC0  F004         	goto	u161
   474   00097C  EFC2  F004         	goto	u160
   475   000980                     u161:
   476   000980  EFE4  F004         	goto	l1257
   477   000984                     u160:
   478   000984                     
   479                           ;newmain.c: 91:             {;newmain.c: 92:                 visitante++;
   480   000984  4A0E               	infsnz	main@visitante^0,f,c
   481   000986  2A0F               	incf	(main@visitante+1)^0,f,c
   482   000988                     
   483                           ;newmain.c: 93:                 lcd_cmd(0x8b);
   484   000988  0E8B               	movlw	139
   485   00098A  EC9B  F006         	call	_lcd_cmd
   486   00098E                     
   487                           ;newmain.c: 94:                 lcd_numb(casa);
   488   00098E  C00C  F007         	movff	main@casa,lcd_numb@str
   489   000992  C00D  F008         	movff	main@casa+1,lcd_numb@str+1
   490   000996  ECA8  F005         	call	_lcd_numb	;wreg free
   491   00099A                     
   492                           ;newmain.c: 96:                 lcd_cmd(0xcb);
   493   00099A  0ECB               	movlw	203
   494   00099C  EC9B  F006         	call	_lcd_cmd
   495   0009A0                     
   496                           ;newmain.c: 97:                 lcd_numb(visitante);
   497   0009A0  C00E  F007         	movff	main@visitante,lcd_numb@str
   498   0009A4  C00F  F008         	movff	main@visitante+1,lcd_numb@str+1
   499   0009A8  ECA8  F005         	call	_lcd_numb	;wreg free
   500   0009AC                     
   501                           ;newmain.c: 98:                 PORTBbits.RB4 = 0b01110011;
   502   0009AC  8881               	bsf	129,4,c	;volatile
   503   0009AE                     
   504                           ;newmain.c: 99:                 PORTBbits.RB7 = 0x00;
   505   0009AE  9E81               	bcf	129,7,c	;volatile
   506   0009B0                     
   507                           ;newmain.c: 100:                 PORTD = display7s(16);
   508   0009B0  0E10               	movlw	16
   509   0009B2  EC1D  F005         	call	_display7s
   510   0009B6  6E83               	movwf	131,c	;volatile
   511   0009B8                     
   512                           ;newmain.c: 101:                 atraso_ms(25);
   513   0009B8  0E00               	movlw	0
   514   0009BA  6E02               	movwf	(atraso_ms@valor+1)^0,c
   515   0009BC  0E19               	movlw	25
   516   0009BE  6E01               	movwf	atraso_ms@valor^0,c
   517   0009C0  EC62  F006         	call	_atraso_ms	;wreg free
   518                           
   519                           ;newmain.c: 102:             }
   520   0009C4  EFFB  F004         	goto	l110
   521   0009C8                     l1257:
   522                           
   523                           ;newmain.c: 104:             {;newmain.c: 105:                 lcd_cmd(0x01);
   524   0009C8  0E01               	movlw	1
   525   0009CA  EC9B  F006         	call	_lcd_cmd
   526                           
   527                           ;newmain.c: 106:                 lcd_cmd(0x80);
   528   0009CE  0E80               	movlw	128
   529   0009D0  EC9B  F006         	call	_lcd_cmd
   530   0009D4                     
   531                           ;newmain.c: 107:                 lcd_str("VISITANTE");
   532   0009D4  0E19               	movlw	low STR_5
   533   0009D6  6E07               	movwf	lcd_str@str^0,c
   534   0009D8  0E08               	movlw	high STR_5
   535   0009DA  6E08               	movwf	(lcd_str@str+1)^0,c
   536   0009DC  EC3A  F006         	call	_lcd_str	;wreg free
   537   0009E0                     
   538                           ;newmain.c: 108:                 lcd_cmd(0xC0);
   539   0009E0  0EC0               	movlw	192
   540   0009E2  EC9B  F006         	call	_lcd_cmd
   541                           
   542                           ;newmain.c: 109:                 lcd_str("VENCEDOR!!!");
   543   0009E6  0E0D               	movlw	low STR_4
   544   0009E8  6E07               	movwf	lcd_str@str^0,c
   545   0009EA  0E08               	movlw	high STR_4
   546   0009EC  6E08               	movwf	(lcd_str@str+1)^0,c
   547   0009EE  EC3A  F006         	call	_lcd_str	;wreg free
   548                           
   549                           ;newmain.c: 110:                 break;
   550   0009F2  EF1B  F005         	goto	l117
   551   0009F6                     l110:
   552                           
   553                           ;newmain.c: 113:         if (PORTBbits.RB3 == 0 || PORTBbits.RB0 == 0)
   554   0009F6  A681               	btfss	129,3,c	;volatile
   555   0009F8  EF00  F005         	goto	u171
   556   0009FC  EF02  F005         	goto	u170
   557   000A00                     u171:
   558   000A00  EF09  F005         	goto	l1265
   559   000A04                     u170:
   560   000A04  B081               	btfsc	129,0,c	;volatile
   561   000A06  EF07  F005         	goto	u181
   562   000A0A  EF09  F005         	goto	u180
   563   000A0E                     u181:
   564   000A0E  EF5B  F004         	goto	l105
   565   000A12                     u180:
   566   000A12                     l1265:
   567                           
   568                           ;newmain.c: 114:         {;newmain.c: 115:             lcd_cmd(0x01);
   569   000A12  0E01               	movlw	1
   570   000A14  EC9B  F006         	call	_lcd_cmd
   571   000A18                     
   572                           ;newmain.c: 116:             lcd_str("RESET");
   573   000A18  0E2A               	movlw	low STR_7
   574   000A1A  6E07               	movwf	lcd_str@str^0,c
   575   000A1C  0E08               	movlw	high STR_7
   576   000A1E  6E08               	movwf	(lcd_str@str+1)^0,c
   577   000A20  EC3A  F006         	call	_lcd_str	;wreg free
   578   000A24                     
   579                           ;newmain.c: 117:             atraso_ms(100);
   580   000A24  0E00               	movlw	0
   581   000A26  6E02               	movwf	(atraso_ms@valor+1)^0,c
   582   000A28  0E64               	movlw	100
   583   000A2A  6E01               	movwf	atraso_ms@valor^0,c
   584   000A2C  EC62  F006         	call	_atraso_ms	;wreg free
   585   000A30                     
   586                           ;newmain.c: 118:             lcd_cmd(0x01);
   587   000A30  0E01               	movlw	1
   588   000A32  EC9B  F006         	call	_lcd_cmd
   589   000A36                     l117:
   590   000A36  EF00  F000         	goto	start
   591   000A3A                     __end_of_main:
   592                           	callstack 0
   593                           
   594 ;; *************** function _lcd_str *****************
   595 ;; Defined at:
   596 ;;		line 79 in file "lcd.c"
   597 ;; Parameters:    Size  Location     Type
   598 ;;  str             2    6[COMRAM] PTR const unsigned char 
   599 ;;		 -> STR_7(6), STR_6(12), STR_5(10), STR_4(12), 
   600 ;;		 -> STR_3(5), STR_2(12), STR_1(7), 
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  i               1   10[COMRAM] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   612 ;;      Params:         2       0       0       0       0       0       0       0       0
   613 ;;      Locals:         1       0       0       0       0       0       0       0       0
   614 ;;      Temps:          2       0       0       0       0       0       0       0       0
   615 ;;      Totals:         5       0       0       0       0       0       0       0       0
   616 ;;Total ram usage:        5 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; Hardware stack levels required when called: 2
   619 ;; This function calls:
   620 ;;		_lcd_dat
   621 ;; This function is called by:
   622 ;;		_main
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626                           	psect	text1
   627   000C74                     __ptext1:
   628                           	callstack 0
   629   000C74                     _lcd_str:
   630                           	callstack 28
   631   000C74                     
   632                           ;lcd.c: 79: void lcd_str(const char* str);lcd.c: 80: {;lcd.c: 81:  unsigned char i=0;
   633   000C74  0E00               	movlw	0
   634   000C76  6E0B               	movwf	lcd_str@i^0,c
   635                           
   636                           ;lcd.c: 83:  while(str[i] != '\0' )
   637   000C78  EF4D  F006         	goto	l1135
   638   000C7C                     l1131:
   639                           
   640                           ;lcd.c: 84:  {;lcd.c: 85:    lcd_dat(str[i]);
   641   000C7C  500B               	movf	lcd_str@i^0,w,c
   642   000C7E  2407               	addwf	lcd_str@str^0,w,c
   643   000C80  6E09               	movwf	??_lcd_str^0,c
   644   000C82  0E00               	movlw	0
   645   000C84  2008               	addwfc	(lcd_str@str+1)^0,w,c
   646   000C86  6E0A               	movwf	(??_lcd_str+1)^0,c
   647   000C88  C009  FFF6         	movff	??_lcd_str,tblptrl
   648   000C8C  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   649   000C90                     	if	0	;tblptru may be non-zero
   650   000C90                     	endif
   651   000C90                     	if	0	;tblptru may be non-zero
   652   000C90                     	endif
   653   000C90  0008               	tblrd		*
   654   000C92  50F5               	movf	tablat,w,c
   655   000C94  EC86  F006         	call	_lcd_dat
   656   000C98                     
   657                           ;lcd.c: 86:    i++;
   658   000C98  2A0B               	incf	lcd_str@i^0,f,c
   659   000C9A                     l1135:
   660                           
   661                           ;lcd.c: 83:  while(str[i] != '\0' )
   662   000C9A  500B               	movf	lcd_str@i^0,w,c
   663   000C9C  2407               	addwf	lcd_str@str^0,w,c
   664   000C9E  6E09               	movwf	??_lcd_str^0,c
   665   000CA0  0E00               	movlw	0
   666   000CA2  2008               	addwfc	(lcd_str@str+1)^0,w,c
   667   000CA4  6E0A               	movwf	(??_lcd_str+1)^0,c
   668   000CA6  C009  FFF6         	movff	??_lcd_str,tblptrl
   669   000CAA  C00A  FFF7         	movff	??_lcd_str+1,tblptrh
   670   000CAE                     	if	0	;tblptru may be non-zero
   671   000CAE                     	endif
   672   000CAE                     	if	0	;tblptru may be non-zero
   673   000CAE                     	endif
   674   000CAE  0008               	tblrd		*
   675   000CB0  50F5               	movf	tablat,w,c
   676   000CB2  0900               	iorlw	0
   677   000CB4  A4D8               	btfss	status,2,c
   678   000CB6  EF5F  F006         	goto	u121
   679   000CBA  EF61  F006         	goto	u120
   680   000CBE                     u121:
   681   000CBE  EF3E  F006         	goto	l1131
   682   000CC2                     u120:
   683   000CC2  0012               	return		;funcret
   684   000CC4                     __end_of_lcd_str:
   685                           	callstack 0
   686                           
   687 ;; *************** function _lcd_numb *****************
   688 ;; Defined at:
   689 ;;		line 90 in file "lcd.c"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  str             2    6[COMRAM] const int 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  num_placar      1   10[COMRAM] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg, status,2, status,0, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   703 ;;      Params:         2       0       0       0       0       0       0       0       0
   704 ;;      Locals:         1       0       0       0       0       0       0       0       0
   705 ;;      Temps:          2       0       0       0       0       0       0       0       0
   706 ;;      Totals:         5       0       0       0       0       0       0       0       0
   707 ;;Total ram usage:        5 bytes
   708 ;; Hardware stack levels used: 1
   709 ;; Hardware stack levels required when called: 2
   710 ;; This function calls:
   711 ;;		_lcd_dat
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text2
   718   000B50                     __ptext2:
   719                           	callstack 0
   720   000B50                     _lcd_numb:
   721                           	callstack 28
   722   000B50                     
   723                           ;lcd.c: 92:     char num_placar;;lcd.c: 94:     switch(str){
   724   000B50  EFD2  F005         	goto	l1161
   725   000B54                     l1139:
   726                           
   727                           ;lcd.c: 96:             num_placar = '0';
   728   000B54  0E30               	movlw	48
   729   000B56  6E0B               	movwf	lcd_numb@num_placar^0,c
   730                           
   731                           ;lcd.c: 97:         break;
   732   000B58  EF08  F006         	goto	l1163
   733   000B5C                     l1141:
   734                           
   735                           ;lcd.c: 99:             num_placar = '1';
   736   000B5C  0E31               	movlw	49
   737   000B5E  6E0B               	movwf	lcd_numb@num_placar^0,c
   738                           
   739                           ;lcd.c: 100:         break;
   740   000B60  EF08  F006         	goto	l1163
   741   000B64                     l1143:
   742                           
   743                           ;lcd.c: 102:             num_placar = '2';
   744   000B64  0E32               	movlw	50
   745   000B66  6E0B               	movwf	lcd_numb@num_placar^0,c
   746                           
   747                           ;lcd.c: 103:         break;
   748   000B68  EF08  F006         	goto	l1163
   749   000B6C                     l1145:
   750                           
   751                           ;lcd.c: 105:             num_placar = '3';
   752   000B6C  0E33               	movlw	51
   753   000B6E  6E0B               	movwf	lcd_numb@num_placar^0,c
   754                           
   755                           ;lcd.c: 106:         break;
   756   000B70  EF08  F006         	goto	l1163
   757   000B74                     l1147:
   758                           
   759                           ;lcd.c: 108:             num_placar = '4';
   760   000B74  0E34               	movlw	52
   761   000B76  6E0B               	movwf	lcd_numb@num_placar^0,c
   762                           
   763                           ;lcd.c: 109:         break;
   764   000B78  EF08  F006         	goto	l1163
   765   000B7C                     l1149:
   766                           
   767                           ;lcd.c: 111:             num_placar = '5';
   768   000B7C  0E35               	movlw	53
   769   000B7E  6E0B               	movwf	lcd_numb@num_placar^0,c
   770                           
   771                           ;lcd.c: 112:         break;
   772   000B80  EF08  F006         	goto	l1163
   773   000B84                     l1151:
   774                           
   775                           ;lcd.c: 114:             num_placar = '6';
   776   000B84  0E36               	movlw	54
   777   000B86  6E0B               	movwf	lcd_numb@num_placar^0,c
   778                           
   779                           ;lcd.c: 115:         break;
   780   000B88  EF08  F006         	goto	l1163
   781   000B8C                     l1153:
   782                           
   783                           ;lcd.c: 117:             num_placar = '7';
   784   000B8C  0E37               	movlw	55
   785   000B8E  6E0B               	movwf	lcd_numb@num_placar^0,c
   786                           
   787                           ;lcd.c: 118:         break;
   788   000B90  EF08  F006         	goto	l1163
   789   000B94                     l1155:
   790                           
   791                           ;lcd.c: 120:             num_placar = '8';
   792   000B94  0E38               	movlw	56
   793   000B96  6E0B               	movwf	lcd_numb@num_placar^0,c
   794                           
   795                           ;lcd.c: 121:         break;
   796   000B98  EF08  F006         	goto	l1163
   797   000B9C                     l1157:
   798                           
   799                           ;lcd.c: 123:             num_placar = '9';
   800   000B9C  0E39               	movlw	57
   801   000B9E  6E0B               	movwf	lcd_numb@num_placar^0,c
   802                           
   803                           ;lcd.c: 124:         break;
   804   000BA0  EF08  F006         	goto	l1163
   805   000BA4                     l1161:
   806   000BA4  C007  F009         	movff	lcd_numb@str,??_lcd_numb
   807   000BA8  C008  F00A         	movff	lcd_numb@str+1,??_lcd_numb+1
   808                           
   809                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   810                           ; Switch size 1, requested type "simple"
   811                           ; Number of cases is 1, Range of values is 0 to 0
   812                           ; switch strategies available:
   813                           ; Name         Instructions Cycles
   814                           ; simple_byte            4     3 (average)
   815                           ;	Chosen strategy is simple_byte
   816   000BAC  500A               	movf	(??_lcd_numb+1)^0,w,c
   817   000BAE  0A00               	xorlw	0	; case 0
   818   000BB0  B4D8               	btfsc	status,2,c
   819   000BB2  EFDD  F005         	goto	l1281
   820   000BB6  EF08  F006         	goto	l1163
   821   000BBA                     l1281:
   822                           
   823                           ; Switch size 1, requested type "simple"
   824                           ; Number of cases is 10, Range of values is 0 to 9
   825                           ; switch strategies available:
   826                           ; Name         Instructions Cycles
   827                           ; simple_byte           31    16 (average)
   828                           ;	Chosen strategy is simple_byte
   829   000BBA  5009               	movf	??_lcd_numb^0,w,c
   830   000BBC  0A00               	xorlw	0	; case 0
   831   000BBE  B4D8               	btfsc	status,2,c
   832   000BC0  EFAA  F005         	goto	l1139
   833   000BC4  0A01               	xorlw	1	; case 1
   834   000BC6  B4D8               	btfsc	status,2,c
   835   000BC8  EFAE  F005         	goto	l1141
   836   000BCC  0A03               	xorlw	3	; case 2
   837   000BCE  B4D8               	btfsc	status,2,c
   838   000BD0  EFB2  F005         	goto	l1143
   839   000BD4  0A01               	xorlw	1	; case 3
   840   000BD6  B4D8               	btfsc	status,2,c
   841   000BD8  EFB6  F005         	goto	l1145
   842   000BDC  0A07               	xorlw	7	; case 4
   843   000BDE  B4D8               	btfsc	status,2,c
   844   000BE0  EFBA  F005         	goto	l1147
   845   000BE4  0A01               	xorlw	1	; case 5
   846   000BE6  B4D8               	btfsc	status,2,c
   847   000BE8  EFBE  F005         	goto	l1149
   848   000BEC  0A03               	xorlw	3	; case 6
   849   000BEE  B4D8               	btfsc	status,2,c
   850   000BF0  EFC2  F005         	goto	l1151
   851   000BF4  0A01               	xorlw	1	; case 7
   852   000BF6  B4D8               	btfsc	status,2,c
   853   000BF8  EFC6  F005         	goto	l1153
   854   000BFC  0A0F               	xorlw	15	; case 8
   855   000BFE  B4D8               	btfsc	status,2,c
   856   000C00  EFCA  F005         	goto	l1155
   857   000C04  0A01               	xorlw	1	; case 9
   858   000C06  B4D8               	btfsc	status,2,c
   859   000C08  EFCE  F005         	goto	l1157
   860   000C0C  EF08  F006         	goto	l1163
   861   000C10                     l1163:
   862                           
   863                           ;lcd.c: 130:     lcd_dat(num_placar);
   864   000C10  500B               	movf	lcd_numb@num_placar^0,w,c
   865   000C12  EC86  F006         	call	_lcd_dat
   866   000C16  0012               	return		;funcret
   867   000C18                     __end_of_lcd_numb:
   868                           	callstack 0
   869                           
   870 ;; *************** function _lcd_dat *****************
   871 ;; Defined at:
   872 ;;		line 49 in file "lcd.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  val             1    wreg     unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  val             1    5[COMRAM] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   886 ;;      Params:         0       0       0       0       0       0       0       0       0
   887 ;;      Locals:         1       0       0       0       0       0       0       0       0
   888 ;;      Temps:          0       0       0       0       0       0       0       0       0
   889 ;;      Totals:         1       0       0       0       0       0       0       0       0
   890 ;;Total ram usage:        1 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; Hardware stack levels required when called: 1
   893 ;; This function calls:
   894 ;;		_atraso_ms
   895 ;;		_lcd_wr
   896 ;; This function is called by:
   897 ;;		_lcd_str
   898 ;;		_lcd_numb
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text3
   903   000D0C                     __ptext3:
   904                           	callstack 0
   905   000D0C                     _lcd_dat:
   906                           	callstack 28
   907                           
   908                           ;incstack = 0
   909                           ;lcd_dat@val stored from wreg
   910   000D0C  6E06               	movwf	lcd_dat@val^0,c
   911   000D0E                     
   912                           ;lcd.c: 49: void lcd_dat(unsigned char val);lcd.c: 50: {;lcd.c: 51:  PORTEbits.RE1=1;
   913   000D0E  8284               	bsf	132,1,c	;volatile
   914   000D10                     
   915                           ;lcd.c: 52:         lcd_wr(val);
   916   000D10  5006               	movf	lcd_dat@val^0,w,c
   917   000D12  ECB5  F006         	call	_lcd_wr
   918   000D16                     
   919                           ;lcd.c: 53:         PORTEbits.RE0=1;
   920   000D16  8084               	bsf	132,0,c	;volatile
   921   000D18                     
   922                           ;lcd.c: 54:         atraso_ms(3);
   923   000D18  0E00               	movlw	0
   924   000D1A  6E02               	movwf	(atraso_ms@valor+1)^0,c
   925   000D1C  0E03               	movlw	3
   926   000D1E  6E01               	movwf	atraso_ms@valor^0,c
   927   000D20  EC62  F006         	call	_atraso_ms	;wreg free
   928   000D24                     
   929                           ;lcd.c: 55:         PORTEbits.RE1=0;
   930   000D24  9284               	bcf	132,1,c	;volatile
   931   000D26                     
   932                           ;lcd.c: 56:         atraso_ms(3);
   933   000D26  0E00               	movlw	0
   934   000D28  6E02               	movwf	(atraso_ms@valor+1)^0,c
   935   000D2A  0E03               	movlw	3
   936   000D2C  6E01               	movwf	atraso_ms@valor^0,c
   937   000D2E  EC62  F006         	call	_atraso_ms	;wreg free
   938   000D32                     
   939                           ;lcd.c: 57:  PORTEbits.RE1=1;
   940   000D32  8284               	bsf	132,1,c	;volatile
   941   000D34  0012               	return		;funcret
   942   000D36                     __end_of_lcd_dat:
   943                           	callstack 0
   944                           
   945 ;; *************** function _lcd_init *****************
   946 ;; Defined at:
   947 ;;		line 60 in file "lcd.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;		None
   950 ;; Auto vars:     Size  Location     Type
   951 ;;		None
   952 ;; Return value:  Size  Location     Type
   953 ;;                  1    wreg      void 
   954 ;; Registers used:
   955 ;;		wreg, status,2, status,0, cstack
   956 ;; Tracked objects:
   957 ;;		On entry : 0/0
   958 ;;		On exit  : 0/0
   959 ;;		Unchanged: 0/0
   960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   961 ;;      Params:         0       0       0       0       0       0       0       0       0
   962 ;;      Locals:         0       0       0       0       0       0       0       0       0
   963 ;;      Temps:          0       0       0       0       0       0       0       0       0
   964 ;;      Totals:         0       0       0       0       0       0       0       0       0
   965 ;;Total ram usage:        0 bytes
   966 ;; Hardware stack levels used: 1
   967 ;; Hardware stack levels required when called: 2
   968 ;; This function calls:
   969 ;;		_atraso_ms
   970 ;;		_lcd_cmd
   971 ;; This function is called by:
   972 ;;		_main
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text4
   977   000C18                     __ptext4:
   978                           	callstack 0
   979   000C18                     _lcd_init:
   980                           	callstack 28
   981   000C18                     
   982                           ;lcd.c: 62:  PORTEbits.RE1=0;
   983   000C18  9284               	bcf	132,1,c	;volatile
   984                           
   985                           ;lcd.c: 63:  PORTEbits.RE0=0;
   986   000C1A  9084               	bcf	132,0,c	;volatile
   987   000C1C                     
   988                           ;lcd.c: 64:  atraso_ms(20);
   989   000C1C  0E00               	movlw	0
   990   000C1E  6E02               	movwf	(atraso_ms@valor+1)^0,c
   991   000C20  0E14               	movlw	20
   992   000C22  6E01               	movwf	atraso_ms@valor^0,c
   993   000C24  EC62  F006         	call	_atraso_ms	;wreg free
   994   000C28                     
   995                           ;lcd.c: 65:  PORTEbits.RE1=1;
   996   000C28  8284               	bsf	132,1,c	;volatile
   997                           
   998                           ;lcd.c: 67:  lcd_cmd(0x38);
   999   000C2A  0E38               	movlw	56
  1000   000C2C  EC9B  F006         	call	_lcd_cmd
  1001                           
  1002                           ;lcd.c: 68:  atraso_ms(5);
  1003   000C30  0E00               	movlw	0
  1004   000C32  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1005   000C34  0E05               	movlw	5
  1006   000C36  6E01               	movwf	atraso_ms@valor^0,c
  1007   000C38  EC62  F006         	call	_atraso_ms	;wreg free
  1008                           
  1009                           ;lcd.c: 69:  lcd_cmd(0x38);
  1010   000C3C  0E38               	movlw	56
  1011   000C3E  EC9B  F006         	call	_lcd_cmd
  1012                           
  1013                           ;lcd.c: 70:         atraso_ms(1);
  1014   000C42  0E00               	movlw	0
  1015   000C44  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1016   000C46  0E01               	movlw	1
  1017   000C48  6E01               	movwf	atraso_ms@valor^0,c
  1018   000C4A  EC62  F006         	call	_atraso_ms	;wreg free
  1019                           
  1020                           ;lcd.c: 71:  lcd_cmd(0x38);
  1021   000C4E  0E38               	movlw	56
  1022   000C50  EC9B  F006         	call	_lcd_cmd
  1023                           
  1024                           ;lcd.c: 72:  lcd_cmd(0x08);
  1025   000C54  0E08               	movlw	8
  1026   000C56  EC9B  F006         	call	_lcd_cmd
  1027                           
  1028                           ;lcd.c: 73:  lcd_cmd(0x0F);
  1029   000C5A  0E0F               	movlw	15
  1030   000C5C  EC9B  F006         	call	_lcd_cmd
  1031                           
  1032                           ;lcd.c: 74:  lcd_cmd(0x01);
  1033   000C60  0E01               	movlw	1
  1034   000C62  EC9B  F006         	call	_lcd_cmd
  1035                           
  1036                           ;lcd.c: 75:  lcd_cmd(0x38);
  1037   000C66  0E38               	movlw	56
  1038   000C68  EC9B  F006         	call	_lcd_cmd
  1039                           
  1040                           ;lcd.c: 76:         lcd_cmd(0x80);
  1041   000C6C  0E80               	movlw	128
  1042   000C6E  EC9B  F006         	call	_lcd_cmd
  1043   000C72  0012               	return		;funcret
  1044   000C74                     __end_of_lcd_init:
  1045                           	callstack 0
  1046                           
  1047 ;; *************** function _lcd_cmd *****************
  1048 ;; Defined at:
  1049 ;;		line 38 in file "lcd.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  val             1    wreg     unsigned char 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;  val             1    5[COMRAM] unsigned char 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1063 ;;      Params:         0       0       0       0       0       0       0       0       0
  1064 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1066 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1067 ;;Total ram usage:        1 bytes
  1068 ;; Hardware stack levels used: 1
  1069 ;; Hardware stack levels required when called: 1
  1070 ;; This function calls:
  1071 ;;		_atraso_ms
  1072 ;;		_lcd_wr
  1073 ;; This function is called by:
  1074 ;;		_lcd_init
  1075 ;;		_main
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           	psect	text5
  1080   000D36                     __ptext5:
  1081                           	callstack 0
  1082   000D36                     _lcd_cmd:
  1083                           	callstack 28
  1084                           
  1085                           ;incstack = 0
  1086                           ;lcd_cmd@val stored from wreg
  1087   000D36  6E06               	movwf	lcd_cmd@val^0,c
  1088   000D38                     
  1089                           ;lcd.c: 38: void lcd_cmd(unsigned char val);lcd.c: 39: {;lcd.c: 40:  PORTEbits.RE1=1;
  1090   000D38  8284               	bsf	132,1,c	;volatile
  1091   000D3A                     
  1092                           ;lcd.c: 41:         lcd_wr(val);
  1093   000D3A  5006               	movf	lcd_cmd@val^0,w,c
  1094   000D3C  ECB5  F006         	call	_lcd_wr
  1095   000D40                     
  1096                           ;lcd.c: 42:         PORTEbits.RE0=0;
  1097   000D40  9084               	bcf	132,0,c	;volatile
  1098   000D42                     
  1099                           ;lcd.c: 43:         atraso_ms(3);
  1100   000D42  0E00               	movlw	0
  1101   000D44  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1102   000D46  0E03               	movlw	3
  1103   000D48  6E01               	movwf	atraso_ms@valor^0,c
  1104   000D4A  EC62  F006         	call	_atraso_ms	;wreg free
  1105   000D4E                     
  1106                           ;lcd.c: 44:         PORTEbits.RE1=0;
  1107   000D4E  9284               	bcf	132,1,c	;volatile
  1108   000D50                     
  1109                           ;lcd.c: 45:         atraso_ms(3);
  1110   000D50  0E00               	movlw	0
  1111   000D52  6E02               	movwf	(atraso_ms@valor+1)^0,c
  1112   000D54  0E03               	movlw	3
  1113   000D56  6E01               	movwf	atraso_ms@valor^0,c
  1114   000D58  EC62  F006         	call	_atraso_ms	;wreg free
  1115   000D5C                     
  1116                           ;lcd.c: 46:  PORTEbits.RE1=1;
  1117   000D5C  8284               	bsf	132,1,c	;volatile
  1118   000D5E  0012               	return		;funcret
  1119   000D60                     __end_of_lcd_cmd:
  1120                           	callstack 0
  1121                           
  1122 ;; *************** function _lcd_wr *****************
  1123 ;; Defined at:
  1124 ;;		line 33 in file "lcd.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  val             1    wreg     unsigned char 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  val             1    0[COMRAM] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1138 ;;      Params:         0       0       0       0       0       0       0       0       0
  1139 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1140 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1141 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1142 ;;Total ram usage:        1 bytes
  1143 ;; Hardware stack levels used: 1
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_lcd_cmd
  1148 ;;		_lcd_dat
  1149 ;; This function uses a non-reentrant model
  1150 ;;
  1151                           
  1152                           	psect	text6
  1153   000D6A                     __ptext6:
  1154                           	callstack 0
  1155   000D6A                     _lcd_wr:
  1156                           	callstack 28
  1157                           
  1158                           ;incstack = 0
  1159                           ;lcd_wr@val stored from wreg
  1160   000D6A  6E01               	movwf	lcd_wr@val^0,c
  1161   000D6C                     
  1162                           ;lcd.c: 33: void lcd_wr(unsigned char val);lcd.c: 34: {;lcd.c: 35:   PORTD=val;
  1163   000D6C  C001  FF83         	movff	lcd_wr@val,3971	;volatile
  1164   000D70  0012               	return		;funcret
  1165   000D72                     __end_of_lcd_wr:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function _atraso_ms *****************
  1169 ;; Defined at:
  1170 ;;		line 26 in file "atraso.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  valor           2    0[COMRAM] unsigned int 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;  i               2    2[COMRAM] unsigned int 
  1175 ;;  j               1    4[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1185 ;;      Params:         2       0       0       0       0       0       0       0       0
  1186 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1188 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1189 ;;Total ram usage:        5 bytes
  1190 ;; Hardware stack levels used: 1
  1191 ;; This function calls:
  1192 ;;		Nothing
  1193 ;; This function is called by:
  1194 ;;		_lcd_cmd
  1195 ;;		_lcd_dat
  1196 ;;		_lcd_init
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           
  1201                           	psect	text7
  1202   000CC4                     __ptext7:
  1203                           	callstack 0
  1204   000CC4                     _atraso_ms:
  1205                           	callstack 28
  1206   000CC4                     
  1207                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1208   000CC4  0E00               	movlw	0
  1209   000CC6  6E04               	movwf	(atraso_ms@i+1)^0,c
  1210   000CC8  0E00               	movlw	0
  1211   000CCA  6E03               	movwf	atraso_ms@i^0,c
  1212   000CCC  EF7A  F006         	goto	l1093
  1213   000CD0                     l1081:
  1214                           
  1215                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1216   000CD0  0E00               	movlw	0
  1217   000CD2  6E05               	movwf	atraso_ms@j^0,c
  1218   000CD4                     l5:
  1219   000CD4  F000               	nop		;# 
  1220   000CD6  F000               	nop		;# 
  1221   000CD8  F000               	nop		;# 
  1222   000CDA  F000               	nop		;# 
  1223   000CDC  F000               	nop		;# 
  1224   000CDE                     
  1225                           ;atraso.c: 41:    }
  1226   000CDE  2A05               	incf	atraso_ms@j^0,f,c
  1227   000CE0  0EC7               	movlw	199
  1228   000CE2  6405               	cpfsgt	atraso_ms@j^0,c
  1229   000CE4  EF76  F006         	goto	u101
  1230   000CE8  EF78  F006         	goto	u100
  1231   000CEC                     u101:
  1232   000CEC  EF6A  F006         	goto	l5
  1233   000CF0                     u100:
  1234   000CF0                     
  1235                           ;atraso.c: 42:  }
  1236   000CF0  4A03               	infsnz	atraso_ms@i^0,f,c
  1237   000CF2  2A04               	incf	(atraso_ms@i+1)^0,f,c
  1238   000CF4                     l1093:
  1239   000CF4  5001               	movf	atraso_ms@valor^0,w,c
  1240   000CF6  5C03               	subwf	atraso_ms@i^0,w,c
  1241   000CF8  5002               	movf	(atraso_ms@valor+1)^0,w,c
  1242   000CFA  5804               	subwfb	(atraso_ms@i+1)^0,w,c
  1243   000CFC  A0D8               	btfss	status,0,c
  1244   000CFE  EF83  F006         	goto	u111
  1245   000D02  EF85  F006         	goto	u110
  1246   000D06                     u111:
  1247   000D06  EF68  F006         	goto	l1081
  1248   000D0A                     u110:
  1249   000D0A  0012               	return		;funcret
  1250   000D0C                     __end_of_atraso_ms:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _display7s *****************
  1254 ;; Defined at:
  1255 ;;		line 35 in file "display7s.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  v               1    wreg     unsigned char 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  v               1    2[COMRAM] unsigned char 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      unsigned char 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1269 ;;      Params:         0       0       0       0       0       0       0       0       0
  1270 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1271 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1272 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1273 ;;Total ram usage:        3 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text8
  1283   000A3A                     __ptext8:
  1284                           	callstack 0
  1285   000A3A                     _display7s:
  1286                           	callstack 30
  1287                           
  1288                           ;incstack = 0
  1289                           ;display7s@v stored from wreg
  1290   000A3A  6E03               	movwf	display7s@v^0,c
  1291   000A3C                     
  1292                           ;display7s.c: 35: unsigned char display7s(unsigned char v);display7s.c: 36: {;display7s.
      +                          c: 37:   switch(v)
  1293   000A3C  EF56  F005         	goto	l915
  1294   000A40                     l841:
  1295                           
  1296                           ;display7s.c: 40:       return 0x3F;
  1297   000A40  0E3F               	movlw	63
  1298   000A42  EFA7  F005         	goto	l13
  1299   000A46                     l845:
  1300                           
  1301                           ;display7s.c: 42:       return 0x06;
  1302   000A46  0E06               	movlw	6
  1303   000A48  EFA7  F005         	goto	l13
  1304   000A4C                     l849:
  1305                           
  1306                           ;display7s.c: 44:       return 0x5B;
  1307   000A4C  0E5B               	movlw	91
  1308   000A4E  EFA7  F005         	goto	l13
  1309   000A52                     l853:
  1310                           
  1311                           ;display7s.c: 46:       return 0x4F;
  1312   000A52  0E4F               	movlw	79
  1313   000A54  EFA7  F005         	goto	l13
  1314   000A58                     l857:
  1315                           
  1316                           ;display7s.c: 48:       return 0x66;
  1317   000A58  0E66               	movlw	102
  1318   000A5A  EFA7  F005         	goto	l13
  1319   000A5E                     l861:
  1320                           
  1321                           ;display7s.c: 50:       return 0x6D;
  1322   000A5E  0E6D               	movlw	109
  1323   000A60  EFA7  F005         	goto	l13
  1324   000A64                     l865:
  1325                           
  1326                           ;display7s.c: 52:       return 0x7D;
  1327   000A64  0E7D               	movlw	125
  1328   000A66  EFA7  F005         	goto	l13
  1329   000A6A                     l869:
  1330                           
  1331                           ;display7s.c: 54:       return 0x07;
  1332   000A6A  0E07               	movlw	7
  1333   000A6C  EFA7  F005         	goto	l13
  1334   000A70                     l873:
  1335                           
  1336                           ;display7s.c: 56:       return 0x7F;
  1337   000A70  0E7F               	movlw	127
  1338   000A72  EFA7  F005         	goto	l13
  1339   000A76                     l877:
  1340                           
  1341                           ;display7s.c: 58:       return 0x6F;
  1342   000A76  0E6F               	movlw	111
  1343   000A78  EFA7  F005         	goto	l13
  1344   000A7C                     l881:
  1345                           
  1346                           ;display7s.c: 60:       return 0x77;
  1347   000A7C  0E77               	movlw	119
  1348   000A7E  EFA7  F005         	goto	l13
  1349   000A82                     l885:
  1350                           
  1351                           ;display7s.c: 62:       return 0x7c;
  1352   000A82  0E7C               	movlw	124
  1353   000A84  EFA7  F005         	goto	l13
  1354   000A88                     l889:
  1355                           
  1356                           ;display7s.c: 64:       return 0x58;
  1357   000A88  0E58               	movlw	88
  1358   000A8A  EFA7  F005         	goto	l13
  1359   000A8E                     l893:
  1360                           
  1361                           ;display7s.c: 66:       return 0x5E;
  1362   000A8E  0E5E               	movlw	94
  1363   000A90  EFA7  F005         	goto	l13
  1364   000A94                     l897:
  1365                           
  1366                           ;display7s.c: 68:       return 0x79;
  1367   000A94  0E79               	movlw	121
  1368   000A96  EFA7  F005         	goto	l13
  1369   000A9A                     l901:
  1370                           
  1371                           ;display7s.c: 70:       return 0x71;
  1372   000A9A  0E71               	movlw	113
  1373   000A9C  EFA7  F005         	goto	l13
  1374   000AA0                     l905:
  1375                           
  1376                           ;display7s.c: 72:           return 0x73;
  1377   000AA0  0E73               	movlw	115
  1378   000AA2  EFA7  F005         	goto	l13
  1379   000AA6                     l909:
  1380                           
  1381                           ;display7s.c: 74:       return 0;
  1382   000AA6  0E00               	movlw	0
  1383   000AA8  EFA7  F005         	goto	l13
  1384   000AAC                     l915:
  1385   000AAC  5003               	movf	display7s@v^0,w,c
  1386   000AAE  6E01               	movwf	??_display7s^0,c
  1387   000AB0  6A02               	clrf	(??_display7s+1)^0,c
  1388                           
  1389                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1390                           ; Switch size 1, requested type "simple"
  1391                           ; Number of cases is 1, Range of values is 0 to 0
  1392                           ; switch strategies available:
  1393                           ; Name         Instructions Cycles
  1394                           ; simple_byte            4     3 (average)
  1395                           ;	Chosen strategy is simple_byte
  1396   000AB2  5002               	movf	(??_display7s+1)^0,w,c
  1397   000AB4  0A00               	xorlw	0	; case 0
  1398   000AB6  B4D8               	btfsc	status,2,c
  1399   000AB8  EF60  F005         	goto	l1283
  1400   000ABC  EF53  F005         	goto	l909
  1401   000AC0                     l1283:
  1402                           
  1403                           ; Switch size 1, requested type "simple"
  1404                           ; Number of cases is 17, Range of values is 0 to 16
  1405                           ; switch strategies available:
  1406                           ; Name         Instructions Cycles
  1407                           ; simple_byte           52    27 (average)
  1408                           ;	Chosen strategy is simple_byte
  1409   000AC0  5001               	movf	??_display7s^0,w,c
  1410   000AC2  0A00               	xorlw	0	; case 0
  1411   000AC4  B4D8               	btfsc	status,2,c
  1412   000AC6  EF20  F005         	goto	l841
  1413   000ACA  0A01               	xorlw	1	; case 1
  1414   000ACC  B4D8               	btfsc	status,2,c
  1415   000ACE  EF23  F005         	goto	l845
  1416   000AD2  0A03               	xorlw	3	; case 2
  1417   000AD4  B4D8               	btfsc	status,2,c
  1418   000AD6  EF26  F005         	goto	l849
  1419   000ADA  0A01               	xorlw	1	; case 3
  1420   000ADC  B4D8               	btfsc	status,2,c
  1421   000ADE  EF29  F005         	goto	l853
  1422   000AE2  0A07               	xorlw	7	; case 4
  1423   000AE4  B4D8               	btfsc	status,2,c
  1424   000AE6  EF2C  F005         	goto	l857
  1425   000AEA  0A01               	xorlw	1	; case 5
  1426   000AEC  B4D8               	btfsc	status,2,c
  1427   000AEE  EF2F  F005         	goto	l861
  1428   000AF2  0A03               	xorlw	3	; case 6
  1429   000AF4  B4D8               	btfsc	status,2,c
  1430   000AF6  EF32  F005         	goto	l865
  1431   000AFA  0A01               	xorlw	1	; case 7
  1432   000AFC  B4D8               	btfsc	status,2,c
  1433   000AFE  EF35  F005         	goto	l869
  1434   000B02  0A0F               	xorlw	15	; case 8
  1435   000B04  B4D8               	btfsc	status,2,c
  1436   000B06  EF38  F005         	goto	l873
  1437   000B0A  0A01               	xorlw	1	; case 9
  1438   000B0C  B4D8               	btfsc	status,2,c
  1439   000B0E  EF3B  F005         	goto	l877
  1440   000B12  0A03               	xorlw	3	; case 10
  1441   000B14  B4D8               	btfsc	status,2,c
  1442   000B16  EF3E  F005         	goto	l881
  1443   000B1A  0A01               	xorlw	1	; case 11
  1444   000B1C  B4D8               	btfsc	status,2,c
  1445   000B1E  EF41  F005         	goto	l885
  1446   000B22  0A07               	xorlw	7	; case 12
  1447   000B24  B4D8               	btfsc	status,2,c
  1448   000B26  EF44  F005         	goto	l889
  1449   000B2A  0A01               	xorlw	1	; case 13
  1450   000B2C  B4D8               	btfsc	status,2,c
  1451   000B2E  EF47  F005         	goto	l893
  1452   000B32  0A03               	xorlw	3	; case 14
  1453   000B34  B4D8               	btfsc	status,2,c
  1454   000B36  EF4A  F005         	goto	l897
  1455   000B3A  0A01               	xorlw	1	; case 15
  1456   000B3C  B4D8               	btfsc	status,2,c
  1457   000B3E  EF4D  F005         	goto	l901
  1458   000B42  0A1F               	xorlw	31	; case 16
  1459   000B44  B4D8               	btfsc	status,2,c
  1460   000B46  EF50  F005         	goto	l905
  1461   000B4A  EF53  F005         	goto	l909
  1462   000B4E                     l13:
  1463   000B4E  0012               	return		;funcret
  1464   000B50                     __end_of_display7s:
  1465                           	callstack 0
  1466                           
  1467                           	psect	rparam
  1468   000000                     
  1469                           	psect	idloc
  1470                           
  1471                           ;Config register IDLOC0 @ 0x200000
  1472                           ;	unspecified, using default values
  1473   200000                     	org	2097152
  1474   200000  FF                 	db	255
  1475                           
  1476                           ;Config register IDLOC1 @ 0x200001
  1477                           ;	unspecified, using default values
  1478   200001                     	org	2097153
  1479   200001  FF                 	db	255
  1480                           
  1481                           ;Config register IDLOC2 @ 0x200002
  1482                           ;	unspecified, using default values
  1483   200002                     	org	2097154
  1484   200002  FF                 	db	255
  1485                           
  1486                           ;Config register IDLOC3 @ 0x200003
  1487                           ;	unspecified, using default values
  1488   200003                     	org	2097155
  1489   200003  FF                 	db	255
  1490                           
  1491                           ;Config register IDLOC4 @ 0x200004
  1492                           ;	unspecified, using default values
  1493   200004                     	org	2097156
  1494   200004  FF                 	db	255
  1495                           
  1496                           ;Config register IDLOC5 @ 0x200005
  1497                           ;	unspecified, using default values
  1498   200005                     	org	2097157
  1499   200005  FF                 	db	255
  1500                           
  1501                           ;Config register IDLOC6 @ 0x200006
  1502                           ;	unspecified, using default values
  1503   200006                     	org	2097158
  1504   200006  FF                 	db	255
  1505                           
  1506                           ;Config register IDLOC7 @ 0x200007
  1507                           ;	unspecified, using default values
  1508   200007                     	org	2097159
  1509   200007  FF                 	db	255
  1510                           
  1511                           	psect	config
  1512                           
  1513                           ;Config register CONFIG1L @ 0x300000
  1514                           ;	PLL Prescaler Selection bits
  1515                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1516                           ;	System Clock Postscaler Selection bits
  1517                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1518                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1519                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1520   300000                     	org	3145728
  1521   300000  29                 	db	41
  1522                           
  1523                           ;Config register CONFIG1H @ 0x300001
  1524                           ;	Oscillator Selection bits
  1525                           ;	FOSC = HS, HS oscillator (HS)
  1526                           ;	Fail-Safe Clock Monitor Enable bit
  1527                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1528                           ;	Internal/External Oscillator Switchover bit
  1529                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1530   300001                     	org	3145729
  1531   300001  0C                 	db	12
  1532                           
  1533                           ;Config register CONFIG2L @ 0x300002
  1534                           ;	Power-up Timer Enable bit
  1535                           ;	PWRT = ON, PWRT enabled
  1536                           ;	Brown-out Reset Enable bits
  1537                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1538                           ;	Brown-out Reset Voltage bits
  1539                           ;	BORV = 3, Minimum setting 2.05V
  1540                           ;	USB Voltage Regulator Enable bit
  1541                           ;	VREGEN = OFF, USB voltage regulator disabled
  1542   300002                     	org	3145730
  1543   300002  18                 	db	24
  1544                           
  1545                           ;Config register CONFIG2H @ 0x300003
  1546                           ;	Watchdog Timer Enable bit
  1547                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1548                           ;	Watchdog Timer Postscale Select bits
  1549                           ;	WDTPS = 32768, 1:32768
  1550   300003                     	org	3145731
  1551   300003  1E                 	db	30
  1552                           
  1553                           ; Padding undefined space
  1554   300004                     	org	3145732
  1555   300004  FF                 	db	255
  1556                           
  1557                           ;Config register CONFIG3H @ 0x300005
  1558                           ;	CCP2 MUX bit
  1559                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1560                           ;	PORTB A/D Enable bit
  1561                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1562                           ;	Low-Power Timer 1 Oscillator Enable bit
  1563                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1564                           ;	MCLR Pin Enable bit
  1565                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1566   300005                     	org	3145733
  1567   300005  81                 	db	129
  1568                           
  1569                           ;Config register CONFIG4L @ 0x300006
  1570                           ;	Stack Full/Underflow Reset Enable bit
  1571                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1572                           ;	Single-Supply ICSP Enable bit
  1573                           ;	LVP = OFF, Single-Supply ICSP disabled
  1574                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1575                           ;	ICPRT = OFF, ICPORT disabled
  1576                           ;	Extended Instruction Set Enable bit
  1577                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1578                           ;	Background Debugger Enable bit
  1579                           ;	DEBUG = 0x1, unprogrammed default
  1580   300006                     	org	3145734
  1581   300006  80                 	db	128
  1582                           
  1583                           ; Padding undefined space
  1584   300007                     	org	3145735
  1585   300007  FF                 	db	255
  1586                           
  1587                           ;Config register CONFIG5L @ 0x300008
  1588                           ;	Code Protection bit
  1589                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1590                           ;	Code Protection bit
  1591                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1592                           ;	Code Protection bit
  1593                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1594                           ;	Code Protection bit
  1595                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1596   300008                     	org	3145736
  1597   300008  0F                 	db	15
  1598                           
  1599                           ;Config register CONFIG5H @ 0x300009
  1600                           ;	Boot Block Code Protection bit
  1601                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1602                           ;	Data EEPROM Code Protection bit
  1603                           ;	CPD = OFF, Data EEPROM is not code-protected
  1604   300009                     	org	3145737
  1605   300009  C0                 	db	192
  1606                           
  1607                           ;Config register CONFIG6L @ 0x30000A
  1608                           ;	Write Protection bit
  1609                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1610                           ;	Write Protection bit
  1611                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1612                           ;	Write Protection bit
  1613                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1614                           ;	Write Protection bit
  1615                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1616   30000A                     	org	3145738
  1617   30000A  0F                 	db	15
  1618                           
  1619                           ;Config register CONFIG6H @ 0x30000B
  1620                           ;	Configuration Register Write Protection bit
  1621                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1622                           ;	Boot Block Write Protection bit
  1623                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1624                           ;	Data EEPROM Write Protection bit
  1625                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1626   30000B                     	org	3145739
  1627   30000B  E0                 	db	224
  1628                           
  1629                           ;Config register CONFIG7L @ 0x30000C
  1630                           ;	Table Read Protection bit
  1631                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1632                           ;	Table Read Protection bit
  1633                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1634                           ;	Table Read Protection bit
  1635                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1636                           ;	Table Read Protection bit
  1637                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1638   30000C                     	org	3145740
  1639   30000C  0F                 	db	15
  1640                           
  1641                           ;Config register CONFIG7H @ 0x30000D
  1642                           ;	Boot Block Table Read Protection bit
  1643                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1644   30000D                     	org	3145741
  1645   30000D  40                 	db	64
  1646                           tosu	equ	0xFFF
  1647                           tosh	equ	0xFFE
  1648                           tosl	equ	0xFFD
  1649                           stkptr	equ	0xFFC
  1650                           pclatu	equ	0xFFB
  1651                           pclath	equ	0xFFA
  1652                           pcl	equ	0xFF9
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           prodh	equ	0xFF4
  1658                           prodl	equ	0xFF3
  1659                           indf0	equ	0xFEF
  1660                           postinc0	equ	0xFEE
  1661                           postdec0	equ	0xFED
  1662                           preinc0	equ	0xFEC
  1663                           plusw0	equ	0xFEB
  1664                           fsr0h	equ	0xFEA
  1665                           fsr0l	equ	0xFE9
  1666                           wreg	equ	0xFE8
  1667                           indf1	equ	0xFE7
  1668                           postinc1	equ	0xFE6
  1669                           postdec1	equ	0xFE5
  1670                           preinc1	equ	0xFE4
  1671                           plusw1	equ	0xFE3
  1672                           fsr1h	equ	0xFE2
  1673                           fsr1l	equ	0xFE1
  1674                           bsr	equ	0xFE0
  1675                           indf2	equ	0xFDF
  1676                           postinc2	equ	0xFDE
  1677                           postdec2	equ	0xFDD
  1678                           preinc2	equ	0xFDC
  1679                           plusw2	equ	0xFDB
  1680                           fsr2h	equ	0xFDA
  1681                           fsr2l	equ	0xFD9
  1682                           status	equ	0xFD8

Data Sizes:
    Strings     52
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      15
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_7(CODE[6]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[12]), 
		 -> STR_3(CODE[5]), STR_2(CODE[12]), STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_lcd_numb
    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    6587
                                             11 COMRAM     4     4      0
                          _atraso_ms
                          _display7s
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1511
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             5     3      2    1399
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     889
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1741
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     889
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     852
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _display7s                                            3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atraso_ms
   _display7s
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      F       F       1       15.8%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BITBIGSFRhllh        6      0       0      23        0.0%
BITBIGSFRhlll        7      0       0      24        0.0%
BITBIGSFRlh          1      0       0      25        0.0%
BITBIGSFRll         21      0       0      26        0.0%
BIGRAM             7FF      0       0      27        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Nov 10 14:59:51 2022

                      l5 0CD4                        l8 0D0A                       l13 0B4E  
                     l43 0D70                       l52 0C72                       l46 0D5E  
                     l49 0D34                       l74 0C16                       l58 0CC2  
                    l110 09F6                      l105 08B6                      l106 095A  
                    l117 0A36                      l901 0A9A                      l905 0AA0  
                    l841 0A40                      l809 0D6C                      l915 0AAC  
                    l909 0AA6                      l861 0A5E                      l853 0A52  
                    l845 0A46                      l839 0A3C                      l881 0A7C  
                    l873 0A70                      l865 0A64                      l857 0A58  
                    l849 0A4C                      l893 0A8E                      l885 0A82  
                    l877 0A76                      l869 0A6A                      l897 0A94  
                    l889 0A88                      u100 0CF0                      u101 0CEC  
                    u110 0D0A                      u111 0D06                      u120 0CC2  
                    u121 0CBE                      u130 08CC                      u131 08C8  
                    u140 08E8                      u141 08E4                      u150 0968  
                    u151 0964                      u160 0984                      u161 0980  
                    u170 0A04                      u171 0A00                      u180 0A12  
                    u181 0A0E                     l1101 0D42                     l1103 0D4E  
                   l1111 0D10                     l1105 0D50                     l1121 0D32  
                   l1113 0D16                     l1201 08A4                     l1107 0D5C  
                   l1123 0C18                     l1115 0D18                     l1131 0C7C  
                   l1211 08CC                     l1203 08AA                     l1125 0C1C  
                   l1117 0D24                     l1109 0D0E                     l1141 0B5C  
                   l1133 0C98                     l1221 0904                     l1213 08E8  
                   l1205 08BA                     l1127 0C28                     l1119 0D26  
                   l1151 0B84                     l1143 0B64                     l1135 0C9A  
                   l1223 0910                     l1215 08EC                     l1231 092C  
                   l1207 08BC                     l1081 0CD0                     l1153 0B8C  
                   l1145 0B6C                     l1161 0BA4                     l1137 0B50  
                   l1129 0C74                     l1241 0988                     l1233 0938  
                   l1225 0912                     l1217 08F2                     l1209 08BE  
                   l1091 0CF0                     l1155 0B94                     l1147 0B74  
                   l1163 0C10                     l1139 0B54                     l1251 09AE  
                   l1243 098E                     l1235 0944                     l1227 0914  
                   l1219 08FE                     l1171 0842                     l1093 0CF4  
                   l1157 0B9C                     l1149 0B7C                     l1261 09E0  
                   l1253 09B0                     l1245 099A                     l1237 0968  
                   l1229 091C                     l1181 085C                     l1173 0844  
                   l1087 0CDE                     l1079 0CC4                     l1095 0D38  
                   l1271 0A30                     l1263 0A04                     l1255 09B8  
                   l1247 09A0                     l1239 0984                     l1191 0874  
                   l1183 085E                     l1175 0846                     l1089 0CE0  
                   l1097 0D3A                     l1281 0BBA                     l1265 0A12  
                   l1249 09AC                     l1257 09C8                     l1193 0880  
                   l1185 0864                     l1177 0848                     l1169 0836  
                   l1283 0AC0                     l1099 0D40                     l1267 0A18  
                   l1259 09D4                     l1195 0886                     l1187 0868  
                   l1179 084A                     l1269 0A24                     l1197 0892  
                   l1189 086E                     l1199 0898                     STR_1 0823  
                   STR_2 0801                     STR_3 0830                     STR_4 080D  
            lcd_numb@str 0007                     STR_5 0819                     STR_6 080D  
                   STR_7 082A                     _LATD 000F8C                     _main 0836  
                   start 0000             ___param_bank 000000                    ?_main 0001  
                  _PORTD 000F83                    _TRISB 000F93                    _TRISD 000F95  
                  _TRISE 000F96          __end_of_lcd_dat 0D36          __end_of_lcd_cmd 0D60  
        __end_of_lcd_str 0CC4                    tablat 000FF5                    status 000FD8  
        __initialization 0D60             __end_of_main 0A3A                   ??_main 000C  
          __activetblptr 000002         __end_of_lcd_init 0C74         __end_of_lcd_numb 0C18  
                 _lcd_wr 0D6A                   isa$std 000001                ??_lcd_dat 0006  
              ??_lcd_cmd 0006                ??_lcd_str 0009             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          main@visitante 000E               __accesstop 0060  __end_of__initialization 0D60  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  ?_lcd_wr 0001  
              ?_lcd_init 0001                ?_lcd_numb 0007                  __Hparam 0000  
                __Lparam 0000        __end_of_display7s 0B50        __end_of_atraso_ms 0D0C  
           __psmallconst 0800                  __pcinit 0D60                  __ramtop 0800  
                __ptext0 0836                  __ptext1 0C74                  __ptext2 0B50  
                __ptext3 0D0C                  __ptext4 0C18                  __ptext5 0D36  
                __ptext6 0D6A                  __ptext7 0CC4                  __ptext8 0A3A  
                _lcd_dat 0D0C                  _lcd_cmd 0D36                  _lcd_str 0C74  
             ??_lcd_init 0007               ??_lcd_numb 0009     end_of_initialization 0D60  
          __Lmediumconst 0000                _PORTBbits 000F81                _PORTEbits 000F84  
              _TRISBbits 000F93               lcd_dat@val 0006               lcd_cmd@val 0006  
             display7s@v 0003               lcd_str@str 0007               atraso_ms@i 0003  
             atraso_ms@j 0005           __end_of_lcd_wr 0D72      start_initialization 0D60  
     lcd_numb@num_placar 000B                 ??_lcd_wr 0001                _display7s 0A3A  
               ?_lcd_dat 0001                 ?_lcd_cmd 0001                 ?_lcd_str 0007  
              _atraso_ms 0CC4              __smallconst 0800           atraso_ms@valor 0001  
             ?_display7s 0001               ?_atraso_ms 0001                lcd_wr@val 0001  
               __Hrparam 0000                 __Lrparam 0000                 _lcd_init 0C18  
               _lcd_numb 0B50                 isa$xinst 000000                 main@casa 000C  
               lcd_str@i 000B              ??_display7s 0001              ??_atraso_ms 0003  
