

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Nov 09 16:47:33 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.40
    26                           ; Generated 17/11/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _TRISBbits	set	3987
    61   000000                     _PORTBbits	set	3969
    62   000000                     _PORTD	set	3971
    63   000000                     _TRISB	set	3987
    64   000000                     _TRISD	set	3989
    65   000000                     _PORTEbits	set	3972
    66   000000                     _TRISE	set	3990
    67                           
    68                           	psect	smallconst
    69   000800                     __psmallconst:
    70                           	callstack 0
    71   000800  00                 	db	0
    72   000801                     STR_9:
    73   000801  76                 	db	118	;'v'
    74   000802  69                 	db	105	;'i'
    75   000803  73                 	db	115	;'s'
    76   000804  69                 	db	105	;'i'
    77   000805  74                 	db	116	;'t'
    78   000806  61                 	db	97	;'a'
    79   000807  6E                 	db	110	;'n'
    80   000808  74                 	db	116	;'t'
    81   000809  65                 	db	101	;'e'
    82   00080A  20                 	db	32
    83   00080B  76                 	db	118	;'v'
    84   00080C  65                 	db	101	;'e'
    85   00080D  6E                 	db	110	;'n'
    86   00080E  63                 	db	99	;'c'
    87   00080F  65                 	db	101	;'e'
    88   000810  64                 	db	100	;'d'
    89   000811  6F                 	db	111	;'o'
    90   000812  72                 	db	114	;'r'
    91   000813  00                 	db	0
    92   000814                     STR_6:
    93   000814  63                 	db	99	;'c'
    94   000815  61                 	db	97	;'a'
    95   000816  73                 	db	115	;'s'
    96   000817  61                 	db	97	;'a'
    97   000818  20                 	db	32
    98   000819  76                 	db	118	;'v'
    99   00081A  65                 	db	101	;'e'
   100   00081B  6E                 	db	110	;'n'
   101   00081C  63                 	db	99	;'c'
   102   00081D  65                 	db	101	;'e'
   103   00081E  64                 	db	100	;'d'
   104   00081F  6F                 	db	111	;'o'
   105   000820  72                 	db	114	;'r'
   106   000821  00                 	db	0
   107   000822                     STR_3:
   108   000822  56                 	db	86	;'V'
   109   000823  49                 	db	73	;'I'
   110   000824  53                 	db	83	;'S'
   111   000825  49                 	db	73	;'I'
   112   000826  54                 	db	84	;'T'
   113   000827  41                 	db	65	;'A'
   114   000828  4E                 	db	78	;'N'
   115   000829  54                 	db	84	;'T'
   116   00082A  45                 	db	69	;'E'
   117   00082B  3A                 	db	58	;':'
   118   00082C  20                 	db	32
   119   00082D  00                 	db	0
   120   00082E                     STR_2:
   121   00082E  43                 	db	67	;'C'
   122   00082F  41                 	db	65	;'A'
   123   000830  53                 	db	83	;'S'
   124   000831  41                 	db	65	;'A'
   125   000832  3A                 	db	58	;':'
   126   000833  20                 	db	32
   127   000834  00                 	db	0
   128   000835                     STR_1:
   129   000835  30                 	db	48	;'0'
   130   000836  00                 	db	0
   131   000837  00                 	db	0	; dummy byte at the end
   132   000000                     
   133                           ; #config settings
   134                           
   135                           	psect	cinit
   136   000C12                     __pcinit:
   137                           	callstack 0
   138   000C12                     start_initialization:
   139                           	callstack 0
   140   000C12                     __initialization:
   141                           	callstack 0
   142                           
   143                           ; Clear objects allocated to COMRAM (65 bytes)
   144   000C12  EE00  F001         	lfsr	0,__pbssCOMRAM
   145   000C16  0E41               	movlw	65
   146   000C18                     clear_0:
   147   000C18  6AEE               	clrf	postinc0,c
   148   000C1A  06E8               	decf	wreg,f,c
   149   000C1C  E1FD               	bnz	clear_0
   150   000C1E                     end_of_initialization:
   151                           	callstack 0
   152   000C1E                     __end_of__initialization:
   153                           	callstack 0
   154   000C1E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   155   000C20  6EF8               	movwf	tblptru,c
   156   000C22  0100               	movlb	0
   157   000C24  EF1C  F004         	goto	_main	;jump to C main() function
   158                           
   159                           	psect	bssCOMRAM
   160   000001                     __pbssCOMRAM:
   161                           	callstack 0
   162   000001                     _funcs:
   163                           	callstack 0
   164   000001                     	ds	64
   165   000041                     _count:
   166                           	callstack 0
   167   000041                     	ds	1
   168                           
   169                           	psect	cstackCOMRAM
   170   000042                     __pcstackCOMRAM:
   171                           	callstack 0
   172   000042                     lcd_wr@val:
   173                           	callstack 0
   174   000042                     atraso_ms@valor:
   175                           	callstack 0
   176   000042                     __Exit@ec:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x0
   180   000042                     	ds	2
   181   000044                     atraso_ms@i:
   182                           	callstack 0
   183   000044                     exit@code:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0x2
   187   000044                     	ds	2
   188   000046                     atraso_ms@j:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x4
   192   000046                     	ds	1
   193   000047                     lcd_cmd@val:
   194                           	callstack 0
   195   000047                     lcd_dat@val:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0x5
   199   000047                     	ds	1
   200   000048                     lcd_str@str:
   201                           	callstack 0
   202   000048                     lcd_numb@str:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x6
   206   000048                     	ds	2
   207   00004A                     ??_lcd_str:
   208   00004A                     lcd_numb@num_placar:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x8
   212   00004A                     	ds	2
   213   00004C                     lcd_str@i:
   214                           	callstack 0
   215                           
   216                           ; 1 bytes @ 0xA
   217   00004C                     	ds	1
   218   00004D                     main@casa:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0xB
   222   00004D                     	ds	2
   223   00004F                     main@visitante:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0xD
   227   00004F                     	ds	2
   228                           
   229 ;;
   230 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   231 ;;
   232 ;; *************** function _main *****************
   233 ;; Defined at:
   234 ;;		line 20 in file "newmain.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;  visitante       2   13[COMRAM] int 
   239 ;;  casa            2   11[COMRAM] int 
   240 ;; Return value:  Size  Location     Type
   241 ;;                  2   94[None  ] int 
   242 ;; Registers used:
   243 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   244 ;; Tracked objects:
   245 ;;		On entry : 0/0
   246 ;;		On exit  : 0/0
   247 ;;		Unchanged: 0/0
   248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   249 ;;      Params:         0       0       0       0       0       0       0       0       0
   250 ;;      Locals:         4       0       0       0       0       0       0       0       0
   251 ;;      Temps:          0       0       0       0       0       0       0       0       0
   252 ;;      Totals:         4       0       0       0       0       0       0       0       0
   253 ;;Total ram usage:        4 bytes
   254 ;; Hardware stack levels required when called: 3
   255 ;; This function calls:
   256 ;;		_exit
   257 ;;		_lcd_cmd
   258 ;;		_lcd_init
   259 ;;		_lcd_numb
   260 ;;		_lcd_str
   261 ;; This function is called by:
   262 ;;		Startup code after reset
   263 ;; This function uses a non-reentrant model
   264 ;;
   265                           
   266                           	psect	text0
   267   000838                     __ptext0:
   268                           	callstack 0
   269   000838                     _main:
   270                           	callstack 28
   271   000838                     
   272                           ;newmain.c: 22:     TRISD = 0x00;
   273   000838  0E00               	movlw	0
   274   00083A  6E95               	movwf	149,c	;volatile
   275                           
   276                           ;newmain.c: 23:     TRISB = 0x00;
   277   00083C  0E00               	movlw	0
   278   00083E  6E93               	movwf	147,c	;volatile
   279                           
   280                           ;newmain.c: 24:     TRISE = 0x00;
   281   000840  0E00               	movlw	0
   282   000842  6E96               	movwf	150,c	;volatile
   283   000844                     
   284                           ;newmain.c: 26:     TRISBbits.TRISB1 = 1;
   285   000844  8293               	bsf	147,1,c	;volatile
   286   000846                     
   287                           ;newmain.c: 27:     TRISBbits.TRISB2 = 1;
   288   000846  8493               	bsf	147,2,c	;volatile
   289                           
   290                           ;newmain.c: 32:     int casa = 0, visitante = 0;
   291   000848  0E00               	movlw	0
   292   00084A  6E4E               	movwf	(main@casa+1)^0,c
   293   00084C  0E00               	movlw	0
   294   00084E  6E4D               	movwf	main@casa^0,c
   295   000850  0E00               	movlw	0
   296   000852  6E50               	movwf	(main@visitante+1)^0,c
   297   000854  0E00               	movlw	0
   298   000856  6E4F               	movwf	main@visitante^0,c
   299   000858                     
   300                           ;newmain.c: 37:     lcd_init();
   301   000858  EC57  F005         	call	_lcd_init	;wreg free
   302   00085C                     
   303                           ;newmain.c: 38:     lcd_cmd(0x01);
   304   00085C  0E01               	movlw	1
   305   00085E  ECE6  F005         	call	_lcd_cmd
   306   000862                     
   307                           ;newmain.c: 40:         lcd_cmd(0x80);
   308   000862  0E80               	movlw	128
   309   000864  ECE6  F005         	call	_lcd_cmd
   310   000868                     
   311                           ;newmain.c: 41:         lcd_str("CASA: ");
   312   000868  0E2E               	movlw	low STR_2
   313   00086A  6E48               	movwf	lcd_str@str^0,c
   314   00086C  0E08               	movlw	high STR_2
   315   00086E  6E49               	movwf	(lcd_str@str+1)^0,c
   316   000870  EC85  F005         	call	_lcd_str	;wreg free
   317   000874                     
   318                           ;newmain.c: 42:         lcd_cmd(0xC0);
   319   000874  0EC0               	movlw	192
   320   000876  ECE6  F005         	call	_lcd_cmd
   321   00087A                     
   322                           ;newmain.c: 43:         lcd_str("VISITANTE: ");
   323   00087A  0E22               	movlw	low STR_3
   324   00087C  6E48               	movwf	lcd_str@str^0,c
   325   00087E  0E08               	movlw	high STR_3
   326   000880  6E49               	movwf	(lcd_str@str+1)^0,c
   327   000882  EC85  F005         	call	_lcd_str	;wreg free
   328   000886                     l1128:
   329                           
   330                           ;newmain.c: 46:     {;newmain.c: 49:         if(PORTBbits.RB1 == 0)
   331   000886  B281               	btfsc	129,1,c	;volatile
   332   000888  EF48  F004         	goto	u321
   333   00088C  EF4A  F004         	goto	u320
   334   000890                     u321:
   335   000890  EF8E  F004         	goto	l1158
   336   000894                     u320:
   337   000894                     
   338                           ;newmain.c: 50:         {;newmain.c: 51:             if(casa != 9)
   339   000894  0E09               	movlw	9
   340   000896  184D               	xorwf	main@casa^0,w,c
   341   000898  104E               	iorwf	(main@casa+1)^0,w,c
   342   00089A  B4D8               	btfsc	status,2,c
   343   00089C  EF52  F004         	goto	u331
   344   0008A0  EF54  F004         	goto	u330
   345   0008A4                     u331:
   346   0008A4  EF7F  F004         	goto	l1152
   347   0008A8                     u330:
   348   0008A8                     
   349                           ;newmain.c: 52:             {;newmain.c: 53:                 casa++;
   350   0008A8  4A4D               	infsnz	main@casa^0,f,c
   351   0008AA  2A4E               	incf	(main@casa+1)^0,f,c
   352   0008AC                     
   353                           ;newmain.c: 57:                 lcd_cmd(0x01);
   354   0008AC  0E01               	movlw	1
   355   0008AE  ECE6  F005         	call	_lcd_cmd
   356   0008B2                     
   357                           ;newmain.c: 58:                 lcd_cmd(0x80);
   358   0008B2  0E80               	movlw	128
   359   0008B4  ECE6  F005         	call	_lcd_cmd
   360   0008B8                     
   361                           ;newmain.c: 60:                 lcd_str("CASA: ");
   362   0008B8  0E2E               	movlw	low STR_2
   363   0008BA  6E48               	movwf	lcd_str@str^0,c
   364   0008BC  0E08               	movlw	high STR_2
   365   0008BE  6E49               	movwf	(lcd_str@str+1)^0,c
   366   0008C0  EC85  F005         	call	_lcd_str	;wreg free
   367   0008C4                     
   368                           ;newmain.c: 61:                 lcd_cmd(0x86);
   369   0008C4  0E86               	movlw	134
   370   0008C6  ECE6  F005         	call	_lcd_cmd
   371   0008CA                     
   372                           ;newmain.c: 62:                 lcd_numb(casa);
   373   0008CA  C04D  F048         	movff	main@casa,lcd_numb@str
   374   0008CE  C04E  F049         	movff	main@casa+1,lcd_numb@str+1
   375   0008D2  ECDD  F004         	call	_lcd_numb	;wreg free
   376   0008D6                     
   377                           ;newmain.c: 64:                 lcd_cmd(0xC0);
   378   0008D6  0EC0               	movlw	192
   379   0008D8  ECE6  F005         	call	_lcd_cmd
   380   0008DC                     
   381                           ;newmain.c: 65:                 lcd_str("VISITANTE: ");
   382   0008DC  0E22               	movlw	low STR_3
   383   0008DE  6E48               	movwf	lcd_str@str^0,c
   384   0008E0  0E08               	movlw	high STR_3
   385   0008E2  6E49               	movwf	(lcd_str@str+1)^0,c
   386   0008E4  EC85  F005         	call	_lcd_str	;wreg free
   387   0008E8                     
   388                           ;newmain.c: 66:                 lcd_cmd(0xcb);
   389   0008E8  0ECB               	movlw	203
   390   0008EA  ECE6  F005         	call	_lcd_cmd
   391   0008EE                     
   392                           ;newmain.c: 67:                 lcd_numb(visitante);
   393   0008EE  C04F  F048         	movff	main@visitante,lcd_numb@str
   394   0008F2  C050  F049         	movff	main@visitante+1,lcd_numb@str+1
   395   0008F6  ECDD  F004         	call	_lcd_numb	;wreg free
   396                           
   397                           ;newmain.c: 68:             }else
   398   0008FA  EF8E  F004         	goto	l1158
   399   0008FE                     l1152:
   400                           
   401                           ;newmain.c: 69:             {;newmain.c: 70:                 lcd_cmd(0x01);
   402   0008FE  0E01               	movlw	1
   403   000900  ECE6  F005         	call	_lcd_cmd
   404   000904                     
   405                           ;newmain.c: 71:                 lcd_str("casa vencedor");
   406   000904  0E14               	movlw	low STR_6
   407   000906  6E48               	movwf	lcd_str@str^0,c
   408   000908  0E08               	movlw	high STR_6
   409   00090A  6E49               	movwf	(lcd_str@str+1)^0,c
   410   00090C  EC85  F005         	call	_lcd_str	;wreg free
   411   000910                     
   412                           ;newmain.c: 72:                 exit(0);
   413   000910  0E00               	movlw	0
   414   000912  6E45               	movwf	(exit@code+1)^0,c
   415   000914  0E00               	movlw	0
   416   000916  6E44               	movwf	exit@code^0,c
   417   000918  EC14  F006         	call	_exit	;wreg free
   418   00091C                     l1158:
   419                           
   420                           ;newmain.c: 76:         if(PORTBbits.RB2 == 0)
   421   00091C  B481               	btfsc	129,2,c	;volatile
   422   00091E  EF93  F004         	goto	u341
   423   000922  EF95  F004         	goto	u340
   424   000926                     u341:
   425   000926  EF43  F004         	goto	l1128
   426   00092A                     u340:
   427   00092A                     
   428                           ;newmain.c: 77:         {;newmain.c: 78:             if(visitante != 9)
   429   00092A  0E09               	movlw	9
   430   00092C  184F               	xorwf	main@visitante^0,w,c
   431   00092E  1050               	iorwf	(main@visitante+1)^0,w,c
   432   000930  B4D8               	btfsc	status,2,c
   433   000932  EF9D  F004         	goto	u351
   434   000936  EF9F  F004         	goto	u350
   435   00093A                     u351:
   436   00093A  EFCA  F004         	goto	l1182
   437   00093E                     u350:
   438   00093E                     
   439                           ;newmain.c: 79:             {;newmain.c: 80:             visitante++;
   440   00093E  4A4F               	infsnz	main@visitante^0,f,c
   441   000940  2A50               	incf	(main@visitante+1)^0,f,c
   442   000942                     
   443                           ;newmain.c: 82:                 lcd_cmd(0x01);
   444   000942  0E01               	movlw	1
   445   000944  ECE6  F005         	call	_lcd_cmd
   446   000948                     
   447                           ;newmain.c: 83:                 lcd_cmd(0x80);
   448   000948  0E80               	movlw	128
   449   00094A  ECE6  F005         	call	_lcd_cmd
   450   00094E                     
   451                           ;newmain.c: 85:                 lcd_str("CASA: ");
   452   00094E  0E2E               	movlw	low STR_2
   453   000950  6E48               	movwf	lcd_str@str^0,c
   454   000952  0E08               	movlw	high STR_2
   455   000954  6E49               	movwf	(lcd_str@str+1)^0,c
   456   000956  EC85  F005         	call	_lcd_str	;wreg free
   457   00095A                     
   458                           ;newmain.c: 86:                 lcd_cmd(0x86);
   459   00095A  0E86               	movlw	134
   460   00095C  ECE6  F005         	call	_lcd_cmd
   461   000960                     
   462                           ;newmain.c: 87:                 lcd_numb(casa);
   463   000960  C04D  F048         	movff	main@casa,lcd_numb@str
   464   000964  C04E  F049         	movff	main@casa+1,lcd_numb@str+1
   465   000968  ECDD  F004         	call	_lcd_numb	;wreg free
   466   00096C                     
   467                           ;newmain.c: 89:                 lcd_cmd(0xC0);
   468   00096C  0EC0               	movlw	192
   469   00096E  ECE6  F005         	call	_lcd_cmd
   470   000972                     
   471                           ;newmain.c: 90:                 lcd_str("VISITANTE: ");
   472   000972  0E22               	movlw	low STR_3
   473   000974  6E48               	movwf	lcd_str@str^0,c
   474   000976  0E08               	movlw	high STR_3
   475   000978  6E49               	movwf	(lcd_str@str+1)^0,c
   476   00097A  EC85  F005         	call	_lcd_str	;wreg free
   477   00097E                     
   478                           ;newmain.c: 91:                 lcd_cmd(0xcb);
   479   00097E  0ECB               	movlw	203
   480   000980  ECE6  F005         	call	_lcd_cmd
   481   000984                     
   482                           ;newmain.c: 92:                 lcd_numb(visitante);
   483   000984  C04F  F048         	movff	main@visitante,lcd_numb@str
   484   000988  C050  F049         	movff	main@visitante+1,lcd_numb@str+1
   485   00098C  ECDD  F004         	call	_lcd_numb	;wreg free
   486                           
   487                           ;newmain.c: 93:             }else
   488   000990  EF43  F004         	goto	l1128
   489   000994                     l1182:
   490                           
   491                           ;newmain.c: 94:             {;newmain.c: 95:                 lcd_cmd(0x01);
   492   000994  0E01               	movlw	1
   493   000996  ECE6  F005         	call	_lcd_cmd
   494   00099A                     
   495                           ;newmain.c: 96:                 lcd_str("visitante vencedor");
   496   00099A  0E01               	movlw	low STR_9
   497   00099C  6E48               	movwf	lcd_str@str^0,c
   498   00099E  0E08               	movlw	high STR_9
   499   0009A0  6E49               	movwf	(lcd_str@str+1)^0,c
   500   0009A2  EC85  F005         	call	_lcd_str	;wreg free
   501   0009A6                     
   502                           ;newmain.c: 97:                 exit(0);
   503   0009A6  0E00               	movlw	0
   504   0009A8  6E45               	movwf	(exit@code+1)^0,c
   505   0009AA  0E00               	movlw	0
   506   0009AC  6E44               	movwf	exit@code^0,c
   507   0009AE  EC14  F006         	call	_exit	;wreg free
   508   0009B2  EF43  F004         	goto	l1128
   509   0009B6  EF00  F000         	goto	start
   510   0009BA                     __end_of_main:
   511                           	callstack 0
   512                           
   513 ;; *************** function _lcd_str *****************
   514 ;; Defined at:
   515 ;;		line 78 in file "lcd.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;  str             2    6[COMRAM] PTR const unsigned char 
   518 ;;		 -> STR_9(19), STR_8(12), STR_7(7), STR_6(14), 
   519 ;;		 -> STR_5(12), STR_4(7), STR_3(12), STR_2(7), 
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  i               1   10[COMRAM] unsigned char 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  1    wreg      void 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   531 ;;      Params:         2       0       0       0       0       0       0       0       0
   532 ;;      Locals:         1       0       0       0       0       0       0       0       0
   533 ;;      Temps:          2       0       0       0       0       0       0       0       0
   534 ;;      Totals:         5       0       0       0       0       0       0       0       0
   535 ;;Total ram usage:        5 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; Hardware stack levels required when called: 2
   538 ;; This function calls:
   539 ;;		_lcd_dat
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text1
   546   000B0A                     __ptext1:
   547                           	callstack 0
   548   000B0A                     _lcd_str:
   549                           	callstack 28
   550   000B0A                     
   551                           ;lcd.c: 78: void lcd_str(const char* str);lcd.c: 79: {;lcd.c: 80:  unsigned char i=0;
   552   000B0A  0E00               	movlw	0
   553   000B0C  6E4C               	movwf	lcd_str@i^0,c
   554                           
   555                           ;lcd.c: 82:  while(str[i] != '\0' )
   556   000B0E  EF98  F005         	goto	l1062
   557   000B12                     l1058:
   558                           
   559                           ;lcd.c: 83:  {;lcd.c: 84:    lcd_dat(str[i]);
   560   000B12  504C               	movf	lcd_str@i^0,w,c
   561   000B14  2448               	addwf	lcd_str@str^0,w,c
   562   000B16  6E4A               	movwf	??_lcd_str^0,c
   563   000B18  0E00               	movlw	0
   564   000B1A  2049               	addwfc	(lcd_str@str+1)^0,w,c
   565   000B1C  6E4B               	movwf	(??_lcd_str+1)^0,c
   566   000B1E  C04A  FFF6         	movff	??_lcd_str,tblptrl
   567   000B22  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   568   000B26                     	if	0	;tblptru may be non-zero
   569   000B26                     	endif
   570   000B26                     	if	0	;tblptru may be non-zero
   571   000B26                     	endif
   572   000B26  0008               	tblrd		*
   573   000B28  50F5               	movf	tablat,w,c
   574   000B2A  ECD1  F005         	call	_lcd_dat
   575   000B2E                     
   576                           ;lcd.c: 85:    i++;
   577   000B2E  2A4C               	incf	lcd_str@i^0,f,c
   578   000B30                     l1062:
   579                           
   580                           ;lcd.c: 82:  while(str[i] != '\0' )
   581   000B30  504C               	movf	lcd_str@i^0,w,c
   582   000B32  2448               	addwf	lcd_str@str^0,w,c
   583   000B34  6E4A               	movwf	??_lcd_str^0,c
   584   000B36  0E00               	movlw	0
   585   000B38  2049               	addwfc	(lcd_str@str+1)^0,w,c
   586   000B3A  6E4B               	movwf	(??_lcd_str+1)^0,c
   587   000B3C  C04A  FFF6         	movff	??_lcd_str,tblptrl
   588   000B40  C04B  FFF7         	movff	??_lcd_str+1,tblptrh
   589   000B44                     	if	0	;tblptru may be non-zero
   590   000B44                     	endif
   591   000B44                     	if	0	;tblptru may be non-zero
   592   000B44                     	endif
   593   000B44  0008               	tblrd		*
   594   000B46  50F5               	movf	tablat,w,c
   595   000B48  0900               	iorlw	0
   596   000B4A  A4D8               	btfss	status,2,c
   597   000B4C  EFAA  F005         	goto	u211
   598   000B50  EFAC  F005         	goto	u210
   599   000B54                     u211:
   600   000B54  EF89  F005         	goto	l1058
   601   000B58                     u210:
   602   000B58  0012               	return		;funcret
   603   000B5A                     __end_of_lcd_str:
   604                           	callstack 0
   605                           
   606 ;; *************** function _lcd_numb *****************
   607 ;; Defined at:
   608 ;;		line 89 in file "lcd.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;  str             2    6[COMRAM] const int 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  num_placar      1    8[COMRAM] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg, status,2, status,0, cstack
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   622 ;;      Params:         2       0       0       0       0       0       0       0       0
   623 ;;      Locals:         1       0       0       0       0       0       0       0       0
   624 ;;      Temps:          0       0       0       0       0       0       0       0       0
   625 ;;      Totals:         3       0       0       0       0       0       0       0       0
   626 ;;Total ram usage:        3 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; Hardware stack levels required when called: 2
   629 ;; This function calls:
   630 ;;		_lcd_dat
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text2
   637   0009BA                     __ptext2:
   638                           	callstack 0
   639   0009BA                     _lcd_numb:
   640                           	callstack 28
   641   0009BA                     
   642                           ;lcd.c: 91:     char num_placar;;lcd.c: 92:     if(0 == str){
   643   0009BA  5048               	movf	lcd_numb@str^0,w,c
   644   0009BC  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   645   0009BE  A4D8               	btfss	status,2,c
   646   0009C0  EFE4  F004         	goto	u221
   647   0009C4  EFE6  F004         	goto	u220
   648   0009C8                     u221:
   649   0009C8  EFE8  F004         	goto	l1068
   650   0009CC                     u220:
   651   0009CC                     
   652                           ;lcd.c: 93:             num_placar = "0";
   653   0009CC  0E35               	movlw	low (low STR_1)
   654   0009CE  6E4A               	movwf	lcd_numb@num_placar^0,c
   655   0009D0                     l1068:
   656                           
   657                           ;lcd.c: 95:     if(1 == str){
   658   0009D0  0448               	decf	lcd_numb@str^0,w,c
   659   0009D2  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   660   0009D4  A4D8               	btfss	status,2,c
   661   0009D6  EFEF  F004         	goto	u231
   662   0009DA  EFF1  F004         	goto	u230
   663   0009DE                     u231:
   664   0009DE  EFF3  F004         	goto	l1072
   665   0009E2                     u230:
   666   0009E2                     
   667                           ;lcd.c: 96:             num_placar = '1';
   668   0009E2  0E31               	movlw	49
   669   0009E4  6E4A               	movwf	lcd_numb@num_placar^0,c
   670   0009E6                     l1072:
   671                           
   672                           ;lcd.c: 98:     if(2 == str){
   673   0009E6  0E02               	movlw	2
   674   0009E8  1848               	xorwf	lcd_numb@str^0,w,c
   675   0009EA  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   676   0009EC  A4D8               	btfss	status,2,c
   677   0009EE  EFFB  F004         	goto	u241
   678   0009F2  EFFD  F004         	goto	u240
   679   0009F6                     u241:
   680   0009F6  EFFF  F004         	goto	l1076
   681   0009FA                     u240:
   682   0009FA                     
   683                           ;lcd.c: 99:             num_placar = '2';
   684   0009FA  0E32               	movlw	50
   685   0009FC  6E4A               	movwf	lcd_numb@num_placar^0,c
   686   0009FE                     l1076:
   687                           
   688                           ;lcd.c: 101:     if(3 == str){
   689   0009FE  0E03               	movlw	3
   690   000A00  1848               	xorwf	lcd_numb@str^0,w,c
   691   000A02  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   692   000A04  A4D8               	btfss	status,2,c
   693   000A06  EF07  F005         	goto	u251
   694   000A0A  EF09  F005         	goto	u250
   695   000A0E                     u251:
   696   000A0E  EF0B  F005         	goto	l1080
   697   000A12                     u250:
   698   000A12                     
   699                           ;lcd.c: 102:             num_placar = '3';
   700   000A12  0E33               	movlw	51
   701   000A14  6E4A               	movwf	lcd_numb@num_placar^0,c
   702   000A16                     l1080:
   703                           
   704                           ;lcd.c: 104:     if(4 == str){
   705   000A16  0E04               	movlw	4
   706   000A18  1848               	xorwf	lcd_numb@str^0,w,c
   707   000A1A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   708   000A1C  A4D8               	btfss	status,2,c
   709   000A1E  EF13  F005         	goto	u261
   710   000A22  EF15  F005         	goto	u260
   711   000A26                     u261:
   712   000A26  EF17  F005         	goto	l1084
   713   000A2A                     u260:
   714   000A2A                     
   715                           ;lcd.c: 105:             num_placar = '4';
   716   000A2A  0E34               	movlw	52
   717   000A2C  6E4A               	movwf	lcd_numb@num_placar^0,c
   718   000A2E                     l1084:
   719                           
   720                           ;lcd.c: 107:     if(5 == str){
   721   000A2E  0E05               	movlw	5
   722   000A30  1848               	xorwf	lcd_numb@str^0,w,c
   723   000A32  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   724   000A34  A4D8               	btfss	status,2,c
   725   000A36  EF1F  F005         	goto	u271
   726   000A3A  EF21  F005         	goto	u270
   727   000A3E                     u271:
   728   000A3E  EF23  F005         	goto	l1088
   729   000A42                     u270:
   730   000A42                     
   731                           ;lcd.c: 108:             num_placar = '5';
   732   000A42  0E35               	movlw	53
   733   000A44  6E4A               	movwf	lcd_numb@num_placar^0,c
   734   000A46                     l1088:
   735                           
   736                           ;lcd.c: 110:     if(6 == str){
   737   000A46  0E06               	movlw	6
   738   000A48  1848               	xorwf	lcd_numb@str^0,w,c
   739   000A4A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   740   000A4C  A4D8               	btfss	status,2,c
   741   000A4E  EF2B  F005         	goto	u281
   742   000A52  EF2D  F005         	goto	u280
   743   000A56                     u281:
   744   000A56  EF2F  F005         	goto	l1092
   745   000A5A                     u280:
   746   000A5A                     
   747                           ;lcd.c: 111:             num_placar = '6';
   748   000A5A  0E36               	movlw	54
   749   000A5C  6E4A               	movwf	lcd_numb@num_placar^0,c
   750   000A5E                     l1092:
   751                           
   752                           ;lcd.c: 113:     if(7 == str){
   753   000A5E  0E07               	movlw	7
   754   000A60  1848               	xorwf	lcd_numb@str^0,w,c
   755   000A62  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   756   000A64  A4D8               	btfss	status,2,c
   757   000A66  EF37  F005         	goto	u291
   758   000A6A  EF39  F005         	goto	u290
   759   000A6E                     u291:
   760   000A6E  EF3B  F005         	goto	l1096
   761   000A72                     u290:
   762   000A72                     
   763                           ;lcd.c: 114:             num_placar = '7';
   764   000A72  0E37               	movlw	55
   765   000A74  6E4A               	movwf	lcd_numb@num_placar^0,c
   766   000A76                     l1096:
   767                           
   768                           ;lcd.c: 116:     if(8 == str){
   769   000A76  0E08               	movlw	8
   770   000A78  1848               	xorwf	lcd_numb@str^0,w,c
   771   000A7A  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   772   000A7C  A4D8               	btfss	status,2,c
   773   000A7E  EF43  F005         	goto	u301
   774   000A82  EF45  F005         	goto	u300
   775   000A86                     u301:
   776   000A86  EF47  F005         	goto	l1100
   777   000A8A                     u300:
   778   000A8A                     
   779                           ;lcd.c: 117:             num_placar = '8';
   780   000A8A  0E38               	movlw	56
   781   000A8C  6E4A               	movwf	lcd_numb@num_placar^0,c
   782   000A8E                     l1100:
   783                           
   784                           ;lcd.c: 120:     if(9 == str){
   785   000A8E  0E09               	movlw	9
   786   000A90  1848               	xorwf	lcd_numb@str^0,w,c
   787   000A92  1049               	iorwf	(lcd_numb@str+1)^0,w,c
   788   000A94  A4D8               	btfss	status,2,c
   789   000A96  EF4F  F005         	goto	u311
   790   000A9A  EF51  F005         	goto	u310
   791   000A9E                     u311:
   792   000A9E  EF53  F005         	goto	l1104
   793   000AA2                     u310:
   794   000AA2                     
   795                           ;lcd.c: 121:             num_placar = '9';
   796   000AA2  0E39               	movlw	57
   797   000AA4  6E4A               	movwf	lcd_numb@num_placar^0,c
   798   000AA6                     l1104:
   799                           
   800                           ;lcd.c: 123:     lcd_dat(num_placar);
   801   000AA6  504A               	movf	lcd_numb@num_placar^0,w,c
   802   000AA8  ECD1  F005         	call	_lcd_dat
   803   000AAC  0012               	return		;funcret
   804   000AAE                     __end_of_lcd_numb:
   805                           	callstack 0
   806                           
   807 ;; *************** function _lcd_dat *****************
   808 ;; Defined at:
   809 ;;		line 48 in file "lcd.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;  val             1    wreg     unsigned char 
   812 ;; Auto vars:     Size  Location     Type
   813 ;;  val             1    5[COMRAM] unsigned char 
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		wreg, status,2, status,0, cstack
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   823 ;;      Params:         0       0       0       0       0       0       0       0       0
   824 ;;      Locals:         1       0       0       0       0       0       0       0       0
   825 ;;      Temps:          0       0       0       0       0       0       0       0       0
   826 ;;      Totals:         1       0       0       0       0       0       0       0       0
   827 ;;Total ram usage:        1 bytes
   828 ;; Hardware stack levels used: 1
   829 ;; Hardware stack levels required when called: 1
   830 ;; This function calls:
   831 ;;		_atraso_ms
   832 ;;		_lcd_wr
   833 ;; This function is called by:
   834 ;;		_lcd_str
   835 ;;		_lcd_numb
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text3
   840   000BA2                     __ptext3:
   841                           	callstack 0
   842   000BA2                     _lcd_dat:
   843                           	callstack 28
   844                           
   845                           ;incstack = 0
   846                           ;lcd_dat@val stored from wreg
   847   000BA2  6E47               	movwf	lcd_dat@val^0,c
   848   000BA4                     
   849                           ;lcd.c: 48: void lcd_dat(unsigned char val);lcd.c: 49: {;lcd.c: 50:  PORTEbits.RE1=1;
   850   000BA4  8284               	bsf	132,1,c	;volatile
   851   000BA6                     
   852                           ;lcd.c: 51:         lcd_wr(val);
   853   000BA6  5047               	movf	lcd_dat@val^0,w,c
   854   000BA8  EC1D  F006         	call	_lcd_wr
   855   000BAC                     
   856                           ;lcd.c: 52:         PORTEbits.RE0=1;
   857   000BAC  8084               	bsf	132,0,c	;volatile
   858   000BAE                     
   859                           ;lcd.c: 53:         atraso_ms(3);
   860   000BAE  0E00               	movlw	0
   861   000BB0  6E43               	movwf	(atraso_ms@valor+1)^0,c
   862   000BB2  0E03               	movlw	3
   863   000BB4  6E42               	movwf	atraso_ms@valor^0,c
   864   000BB6  ECAD  F005         	call	_atraso_ms	;wreg free
   865   000BBA                     
   866                           ;lcd.c: 54:         PORTEbits.RE1=0;
   867   000BBA  9284               	bcf	132,1,c	;volatile
   868   000BBC                     
   869                           ;lcd.c: 55:         atraso_ms(3);
   870   000BBC  0E00               	movlw	0
   871   000BBE  6E43               	movwf	(atraso_ms@valor+1)^0,c
   872   000BC0  0E03               	movlw	3
   873   000BC2  6E42               	movwf	atraso_ms@valor^0,c
   874   000BC4  ECAD  F005         	call	_atraso_ms	;wreg free
   875   000BC8                     
   876                           ;lcd.c: 56:  PORTEbits.RE1=1;
   877   000BC8  8284               	bsf	132,1,c	;volatile
   878   000BCA  0012               	return		;funcret
   879   000BCC                     __end_of_lcd_dat:
   880                           	callstack 0
   881                           
   882 ;; *************** function _lcd_init *****************
   883 ;; Defined at:
   884 ;;		line 59 in file "lcd.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;		None
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, status,2, status,0, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   898 ;;      Params:         0       0       0       0       0       0       0       0       0
   899 ;;      Locals:         0       0       0       0       0       0       0       0       0
   900 ;;      Temps:          0       0       0       0       0       0       0       0       0
   901 ;;      Totals:         0       0       0       0       0       0       0       0       0
   902 ;;Total ram usage:        0 bytes
   903 ;; Hardware stack levels used: 1
   904 ;; Hardware stack levels required when called: 2
   905 ;; This function calls:
   906 ;;		_atraso_ms
   907 ;;		_lcd_cmd
   908 ;; This function is called by:
   909 ;;		_main
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text4
   914   000AAE                     __ptext4:
   915                           	callstack 0
   916   000AAE                     _lcd_init:
   917                           	callstack 28
   918   000AAE                     
   919                           ;lcd.c: 61:  PORTEbits.RE1=0;
   920   000AAE  9284               	bcf	132,1,c	;volatile
   921                           
   922                           ;lcd.c: 62:  PORTEbits.RE0=0;
   923   000AB0  9084               	bcf	132,0,c	;volatile
   924   000AB2                     
   925                           ;lcd.c: 63:  atraso_ms(20);
   926   000AB2  0E00               	movlw	0
   927   000AB4  6E43               	movwf	(atraso_ms@valor+1)^0,c
   928   000AB6  0E14               	movlw	20
   929   000AB8  6E42               	movwf	atraso_ms@valor^0,c
   930   000ABA  ECAD  F005         	call	_atraso_ms	;wreg free
   931   000ABE                     
   932                           ;lcd.c: 64:  PORTEbits.RE1=1;
   933   000ABE  8284               	bsf	132,1,c	;volatile
   934                           
   935                           ;lcd.c: 66:  lcd_cmd(0x38);
   936   000AC0  0E38               	movlw	56
   937   000AC2  ECE6  F005         	call	_lcd_cmd
   938                           
   939                           ;lcd.c: 67:  atraso_ms(5);
   940   000AC6  0E00               	movlw	0
   941   000AC8  6E43               	movwf	(atraso_ms@valor+1)^0,c
   942   000ACA  0E05               	movlw	5
   943   000ACC  6E42               	movwf	atraso_ms@valor^0,c
   944   000ACE  ECAD  F005         	call	_atraso_ms	;wreg free
   945                           
   946                           ;lcd.c: 68:  lcd_cmd(0x38);
   947   000AD2  0E38               	movlw	56
   948   000AD4  ECE6  F005         	call	_lcd_cmd
   949                           
   950                           ;lcd.c: 69:         atraso_ms(1);
   951   000AD8  0E00               	movlw	0
   952   000ADA  6E43               	movwf	(atraso_ms@valor+1)^0,c
   953   000ADC  0E01               	movlw	1
   954   000ADE  6E42               	movwf	atraso_ms@valor^0,c
   955   000AE0  ECAD  F005         	call	_atraso_ms	;wreg free
   956                           
   957                           ;lcd.c: 70:  lcd_cmd(0x38);
   958   000AE4  0E38               	movlw	56
   959   000AE6  ECE6  F005         	call	_lcd_cmd
   960                           
   961                           ;lcd.c: 71:  lcd_cmd(0x08);
   962   000AEA  0E08               	movlw	8
   963   000AEC  ECE6  F005         	call	_lcd_cmd
   964                           
   965                           ;lcd.c: 72:  lcd_cmd(0x0F);
   966   000AF0  0E0F               	movlw	15
   967   000AF2  ECE6  F005         	call	_lcd_cmd
   968                           
   969                           ;lcd.c: 73:  lcd_cmd(0x01);
   970   000AF6  0E01               	movlw	1
   971   000AF8  ECE6  F005         	call	_lcd_cmd
   972                           
   973                           ;lcd.c: 74:  lcd_cmd(0x38);
   974   000AFC  0E38               	movlw	56
   975   000AFE  ECE6  F005         	call	_lcd_cmd
   976                           
   977                           ;lcd.c: 75:         lcd_cmd(0x80);
   978   000B02  0E80               	movlw	128
   979   000B04  ECE6  F005         	call	_lcd_cmd
   980   000B08  0012               	return		;funcret
   981   000B0A                     __end_of_lcd_init:
   982                           	callstack 0
   983                           
   984 ;; *************** function _lcd_cmd *****************
   985 ;; Defined at:
   986 ;;		line 37 in file "lcd.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  val             1    wreg     unsigned char 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  val             1    5[COMRAM] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1000 ;;      Params:         0       0       0       0       0       0       0       0       0
  1001 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1003 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1004 ;;Total ram usage:        1 bytes
  1005 ;; Hardware stack levels used: 1
  1006 ;; Hardware stack levels required when called: 1
  1007 ;; This function calls:
  1008 ;;		_atraso_ms
  1009 ;;		_lcd_wr
  1010 ;; This function is called by:
  1011 ;;		_lcd_init
  1012 ;;		_main
  1013 ;; This function uses a non-reentrant model
  1014 ;;
  1015                           
  1016                           	psect	text5
  1017   000BCC                     __ptext5:
  1018                           	callstack 0
  1019   000BCC                     _lcd_cmd:
  1020                           	callstack 28
  1021                           
  1022                           ;incstack = 0
  1023                           ;lcd_cmd@val stored from wreg
  1024   000BCC  6E47               	movwf	lcd_cmd@val^0,c
  1025   000BCE                     
  1026                           ;lcd.c: 37: void lcd_cmd(unsigned char val);lcd.c: 38: {;lcd.c: 39:  PORTEbits.RE1=1;
  1027   000BCE  8284               	bsf	132,1,c	;volatile
  1028   000BD0                     
  1029                           ;lcd.c: 40:         lcd_wr(val);
  1030   000BD0  5047               	movf	lcd_cmd@val^0,w,c
  1031   000BD2  EC1D  F006         	call	_lcd_wr
  1032   000BD6                     
  1033                           ;lcd.c: 41:         PORTEbits.RE0=0;
  1034   000BD6  9084               	bcf	132,0,c	;volatile
  1035   000BD8                     
  1036                           ;lcd.c: 42:         atraso_ms(3);
  1037   000BD8  0E00               	movlw	0
  1038   000BDA  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1039   000BDC  0E03               	movlw	3
  1040   000BDE  6E42               	movwf	atraso_ms@valor^0,c
  1041   000BE0  ECAD  F005         	call	_atraso_ms	;wreg free
  1042   000BE4                     
  1043                           ;lcd.c: 43:         PORTEbits.RE1=0;
  1044   000BE4  9284               	bcf	132,1,c	;volatile
  1045   000BE6                     
  1046                           ;lcd.c: 44:         atraso_ms(3);
  1047   000BE6  0E00               	movlw	0
  1048   000BE8  6E43               	movwf	(atraso_ms@valor+1)^0,c
  1049   000BEA  0E03               	movlw	3
  1050   000BEC  6E42               	movwf	atraso_ms@valor^0,c
  1051   000BEE  ECAD  F005         	call	_atraso_ms	;wreg free
  1052   000BF2                     
  1053                           ;lcd.c: 45:  PORTEbits.RE1=1;
  1054   000BF2  8284               	bsf	132,1,c	;volatile
  1055   000BF4  0012               	return		;funcret
  1056   000BF6                     __end_of_lcd_cmd:
  1057                           	callstack 0
  1058                           
  1059 ;; *************** function _lcd_wr *****************
  1060 ;; Defined at:
  1061 ;;		line 32 in file "lcd.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;  val             1    wreg     unsigned char 
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;  val             1    0[COMRAM] unsigned char 
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1075 ;;      Params:         0       0       0       0       0       0       0       0       0
  1076 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1078 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1079 ;;Total ram usage:        1 bytes
  1080 ;; Hardware stack levels used: 1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_lcd_cmd
  1085 ;;		_lcd_dat
  1086 ;; This function uses a non-reentrant model
  1087 ;;
  1088                           
  1089                           	psect	text6
  1090   000C3A                     __ptext6:
  1091                           	callstack 0
  1092   000C3A                     _lcd_wr:
  1093                           	callstack 28
  1094                           
  1095                           ;incstack = 0
  1096                           ;lcd_wr@val stored from wreg
  1097   000C3A  6E42               	movwf	lcd_wr@val^0,c
  1098   000C3C                     
  1099                           ;lcd.c: 32: void lcd_wr(unsigned char val);lcd.c: 33: {;lcd.c: 34:   PORTD=val;
  1100   000C3C  C042  FF83         	movff	lcd_wr@val,3971	;volatile
  1101   000C40  0012               	return		;funcret
  1102   000C42                     __end_of_lcd_wr:
  1103                           	callstack 0
  1104                           
  1105 ;; *************** function _atraso_ms *****************
  1106 ;; Defined at:
  1107 ;;		line 26 in file "atraso.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  valor           2    0[COMRAM] unsigned int 
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;  i               2    2[COMRAM] unsigned int 
  1112 ;;  j               1    4[COMRAM] unsigned char 
  1113 ;; Return value:  Size  Location     Type
  1114 ;;                  1    wreg      void 
  1115 ;; Registers used:
  1116 ;;		wreg, status,2, status,0
  1117 ;; Tracked objects:
  1118 ;;		On entry : 0/0
  1119 ;;		On exit  : 0/0
  1120 ;;		Unchanged: 0/0
  1121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1122 ;;      Params:         2       0       0       0       0       0       0       0       0
  1123 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1125 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1126 ;;Total ram usage:        5 bytes
  1127 ;; Hardware stack levels used: 1
  1128 ;; This function calls:
  1129 ;;		Nothing
  1130 ;; This function is called by:
  1131 ;;		_lcd_cmd
  1132 ;;		_lcd_dat
  1133 ;;		_lcd_init
  1134 ;; This function uses a non-reentrant model
  1135 ;;
  1136                           
  1137                           	psect	text7
  1138   000B5A                     __ptext7:
  1139                           	callstack 0
  1140   000B5A                     _atraso_ms:
  1141                           	callstack 28
  1142   000B5A                     
  1143                           ;atraso.c: 26: void atraso_ms(unsigned int valor);atraso.c: 27: {;atraso.c: 28: unsigned
      +                           int i;;atraso.c: 29: unsigned char j;;atraso.c: 31:  for (i =0; i< valor; i++)
  1144   000B5A  0E00               	movlw	0
  1145   000B5C  6E45               	movwf	(atraso_ms@i+1)^0,c
  1146   000B5E  0E00               	movlw	0
  1147   000B60  6E44               	movwf	atraso_ms@i^0,c
  1148   000B62  EFC5  F005         	goto	l1020
  1149   000B66                     l1008:
  1150                           
  1151                           ;atraso.c: 32:  {;atraso.c: 34:   for (j =0 ; j < 200; j++)
  1152   000B66  0E00               	movlw	0
  1153   000B68  6E46               	movwf	atraso_ms@j^0,c
  1154   000B6A                     l5:
  1155   000B6A  F000               	nop		;# 
  1156   000B6C  F000               	nop		;# 
  1157   000B6E  F000               	nop		;# 
  1158   000B70  F000               	nop		;# 
  1159   000B72  F000               	nop		;# 
  1160   000B74                     
  1161                           ;atraso.c: 41:    }
  1162   000B74  2A46               	incf	atraso_ms@j^0,f,c
  1163   000B76  0EC7               	movlw	199
  1164   000B78  6446               	cpfsgt	atraso_ms@j^0,c
  1165   000B7A  EFC1  F005         	goto	u191
  1166   000B7E  EFC3  F005         	goto	u190
  1167   000B82                     u191:
  1168   000B82  EFB5  F005         	goto	l5
  1169   000B86                     u190:
  1170   000B86                     
  1171                           ;atraso.c: 42:  }
  1172   000B86  4A44               	infsnz	atraso_ms@i^0,f,c
  1173   000B88  2A45               	incf	(atraso_ms@i+1)^0,f,c
  1174   000B8A                     l1020:
  1175   000B8A  5042               	movf	atraso_ms@valor^0,w,c
  1176   000B8C  5C44               	subwf	atraso_ms@i^0,w,c
  1177   000B8E  5043               	movf	(atraso_ms@valor+1)^0,w,c
  1178   000B90  5845               	subwfb	(atraso_ms@i+1)^0,w,c
  1179   000B92  A0D8               	btfss	status,0,c
  1180   000B94  EFCE  F005         	goto	u201
  1181   000B98  EFD0  F005         	goto	u200
  1182   000B9C                     u201:
  1183   000B9C  EFB3  F005         	goto	l1008
  1184   000BA0                     u200:
  1185   000BA0  0012               	return		;funcret
  1186   000BA2                     __end_of_atraso_ms:
  1187                           	callstack 0
  1188                           
  1189 ;; *************** function _exit *****************
  1190 ;; Defined at:
  1191 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\exit.c"
  1192 ;; Parameters:    Size  Location     Type
  1193 ;;  code            2    2[COMRAM] int 
  1194 ;; Auto vars:     Size  Location     Type
  1195 ;;		None
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, status,2, status,0, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1205 ;;      Params:         2       0       0       0       0       0       0       0       0
  1206 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1207 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1208 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1209 ;;Total ram usage:        2 bytes
  1210 ;; Hardware stack levels used: 1
  1211 ;; Hardware stack levels required when called: 1
  1212 ;; This function calls:
  1213 ;;		__Exit
  1214 ;;		___funcs_on_exit
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text8
  1221   000C28                     __ptext8:
  1222                           	callstack 0
  1223   000C28                     _exit:
  1224                           	callstack 29
  1225   000C28  ECFB  F005         	call	___funcs_on_exit	;wreg free
  1226   000C2C  C044  F042         	movff	exit@code,__Exit@ec
  1227   000C30  C045  F043         	movff	exit@code+1,__Exit@ec+1
  1228   000C34  EC21  F006         	call	__Exit	;wreg free
  1229   000C38  0012               	return		;funcret
  1230   000C3A                     __end_of_exit:
  1231                           	callstack 0
  1232                           
  1233 ;; *************** function ___funcs_on_exit *****************
  1234 ;; Defined at:
  1235 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atexit.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;		None
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  func            2    0        PTR FTN()void 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0
  1250 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1252 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1253 ;;Total ram usage:        0 bytes
  1254 ;; Hardware stack levels used: 1
  1255 ;; This function calls:
  1256 ;;		Nothing
  1257 ;; This function is called by:
  1258 ;;		_exit
  1259 ;; This function uses a non-reentrant model
  1260 ;;
  1261                           
  1262                           	psect	text9
  1263   000BF6                     __ptext9:
  1264                           	callstack 0
  1265   000BF6                     ___funcs_on_exit:
  1266                           	callstack 29
  1267   000BF6  EFFE  F005         	goto	l856
  1268   000BFA                     l854:
  1269   000BFA  0641               	decf	_count^0,f,c
  1270   000BFC                     l856:
  1271   000BFC  5041               	movf	_count^0,w,c
  1272   000BFE  0A80               	xorlw	128
  1273   000C00  0F7F               	addlw	-129
  1274   000C02  B0D8               	btfsc	status,0,c
  1275   000C04  EF06  F006         	goto	u31
  1276   000C08  EF08  F006         	goto	u30
  1277   000C0C                     u31:
  1278   000C0C  EFFD  F005         	goto	l854
  1279   000C10                     u30:
  1280   000C10  0012               	return		;funcret
  1281   000C12                     __end_of___funcs_on_exit:
  1282                           	callstack 0
  1283                           
  1284 ;; *************** function __Exit *****************
  1285 ;; Defined at:
  1286 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\_Exit.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  ec              2    0[COMRAM] int 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		None
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1300 ;;      Params:         2       0       0       0       0       0       0       0       0
  1301 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1303 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1304 ;;Total ram usage:        2 bytes
  1305 ;; Hardware stack levels used: 1
  1306 ;; This function calls:
  1307 ;;		Nothing
  1308 ;; This function is called by:
  1309 ;;		_exit
  1310 ;; This function uses a non-reentrant model
  1311 ;;
  1312                           
  1313                           	psect	text10
  1314   000C42                     __ptext10:
  1315                           	callstack 0
  1316   000C42                     __Exit:
  1317                           	callstack 29
  1318   000C42                     l788:
  1319   000C42  EF21  F006         	goto	l788
  1320   000C46  0012               	return		;funcret
  1321   000C48                     __end_of__Exit:
  1322                           	callstack 0
  1323                           
  1324                           	psect	rparam
  1325   000000                     
  1326                           	psect	idloc
  1327                           
  1328                           ;Config register IDLOC0 @ 0x200000
  1329                           ;	unspecified, using default values
  1330   200000                     	org	2097152
  1331   200000  FF                 	db	255
  1332                           
  1333                           ;Config register IDLOC1 @ 0x200001
  1334                           ;	unspecified, using default values
  1335   200001                     	org	2097153
  1336   200001  FF                 	db	255
  1337                           
  1338                           ;Config register IDLOC2 @ 0x200002
  1339                           ;	unspecified, using default values
  1340   200002                     	org	2097154
  1341   200002  FF                 	db	255
  1342                           
  1343                           ;Config register IDLOC3 @ 0x200003
  1344                           ;	unspecified, using default values
  1345   200003                     	org	2097155
  1346   200003  FF                 	db	255
  1347                           
  1348                           ;Config register IDLOC4 @ 0x200004
  1349                           ;	unspecified, using default values
  1350   200004                     	org	2097156
  1351   200004  FF                 	db	255
  1352                           
  1353                           ;Config register IDLOC5 @ 0x200005
  1354                           ;	unspecified, using default values
  1355   200005                     	org	2097157
  1356   200005  FF                 	db	255
  1357                           
  1358                           ;Config register IDLOC6 @ 0x200006
  1359                           ;	unspecified, using default values
  1360   200006                     	org	2097158
  1361   200006  FF                 	db	255
  1362                           
  1363                           ;Config register IDLOC7 @ 0x200007
  1364                           ;	unspecified, using default values
  1365   200007                     	org	2097159
  1366   200007  FF                 	db	255
  1367                           
  1368                           	psect	config
  1369                           
  1370                           ;Config register CONFIG1L @ 0x300000
  1371                           ;	PLL Prescaler Selection bits
  1372                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1373                           ;	System Clock Postscaler Selection bits
  1374                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1375                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1376                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1377   300000                     	org	3145728
  1378   300000  29                 	db	41
  1379                           
  1380                           ;Config register CONFIG1H @ 0x300001
  1381                           ;	Oscillator Selection bits
  1382                           ;	FOSC = HS, HS oscillator (HS)
  1383                           ;	Fail-Safe Clock Monitor Enable bit
  1384                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1385                           ;	Internal/External Oscillator Switchover bit
  1386                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1387   300001                     	org	3145729
  1388   300001  0C                 	db	12
  1389                           
  1390                           ;Config register CONFIG2L @ 0x300002
  1391                           ;	Power-up Timer Enable bit
  1392                           ;	PWRT = ON, PWRT enabled
  1393                           ;	Brown-out Reset Enable bits
  1394                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1395                           ;	Brown-out Reset Voltage bits
  1396                           ;	BORV = 3, Minimum setting 2.05V
  1397                           ;	USB Voltage Regulator Enable bit
  1398                           ;	VREGEN = OFF, USB voltage regulator disabled
  1399   300002                     	org	3145730
  1400   300002  18                 	db	24
  1401                           
  1402                           ;Config register CONFIG2H @ 0x300003
  1403                           ;	Watchdog Timer Enable bit
  1404                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1405                           ;	Watchdog Timer Postscale Select bits
  1406                           ;	WDTPS = 32768, 1:32768
  1407   300003                     	org	3145731
  1408   300003  1E                 	db	30
  1409                           
  1410                           ; Padding undefined space
  1411   300004                     	org	3145732
  1412   300004  FF                 	db	255
  1413                           
  1414                           ;Config register CONFIG3H @ 0x300005
  1415                           ;	CCP2 MUX bit
  1416                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1417                           ;	PORTB A/D Enable bit
  1418                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1419                           ;	Low-Power Timer 1 Oscillator Enable bit
  1420                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1421                           ;	MCLR Pin Enable bit
  1422                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1423   300005                     	org	3145733
  1424   300005  81                 	db	129
  1425                           
  1426                           ;Config register CONFIG4L @ 0x300006
  1427                           ;	Stack Full/Underflow Reset Enable bit
  1428                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1429                           ;	Single-Supply ICSP Enable bit
  1430                           ;	LVP = OFF, Single-Supply ICSP disabled
  1431                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1432                           ;	ICPRT = OFF, ICPORT disabled
  1433                           ;	Extended Instruction Set Enable bit
  1434                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1435                           ;	Background Debugger Enable bit
  1436                           ;	DEBUG = 0x1, unprogrammed default
  1437   300006                     	org	3145734
  1438   300006  80                 	db	128
  1439                           
  1440                           ; Padding undefined space
  1441   300007                     	org	3145735
  1442   300007  FF                 	db	255
  1443                           
  1444                           ;Config register CONFIG5L @ 0x300008
  1445                           ;	Code Protection bit
  1446                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1447                           ;	Code Protection bit
  1448                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1449                           ;	Code Protection bit
  1450                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1451                           ;	Code Protection bit
  1452                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1453   300008                     	org	3145736
  1454   300008  0F                 	db	15
  1455                           
  1456                           ;Config register CONFIG5H @ 0x300009
  1457                           ;	Boot Block Code Protection bit
  1458                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1459                           ;	Data EEPROM Code Protection bit
  1460                           ;	CPD = OFF, Data EEPROM is not code-protected
  1461   300009                     	org	3145737
  1462   300009  C0                 	db	192
  1463                           
  1464                           ;Config register CONFIG6L @ 0x30000A
  1465                           ;	Write Protection bit
  1466                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1467                           ;	Write Protection bit
  1468                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1469                           ;	Write Protection bit
  1470                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1471                           ;	Write Protection bit
  1472                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1473   30000A                     	org	3145738
  1474   30000A  0F                 	db	15
  1475                           
  1476                           ;Config register CONFIG6H @ 0x30000B
  1477                           ;	Configuration Register Write Protection bit
  1478                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1479                           ;	Boot Block Write Protection bit
  1480                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1481                           ;	Data EEPROM Write Protection bit
  1482                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1483   30000B                     	org	3145739
  1484   30000B  E0                 	db	224
  1485                           
  1486                           ;Config register CONFIG7L @ 0x30000C
  1487                           ;	Table Read Protection bit
  1488                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1489                           ;	Table Read Protection bit
  1490                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1491                           ;	Table Read Protection bit
  1492                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1493                           ;	Table Read Protection bit
  1494                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1495   30000C                     	org	3145740
  1496   30000C  0F                 	db	15
  1497                           
  1498                           ;Config register CONFIG7H @ 0x30000D
  1499                           ;	Boot Block Table Read Protection bit
  1500                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1501   30000D                     	org	3145741
  1502   30000D  40                 	db	64
  1503                           tosu	equ	0xFFF
  1504                           tosh	equ	0xFFE
  1505                           tosl	equ	0xFFD
  1506                           stkptr	equ	0xFFC
  1507                           pclatu	equ	0xFFB
  1508                           pclath	equ	0xFFA
  1509                           pcl	equ	0xFF9
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           prodh	equ	0xFF4
  1515                           prodl	equ	0xFF3
  1516                           indf0	equ	0xFEF
  1517                           postinc0	equ	0xFEE
  1518                           postdec0	equ	0xFED
  1519                           preinc0	equ	0xFEC
  1520                           plusw0	equ	0xFEB
  1521                           fsr0h	equ	0xFEA
  1522                           fsr0l	equ	0xFE9
  1523                           wreg	equ	0xFE8
  1524                           indf1	equ	0xFE7
  1525                           postinc1	equ	0xFE6
  1526                           postdec1	equ	0xFE5
  1527                           preinc1	equ	0xFE4
  1528                           plusw1	equ	0xFE3
  1529                           fsr1h	equ	0xFE2
  1530                           fsr1l	equ	0xFE1
  1531                           bsr	equ	0xFE0
  1532                           indf2	equ	0xFDF
  1533                           postinc2	equ	0xFDE
  1534                           postdec2	equ	0xFDD
  1535                           preinc2	equ	0xFDC
  1536                           plusw2	equ	0xFDB
  1537                           fsr2h	equ	0xFDA
  1538                           fsr2l	equ	0xFD9
  1539                           status	equ	0xFD8

Data Sizes:
    Strings     54
    Constant    0
    Data        0
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      80
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    funcs	PTR FTN()void [32] size(2) Largest target is 0

    __funcs_on_exit@func	PTR FTN()void  size(2) Largest target is 0

    lcd_str@str	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_9(CODE[19]), STR_8(CODE[12]), STR_7(CODE[7]), STR_6(CODE[14]), 
		 -> STR_5(CODE[12]), STR_4(CODE[7]), STR_3(CODE[12]), STR_2(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_lcd_str
    _lcd_str->_lcd_dat
    _lcd_numb->_lcd_dat
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms
    _exit->__Exit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4908
                                             11 COMRAM     4     4      0
                               _exit
                            _lcd_cmd
                           _lcd_init
                           _lcd_numb
                            _lcd_str
 ---------------------------------------------------------------------------------
 (1) _lcd_str                                              5     3      2    1359
                                              6 COMRAM     5     3      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (1) _lcd_numb                                             3     1      2    1217
                                              6 COMRAM     3     1      2
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    1285
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0     661
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2     624
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _exit                                                 2     0      2     250
                                              2 COMRAM     2     0      2
                              __Exit
                    ___funcs_on_exit
 ---------------------------------------------------------------------------------
 (2) ___funcs_on_exit                                      2     2      0       0
 ---------------------------------------------------------------------------------
 (2) __Exit                                                2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _exit
     __Exit
     ___funcs_on_exit
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _lcd_numb
     _lcd_dat
       _atraso_ms
       _lcd_wr
   _lcd_str
     _lcd_dat

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBIGSFRhh         69      0       0      21        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      F      50       1       84.2%
BITBIGSFRll         21      0       0      25        0.0%
BITBIGSFRhll         E      0       0      23        0.0%
BITBIGSFRlh          1      0       0      24        0.0%
BITBIGSFRhlh         1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      50       3        0.0%
DATA                 0      0      50       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Nov 09 16:47:33 2022

                      l5 0B6A                        l8 0BA0                       l42 0C40  
                     l51 0B08                       l45 0BF4                       l70 0AAC  
                     l48 0BCA                       l57 0B58                       u30 0C10  
                     u31 0C0C                      l800 0C10                      l822 0C3C  
                    l852 0BF6                      l854 0BFA                      l856 0BFC  
                    l785 0C38                      l788 0C42                      u200 0BA0  
                    u201 0B9C                      u210 0B58                      u211 0B54  
                    u300 0A8A                      u220 09CC                      u301 0A86  
                    u221 09C8                      u310 0AA2                      u230 09E2  
                    u311 0A9E                      u231 09DE                      u240 09FA  
                    u320 0894                      u241 09F6                      u321 0890  
                    u250 0A12                      u330 08A8                      u251 0A0E  
                    u331 08A4                      u260 0A2A                      u340 092A  
                    u261 0A26                      u341 0926                      u190 0B86  
                    u270 0A42                      u350 093E                      u191 0B82  
                    u271 0A3E                      u351 093A                      u280 0A5A  
                    u281 0A56                      u290 0A72                      u291 0A6E  
                    wreg 000FE8                     l1020 0B8A                     l1100 0A8E  
                   l1014 0B74                     l1006 0B5A                     l1030 0BE4  
                   l1022 0BCE                     l1102 0AA2                     l1110 0838  
                   l1016 0B76                     l1008 0B66                     l1032 0BE6  
                   l1024 0BD0                     l1040 0BAC                     l1104 0AA6  
                   l1120 0862                     l1112 0844                     l1106 0C28  
                   l1018 0B86                     l1034 0BF2                     l1026 0BD6  
                   l1050 0AAE                     l1042 0BAE                     l1130 0894  
                   l1122 0868                     l1114 0846                     l1108 0C2C  
                   l1028 0BD8                     l1052 0AB2                     l1044 0BBA  
                   l1036 0BA4                     l1060 0B2E                     l1140 08C4  
                   l1132 08A8                     l1124 0874                     l1116 0858  
                   l1054 0ABE                     l1046 0BBC                     l1038 0BA6  
                   l1070 09E2                     l1062 0B30                     l1150 08EE  
                   l1142 08CA                     l1134 08AC                     l1126 087A  
                   l1118 085C                     l1048 0BC8                     l1080 0A16  
                   l1072 09E6                     l1064 09BA                     l1056 0B0A  
                   l1160 092A                     l1144 08D6                     l1136 08B2  
                   l1152 08FE                     l1128 0886                     l1090 0A5A  
                   l1082 0A2A                     l1074 09FA                     l1066 09CC  
                   l1058 0B12                     l1170 095A                     l1162 093E  
                   l1154 0904                     l1146 08DC                     l1138 08B8  
                   l1092 0A5E                     l1084 0A2E                     l1076 09FE  
                   l1068 09D0                     l1180 0984                     l1172 0960  
                   l1164 0942                     l1156 0910                     l1148 08E8  
                   l1094 0A72                     l1086 0A42                     l1078 0A12  
                   l1174 096C                     l1166 0948                     l1182 0994  
                   l1158 091C                     l1096 0A76                     l1088 0A46  
                   l1184 099A                     l1176 0972                     l1168 094E  
                   l1098 0A8A                     l1186 09A6                     l1178 097E  
                   STR_1 0835                     STR_2 082E                     STR_3 0822  
                   STR_4 082E              lcd_numb@str 0048                     STR_5 0822  
                   STR_6 0814                     STR_7 082E                     STR_8 0822  
                   STR_9 0801                     _main 0838                     _exit 0C28  
                   start 0000             ___param_bank 000000                    ?_main 0042  
                  ?_exit 0044                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISD 000F95                    _TRISE 000F96                    __Exit 0C42  
        __end_of_lcd_dat 0BCC          __end_of_lcd_cmd 0BF6          __end_of_lcd_str 0B5A  
                  _count 0041                    _funcs 0001                    tablat 000FF5  
                  status 000FD8          __initialization 0C12             __end_of_main 09BA  
           __end_of_exit 0C3A                   ??_main 004D                   ??_exit 0046  
          __activetblptr 000002                   ?__Exit 0042         __end_of_lcd_init 0B0A  
       __end_of_lcd_numb 0AAE                   _lcd_wr 0C3A                   clear_0 0C18  
                 isa$std 000001                ??_lcd_dat 0047                ??_lcd_cmd 0047  
              ??_lcd_str 004A             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            main@visitante 004F  
             __accesstop 0060  __end_of__initialization 0C1E            ___rparam_used 000001  
         __pcstackCOMRAM 0042            __end_of__Exit 0C48        ??___funcs_on_exit 0042  
                ??__Exit 0044                  ?_lcd_wr 0042                ?_lcd_init 0042  
              ?_lcd_numb 0048                  __Hparam 0000                  __Lparam 0000  
      __end_of_atraso_ms 0BA2             __psmallconst 0800                  __pcinit 0C12  
                __ramtop 0800                  __ptext0 0838                  __ptext1 0B0A  
                __ptext2 09BA                  __ptext3 0BA2                  __ptext4 0AAE  
                __ptext5 0BCC                  __ptext6 0C3A                  __ptext7 0B5A  
                __ptext8 0C28                  __ptext9 0BF6                  _lcd_dat 0BA2  
                _lcd_cmd 0BCC                  _lcd_str 0B0A               ??_lcd_init 0048  
             ??_lcd_numb 004A     end_of_initialization 0C1E            __Lmediumconst 0000  
                postinc0 000FEE                _PORTBbits 000F81                _PORTEbits 000F84  
              _TRISBbits 000F93               lcd_dat@val 0047               lcd_cmd@val 0047  
             lcd_str@str 0048          ___funcs_on_exit 0BF6               atraso_ms@i 0044  
             atraso_ms@j 0046           __end_of_lcd_wr 0C42      start_initialization 0C12  
     lcd_numb@num_placar 004A                 ??_lcd_wr 0042              __pbssCOMRAM 0001  
__end_of___funcs_on_exit 0C12                 ?_lcd_dat 0042                 ?_lcd_cmd 0042  
               ?_lcd_str 0048                _atraso_ms 0B5A              __smallconst 0800  
         atraso_ms@valor 0042               ?_atraso_ms 0042                lcd_wr@val 0042  
       ?___funcs_on_exit 0042                 __Exit@ec 0042                 __Hrparam 0000  
               __Lrparam 0000                 __ptext10 0C42                 _lcd_init 0AAE  
               _lcd_numb 09BA                 isa$xinst 000000                 main@casa 004D  
               lcd_str@i 004C              ??_atraso_ms 0044                 exit@code 0044  
